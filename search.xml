<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 编程语言-基础篇</title>
      <link href="/MeBlog/2020/04/19/Java%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/MeBlog/2020/04/19/Java%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h1><h2 id="Java语言简介"><a href="#Java语言简介" class="headerlink" title="Java语言简介"></a>Java语言简介</h2><h3 id="Java语言的起源"><a href="#Java语言的起源" class="headerlink" title="Java语言的起源"></a>Java语言的起源</h3><p>1.java 语言的前身是Oak语言<br>2.Oak是由美国公司 Sun Microsystems 在1991年推出的<br>3.1995年Sun公司将Oak语言改名为Java语言<br>4.2009年Oracle公司将Sun收购,所以迄今为止java的版本更新由Oracle发布.<br>5.Java语言有三大版本,来解决现如今主流方向的编程问题.那就是:<br>    a) java 2 Platform standard Edition 简称 j2SE 标准版本,可用于一些桌面程序的开发<br>    b) java 2 Platform Enterprise Edition 简称 j2EE 企业级版本,可以跟tomcat等一些web容器配合开发网站<br>    c) java 2 Platform Micro Edition 简称 j2ME 微型版本,可用于一些小型的计算机系统中,如开发手机的移动应用程序.</p><h3 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h3><h4 id="语法简单-功能强大-安全可靠"><a href="#语法简单-功能强大-安全可靠" class="headerlink" title="语法简单,功能强大,安全可靠"></a>语法简单,功能强大,安全可靠</h4><p>1.Java与C++同是面向对象的编程语言,C++的执行效率高于java.但java比C++更易于编程开发<br>2.java语言相比C++来说在web方面更有优势,因为java2EE在web领域目前是主流,一般的企业级网站建设都使用J2EE<br>3.因为jvm具有稳定的可靠性所以java语言是安全可靠的</p><h4 id="可跨平台"><a href="#可跨平台" class="headerlink" title="可跨平台"></a>可跨平台</h4><p>1.java实现跨平台的主要因素是 jvm(java Virtual Machine)<br>2.jvm是一台虚拟机,java通过它可以操纵平台的机器指令集.所以在不同的平台下下载不同的jvm就可实现java语言的跨平台性.<br>个人总结 Java之所以能实现跨平台就是有jvm这个中间过渡层的虚拟机.而别的没有这个过渡层的编译性语言只能依赖固定的平台</p><h4 id="解释编译两种运行方式"><a href="#解释编译两种运行方式" class="headerlink" title="解释编译两种运行方式"></a>解释编译两种运行方式</h4><p>1.JIT (just in time):JIT是一种提高程序运行效率的方法。通常，程序有两种运行方式：静态编译与动态解释。静态编译的程序在执行前全部被翻译为机器码，而动态解释执行的则是一句一句边运行边翻译。<br>2.为什么Java会引入JIT即时解释器?因为java要提高程序的运行效率.大家都知道java语言编写后的文件是.java文件,要想被jvm识别并使用需要经过javac编译成.class 文件也就是所谓的(字节码文件).然后jvm解析字节码文件时原先是逐行解释为平台的机器指令集的,这样做就存在了二次编译解析的过程,java为了提高效率引入JIT将类或类中的一些常用代码指定为热点代码(hot prot code),jvm将这些热点代码转化成于本地平台先关的机器码后并存储起来,下次遇到后直接使用来提高程序的运行效率</p><h4 id="支持多线程"><a href="#支持多线程" class="headerlink" title="支持多线程"></a>支持多线程</h4><p>1.语言级多线程功能</p><h4 id="动态执行-上下兼容的API"><a href="#动态执行-上下兼容的API" class="headerlink" title="动态执行,上下兼容的API"></a>动态执行,上下兼容的API</h4><p>1.java执行代码在运行时是动态载入的,在客户机网络允许的情况下,通过自动更新版本的方式来实现瘦客户机框架的目的.<br>2.Java提供的类库及其API种类很多,所以使用开发我们可以站在居然肩膀上进行,节省了一些不必要的操作.</p><h3 id="java开发环境的安装于配置"><a href="#java开发环境的安装于配置" class="headerlink" title="java开发环境的安装于配置"></a>java开发环境的安装于配置</h3><p>本人使用的系统是Ubuntu的,所以使用了apt install 安装了openjdk,安装路径在/usr/lib/jvm下,我创建了软链接到/usr/bin下所以或默认配置到系统的环境变量中.关于系统环境变量可查看Linux-文件配置篇</p><h2 id="Java-程序示例"><a href="#Java-程序示例" class="headerlink" title="Java 程序示例"></a>Java 程序示例</h2><h3 id="Java-应用程序-Java-Application"><a href="#Java-应用程序-Java-Application" class="headerlink" title="Java 应用程序(Java Application)"></a>Java 应用程序(Java Application)</h3><p>1.Java程序是由类构成的,程序的入口方法是main()<br>2.Java程序文件扩展名是.java,编译后生成的字节码文件的扩展名是.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">"args["</span>+i+<span class="string">"]:"</span>+args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.一个文件中只能有一个公共类,该类的名字即使文件的名字<br>4.执行程序时,程序名之后输入的内容称为命令行参数,这些参数将会放入main(String[] args)中的args字符串数组中<br>5.Java语言区分大小写</p><h3 id="Java-小应用程序-Java-Applet"><a href="#Java-小应用程序-Java-Applet" class="headerlink" title="Java 小应用程序(Java Applet)"></a>Java 小应用程序(Java Applet)</h3><h2 id="Java-中的面向对象技术"><a href="#Java-中的面向对象技术" class="headerlink" title="Java 中的面向对象技术"></a>Java 中的面向对象技术</h2><h3 id="面向对象技术"><a href="#面向对象技术" class="headerlink" title="面向对象技术"></a>面向对象技术</h3><p>1.面向对象是一种软件开发的方法.在面向对象程序设计方法出现之前,软件界广泛流行的是面向过程的设计方法<br>2.面向对象技术相比面向过程而言,可以使程序变得更简单易于理解.还有就是可以更大化的实现代码的重用<br>3.面向对象方法学,可以简单理解为.一个能使分析,设计和实现更接近人们的认识的学科<br>4.面向对象方法学主要包括3个方面<br>    1.面向对象分析(object-oriented Analysis)简称OOA<br>    2.面向对象设计(object-oriented Design)简称OOD<br>    3.面向对象编程(object-oriented Programming)简称OOP</p><h3 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h3><p>1.一个类的实例可以称为对象或实例<br>2.对象是类的一个具象,类是对象的一个抽象<br>3.OOP技术把问题看成是相互作用的事物的集合,也就是对象的集合.对象具有两个特性,一是状态,二是行为.状态是指对象本身的信息也就是属性,行为是实现对对象的操作也就是方法<br>4.OOP三大核心概念:封装、继承、多态<br>    封装：封装体现的特点是将对象的属性和方法实现的细节隐藏起来，并报露出使用的入口<br>    继承：将一个类中数据和方法保留，并加上自己特殊的数据和方法，从而构成一个新类。继承体现的是一种层次关系<br>    多态：在一个或多个类中，可以让多个方法使用同一个名字。多态可以保证对不同数据类型进行同等的操作</p><h1 id="数据和表达式"><a href="#数据和表达式" class="headerlink" title="数据和表达式"></a>数据和表达式</h1><h2 id="基本语法元素"><a href="#基本语法元素" class="headerlink" title="基本语法元素"></a>基本语法元素</h2><h3 id="空白、注释及语句"><a href="#空白、注释及语句" class="headerlink" title="空白、注释及语句"></a>空白、注释及语句</h3><h4 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h4><p>在java程序中，换行符及回车符等都可以表示一行的结束</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释不能插在一个标识符或关键字的中间</p><h5 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释 //"></a>单行注释 //</h5><h5 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释 /*"></a>多行注释 /*</h5><p>使用/<em>表示注释的开始，</em>/表示注释的结束位置</p><p>一般这种注释用于解释方法中的逻辑说明或方法说明</p><h5 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释 /**"></a>文档注释 /**</h5><p>以/*<em> 开始，</em>/结束<br>一般这种注释用于说明公共的类或方法<br>其中注释有一下参数：<br>@param 参数<br>@return 输出(返回值)<br>@throws 异常抛出</p><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><p>语句是java程序运行中的最小执行单元</p><p>程序的各语句之间需要使用；分隔</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>abstract boolean brack byte case<br>catch char class const continue default<br>do double else extends false final<br>finally flost for future generic goto<br>if implements import inner instanceof int<br>interface long native new null operator<br>outer package private protected public rest<br>return short static strictfp super switch<br>synchronized this throw throws transient true<br>try var void volatile while</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>在java编程语言中，标识符由字母、下划线（_）、美元符号（$）、字母等构成</p><p>数子不能做为标识符的首个字母</p><p>标识符可以用在类上、接口上、方法上、变量上</p><h3 id="Java编程规范"><a href="#Java编程规范" class="headerlink" title="Java编程规范"></a>Java编程规范</h3><p>1.缩进<br>2.变量的大小写<br>3.常量的大小写<br>3.方法名的应用<br>4.合理的注解和空格</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python-入门篇</title>
      <link href="/MeBlog/2020/04/17/python-%E5%85%A5%E9%97%A8%E7%AF%87/"/>
      <url>/MeBlog/2020/04/17/python-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="python的来源"><a href="#python的来源" class="headerlink" title="python的来源"></a>python的来源</h2><p>​    python是著名的“Guido van Rossum”在1989年圣诞节期间开发的编程语言</p><p>  现在，全世界差不多有600多种编程语言，但流行的编程语言也就那么20来种。如果你听说过TIOBE排行榜，你就能知道编程语言的大致流行程度。tiobe的官方数据链接如下：</p><p>  <a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">https://www.tiobe.com/tiobe-index/</a></p><p>  总的来说，这几种编程语言各有千秋。C语言是可以用来编写操作系统的贴近硬件的语言，所以，C语言适合开发那些追求运行速度、充分发挥硬件性能的程序。而Python是用来编写应用程序的高级编程语言。</p><p>  当你用一种语言开始作真正的软件开发时，你除了编写代码外，还需要很多基本的已经写好的现成的东西，来帮助你加快开发进度。比如说，要编写一个电子邮件客户端，如果先从最底层开始编写网络协议相关的代码，那估计一年半载也开发不出来。高级编程语言通常都会提供一个比较完善的基础代码库，让你能直接调用，比如，针对电子邮件协议的SMTP库，针对桌面环境的GUI库，在这些已有的代码库的基础上开发，一个电子邮件客户端几天就能开发出来。</p><p>  Python就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。</p><p>  除了内置的库外，Python还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。</p><p>  许多大型网站就是用Python开发的，例如YouTube、Instagram，还有国内的豆瓣。很多大公司，包括Google、Yahoo等，甚至NASA（美国航空航天局）都大量地使用Python。</p><h2 id="python-的优点"><a href="#python-的优点" class="headerlink" title="python 的优点"></a>python 的优点</h2><p>  life is short,you need Python –Bruce Eckel</p><p>  龟叔给Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。</p><p>  总的来说，Python的哲学就是简单优雅，尽量写容易看明白的代码，尽量写少的代码。如果一个资深程序员向你炫耀他写的晦涩难懂、动不动就几万行的代码，你可以尽情地嘲笑他。</p><p>  那Python适合开发哪些类型的应用呢？</p><p>  首选是网络应用，包括网站、后台服务等等；</p><p>  其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；</p><p>  另外就是把其他语言开发的程序再包装起来，方便使用。</p><h2 id="Python的缺点"><a href="#Python的缺点" class="headerlink" title="Python的缺点"></a>Python的缺点</h2><p>  任何编程语言都有缺点，Python也不例外。优点说过了，那Python有哪些缺点呢？</p><p>第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。</p><p>但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。例如开发一个下载MP3的网络应用程序，C程序的运行时间需要0.001秒，而Python程序的运行时间需要0.1秒，慢了100倍，但由于网络更慢，需要等待1秒，你想，用户能感觉到1.001秒和1.1秒的区别吗？这就好比F1赛车和普通的出租车在北京三环路上行驶的道理一样，虽然F1赛车理论时速高达400公里，但由于三环路堵车的时速只有20公里，因此，作为乘客，你感觉的时速永远是20公里。</p><h2 id="python交互模式"><a href="#python交互模式" class="headerlink" title="python交互模式"></a>python交互模式</h2><p>  使用当前系统的命令模式，输入python3即可进入交互模式，输入exit()可退出python交互式模式。<br>  交互式模式可以直接显示代码运行的结果。但是之前输入的代码退出交互式模式后不能存到硬盘中</p><h2 id="命令行执行-py文件"><a href="#命令行执行-py文件" class="headerlink" title="命令行执行.py文件"></a>命令行执行.py文件</h2><p>  命令行模式下，进入要执行的.py文件同目录下，输入python3 文件名即可运行</p><h2 id="变量的命名规则（标识符）"><a href="#变量的命名规则（标识符）" class="headerlink" title="变量的命名规则（标识符）"></a>变量的命名规则（标识符）</h2><p>  变量名只能包含字母，数字和下划线，且不能以数字打头；</p><p>  变量名不能包含空格；</p><p>  不能将Python 关键字和函数名作为变量名使用；</p><p>  慎用小写字母i和大写字母O，容易看成数字1和数字0；</p><p>  Python 的命名是大小写敏感的，也就是说a和A对于解释器而言，是两个不同的名字；</p><h2 id="占位符（place-holder）"><a href="#占位符（place-holder）" class="headerlink" title="占位符（place holder）"></a>占位符（place holder）</h2><p>  %d %.2f %.1f %s</p><p>  %d 表示十进制整数占位符<br>  %.2f 表示浮点数保留到2位小数点后<br>  %.1f 表示浮点数保留到1位小数点后<br>  %s 表示字符串</p><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>  二进制 （binary）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0b111</span> <span class="comment">#7</span></span><br><span class="line"><span class="comment">#二进制的形式表示7</span></span><br><span class="line">a = bin(<span class="number">7</span>)</span><br></pre></td></tr></table></figure></p><p>  十进制 （decimal）<br>  十六进制 （hexadecimal）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0xff</span> <span class="comment">#255</span></span><br><span class="line"><span class="comment">#十六进制的形式表示255</span></span><br><span class="line">hex(<span class="number">255</span>)</span><br></pre></td></tr></table></figure></p><p>  占位符表示进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"%x"</span> %(<span class="number">255</span>)) <span class="comment">#使用16进制的形式表示255</span></span><br></pre></td></tr></table></figure></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>多行注释 “””<br>单行注释 #</p><h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h2><p>  list 列表类似Java中的列表list都是类构成</p><p>  下标的使用如: list[1]、list[-1]</p><p>  列表的追加如：list.append()</p><p>  列表的删除如：</p><pre><code>del list[x] 直接删除指定索引处的元素list.pop(x) 弹出指定索引处的元素并返回list.remove(x) 删除首个指定元素</code></pre><p>  列表的排序：<br>    list.sort()<br>  列表拷贝<br>    list.copy() 此拷贝不是深层拷贝，如果想要深层拷贝使用copy.deepcopy</p><h3 id="数值列表"><a href="#数值列表" class="headerlink" title="数值列表"></a>数值列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"output of range(10):"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">  print(i)</span><br></pre></td></tr></table></figure><h3 id="列表的快速生成"><a href="#列表的快速生成" class="headerlink" title="列表的快速生成"></a>列表的快速生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">0</span>]*<span class="number">8</span>]*<span class="number">10</span></span><br><span class="line">cubes = [x**<span class="number">3</span> + <span class="number">100</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">variables = [x+y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abc'</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'0123'</span>]</span><br></pre></td></tr></table></figure><h2 id="切片-slice"><a href="#切片-slice" class="headerlink" title="切片(slice)"></a>切片(slice)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"numbers[3:9]:"</span>,numbers[<span class="number">3</span>:<span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>  切片会生成一个新的list返回，并不是直接操作原有的list<br>  切片可以对str类型的数据使用</p><p>  妙用切片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">numbers = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">numbersCopy = numbers[:]</span><br><span class="line"></span><br><span class="line">numbersReversed = numbers[::<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">"numbers[:3:-2] is:"</span>,numbers[:<span class="number">3</span>:<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"numbers[:3:-2] is:"</span>,numbers[:<span class="number">3</span>:<span class="number">-2</span>])</span><br></pre></td></tr></table></figure></p><p>  将切片的参数划分为[x:y:z]<br>  当z为正数时 x默认为0,y默认为最后一个元素不包含、<br>  当z为负数时 x默认为最后一个值，y默认为第一个值并且包含</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h3><p>元组是只读的列表<br>当只有一个数时需要加，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print((<span class="number">1</span>,))</span><br></pre></td></tr></table></figure></p><h3 id="byte字节"><a href="#byte字节" class="headerlink" title="byte字节"></a>byte字节</h3><p>字节的作用：用来存储数据方便数据的交流，如字节流</p><p>字节的存储Python：</p><p>little 高位字节存高地址<br>big    高位字节存低地址</p><p>Intel ARM   little endian</p><p>Motorola    big endian</p><h4 id="将数据以二进制字节的方式存储"><a href="#将数据以二进制字节的方式存储" class="headerlink" title="将数据以二进制字节的方式存储"></a>将数据以二进制字节的方式存储</h4><p>example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">lData = [<span class="number">11</span>,<span class="number">18.234</span>,<span class="number">10.342</span>,<span class="number">3.2342</span>,<span class="number">13</span>]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'secondData.dat'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> d:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lData:</span><br><span class="line">        d.write(struct.pack(<span class="string">"&lt;f"</span>,i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">data = <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'secondData.dat'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> d:</span><br><span class="line">    data = d.read()</span><br><span class="line"></span><br><span class="line">iSampleCount = len(data)//<span class="number">4</span> <span class="comment">#解包的时候是按照4个字节的大小来进行的，所以要求4的倍数，因为Python使用/的结果是flot所以使用//。另外数据的总长度len(data)肯定是能被4整除。</span></span><br><span class="line">print(len(data))</span><br><span class="line">lCurveData = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(iSampleCount):</span><br><span class="line">    fValue, = struct.unpack(<span class="string">'&lt;f'</span>,data[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>])</span><br><span class="line">    lCurveData.append(fValue)</span><br><span class="line"></span><br><span class="line">print(lCurveData)</span><br><span class="line">plt.plot(lCurveData)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="bytearray"><a href="#bytearray" class="headerlink" title="bytearray"></a>bytearray</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">buffer = bytearray(<span class="string">b'asdajhskfahs'</span>)</span><br><span class="line">buffer[<span class="number">1</span>] = ord(<span class="string">'B'</span>)</span><br><span class="line">print(buffer)</span><br></pre></td></tr></table></figure><p>可以修改的byte 数组</p><h3 id="序列-（sequence）"><a href="#序列-（sequence）" class="headerlink" title="序列 （sequence）"></a>序列 （sequence）</h3><p>拥有的共同点：都可以使用索引、切片，并且拥有顺序</p><p>如 list tuple str byte bytearray</p><h3 id="只读类型"><a href="#只读类型" class="headerlink" title="只读类型"></a>只读类型</h3><p>int float str bytes boolean tuple</p><h3 id="可修改类型"><a href="#可修改类型" class="headerlink" title="可修改类型"></a>可修改类型</h3><p>list bytearray dict</p><h2 id="名字绑定-name-binding"><a href="#名字绑定-name-binding" class="headerlink" title="名字绑定 (name binding)"></a>名字绑定 (name binding)</h2><p>概念名词： 名字（name） 对象(object) 绑定(binding)</p><p>例子：q=2</p><p>解释就是 将 name q 绑定到 object 2 上</p><h2 id="is"><a href="#is" class="headerlink" title="== is"></a>== is</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"a==b:"</span>,a==b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"a is b:"</span>,a <span class="keyword">is</span> b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"a:"</span>,id(a),<span class="string">"b:"</span>,id(b))</span><br></pre></td></tr></table></figure><h2 id="序列解包-sequence-unpack"><a href="#序列解包-sequence-unpack" class="headerlink" title="序列解包(sequence unpack)"></a>序列解包(sequence unpack)</h2><p>  x,y,z = ‘x’,’y’,’z’<br>  print(x,y,z)</p><p>  x,y = y,x</p><p>  print(x,y)</p><p>  numbers = 1,2,3<br>  print(type(numbers),numbers)</p><p>  a,b,c = numbers<br>  print(a,b,c)</p><p>  d,e,f = 4,5,6<br>  print(d,e,f)</p><p>  g,h,i = ‘789’<br>  print(g,h,i)</p><p>  j,k,l = b’\x10\x20\x30’<br>  print(j,k,l)</p><p>  序列解包，首先解包的对象必须是序列,其次解包时两边数据必须保持一致,不然会报错如下<br>  j,k= b’\x10\x20\x30’<br>  number1,number2 = 1,2,3<br>  print(j,k)</p><p>  解包元素赋值序列<br>  lstr  = “Lenoardo di ser Piero Da Vinci”.split()<br>  first,*middle,last = lstr<br>  print(‘first:’,first,”- middle:”,middle,”- last:”,last)<br>  print(‘first id is:’,id(first),”lstr[1] id is:”,id(lstr[1]))</p><h2 id="链式赋值"><a href="#链式赋值" class="headerlink" title="链式赋值"></a>链式赋值</h2><p>x = y = 2</p><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>非空即真,非零即真</p><h2 id="for-可迭代对象-iterable-object"><a href="#for-可迭代对象-iterable-object" class="headerlink" title="for 可迭代对象 iterable object"></a>for 可迭代对象 iterable object</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"asdafasg"</span>:</span><br><span class="line">    s += x +<span class="string">"-"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="for-else-当for-条件不成立时会触发else-的代码块并执行"><a href="#for-else-当for-条件不成立时会触发else-的代码块并执行" class="headerlink" title="for  else  当for 条件不成立时会触发else 的代码块并执行"></a>for  else  当for 条件不成立时会触发else 的代码块并执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> names:</span><br><span class="line">    <span class="keyword">if</span> x.endswith(<span class="string">"Bach"</span>):</span><br><span class="line">        print(<span class="string">" I found a Bach:"</span>,x)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No Bach been found."</span>)</span><br><span class="line"></span><br><span class="line">matrix = [[x+<span class="number">1</span>+y <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)] <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        matrix[r][c] *= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> matrix:</span><br><span class="line">    print(r)</span><br></pre></td></tr></table></figure><h2 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum = i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">100</span>:</span><br><span class="line">    sum += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(<span class="string">"sum of (1,2...,100) = "</span>,sum)</span><br><span class="line"></span><br><span class="line">names = [<span class="string">"Peter Anderson"</span>,<span class="string">"Frank Bush"</span>,<span class="string">"Tom Henry"</span>,<span class="string">"Jack Lee"</span>,<span class="string">"Dorothy Henry"</span>]</span><br></pre></td></tr></table></figure><h2 id="带下标的遍历-enumerate"><a href="#带下标的遍历-enumerate" class="headerlink" title="带下标的遍历 enumerate"></a>带下标的遍历 enumerate</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Tom'</span>,<span class="string">'Andy'</span>,<span class="string">'Alex'</span>,<span class="string">'Dorothy'</span>]</span><br><span class="line">print(list(enumerate(names)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx,name <span class="keyword">in</span> enumerate(names):</span><br><span class="line">    print(name +<span class="string">" is %s,id is %s"</span> % (name,idx))</span><br></pre></td></tr></table></figure><h2 id="反向遍历"><a href="#反向遍历" class="headerlink" title="反向遍历"></a>反向遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> reversed(names):</span><br><span class="line">    print(x)</span><br><span class="line">print(names)</span><br><span class="line"><span class="comment"># reversed会生成一个新的序列并将原有的值反向存储</span></span><br><span class="line"><span class="comment"># list本身的reverse会将当前序列的值反向存储</span></span><br></pre></td></tr></table></figure><h2 id="del"><a href="#del" class="headerlink" title="del"></a>del</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">"Anything"</span></span><br><span class="line"></span><br><span class="line">y = x</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> y</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h2 id="exec-执行代码无返回"><a href="#exec-执行代码无返回" class="headerlink" title="exec 执行代码无返回"></a>exec 执行代码无返回</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exec(<span class="string">"print('This  string was print in exec function')"</span>)</span><br><span class="line"></span><br><span class="line">scopeTemp = &#123;&#125;</span><br><span class="line">scopeTemp[<span class="string">'x'</span>] = <span class="number">30</span></span><br><span class="line">scopeTemp[<span class="string">'y'</span>] = <span class="number">20</span></span><br><span class="line">exec(<span class="string">"sum = x+y"</span>,scopeTemp)</span><br><span class="line">print(<span class="string">"sum = "</span>,scopeTemp[<span class="string">"sum"</span>])</span><br></pre></td></tr></table></figure><h2 id="eval-evaluation-评估-执行代码有返回"><a href="#eval-evaluation-评估-执行代码有返回" class="headerlink" title="eval evaluation 评估 执行代码有返回"></a>eval evaluation 评估 执行代码有返回</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = eval(<span class="string">"3+2-5"</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">sText = <span class="string">"Mary have &#123;&#125; lambs,they are &#123;n1&#125;,&#123;n2&#125; and &#123;&#125;."</span>.format(<span class="number">3</span>,<span class="string">'cot'</span>,n2=<span class="string">'happy'</span>,n1=<span class="string">'nauty'</span>)</span><br><span class="line">print(sText)</span><br><span class="line"></span><br><span class="line">dora = &#123;<span class="string">"name"</span>:<span class="string">"Dora"</span>,<span class="string">"id"</span>:<span class="number">17</span>,<span class="string">"age"</span>:<span class="number">32</span>,<span class="string">"gender"</span>:<span class="string">"mate"</span>,<span class="string">"title"</span>:<span class="string">"hello"</span>&#125;</span><br><span class="line">sDoraHtml = <span class="string">"""</span></span><br><span class="line"><span class="string">            &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">            &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">            &lt;head&gt;</span></span><br><span class="line"><span class="string">                &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">                &lt;title&gt;Employee &#123;name&#125;'s information&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;/head&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;h1&gt; Employee &#123;name&#125;'s Information&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;table border="1" width="100%"&gt;</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;ID:&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;&#123;id&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;Name:&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;&#123;name&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;Age:&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;&#123;age&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;Gender:&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;&#123;gender&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;Title:&lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;td&gt;&#123;title&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">                &lt;/table&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">t = open(<span class="string">"dora.html"</span>,<span class="string">'w'</span>)</span><br><span class="line">t.write(sDoraHtml.format_map(dora))</span><br><span class="line">t.close()</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">"google-chrome dora.html"</span>)</span><br></pre></td></tr></table></figure><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>  key 必须是可哈希类型 hashable Type<br>    可哈希类型 int float str tuple<br>    不可哈希类型 dict list<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">doroth = dict(name=<span class="string">"Dorothy"</span>,id = <span class="string">"10003"</span>,age = <span class="number">26</span>)</span><br><span class="line">print(doroth)</span><br><span class="line"></span><br><span class="line">d = dict.fromkeys([<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'age'</span>],<span class="string">"unknown"</span>)</span><br><span class="line">d1 = &#123;&#125;.fromkeys([<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'age'</span>],<span class="string">"unknown"</span>)</span><br><span class="line"></span><br><span class="line">print(d)</span><br><span class="line">print(d1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dora = &#123;<span class="string">"name"</span>:<span class="string">"Dora"</span>,<span class="string">"id"</span>:<span class="number">17</span>,<span class="string">"age"</span>:<span class="number">32</span>,<span class="string">"gender"</span>:<span class="string">"mate"</span>,<span class="string">"title"</span>:<span class="string">"hello"</span>&#125;</span><br><span class="line"><span class="comment"># print(dora['salary'])</span></span><br><span class="line">print(dora.get(<span class="string">"salary"</span>,<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">sTitle = dora.pop(<span class="string">'title'</span>)</span><br><span class="line">print(sTitle)</span><br><span class="line">print(dora)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dora = &#123;<span class="string">'id'</span>:<span class="number">10003</span>,<span class="string">'age'</span>:<span class="number">32</span>,<span class="string">'title'</span>:<span class="string">'Salas'</span>&#125;</span><br><span class="line">dora2 = &#123;<span class="string">'id'</span>:<span class="number">10004</span>,<span class="string">'title'</span>:<span class="string">'CEO'</span>,<span class="string">'gender'</span>:<span class="string">'female'</span>&#125;</span><br><span class="line"></span><br><span class="line">dora.update(dora2)</span><br><span class="line">print(dora)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dora:</span><br><span class="line">    print(i,end=<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dora.keys():</span><br><span class="line">    print(i,end=<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dora.items():</span><br><span class="line">    print(key,<span class="string">"-"</span>,value)</span><br></pre></td></tr></table></figure></p><h2 id="函数与抽象"><a href="#函数与抽象" class="headerlink" title="函数与抽象"></a>函数与抽象</h2><p>Python实现使用函数的案例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">costCompute</span><span class="params">(iStart,iEnd)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算客户电费，每度电10元</span></span><br><span class="line"><span class="string">    :param iStart: 起始度数</span></span><br><span class="line"><span class="string">    :param iEnd: 最终度数</span></span><br><span class="line"><span class="string">    :return: 电费</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    iCousume = iEnd - iStart</span><br><span class="line">    <span class="keyword">return</span> iCousume * <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(costCompute(<span class="number">100</span>,<span class="number">230</span>))</span><br></pre></td></tr></table></figure></p><h3 id="默认参数（default-parameter）"><a href="#默认参数（default-parameter）" class="headerlink" title="默认参数（default parameter）"></a>默认参数（default parameter）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(n,gender=<span class="string">"male"</span>)</span>:</span></span><br><span class="line">    n = n.title()</span><br><span class="line">    s = <span class="string">"Mr "</span> <span class="keyword">if</span> gender == <span class="string">'male'</span> <span class="keyword">else</span> <span class="string">"Miss"</span></span><br><span class="line">    print(<span class="string">"Hi,"</span>,s,n)</span><br><span class="line"></span><br><span class="line">sName = <span class="string">"alan turning"</span></span><br><span class="line">greeting(sName)</span><br></pre></td></tr></table></figure><h3 id="非只读类型的参数"><a href="#非只读类型的参数" class="headerlink" title="非只读类型的参数"></a>非只读类型的参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initPerson</span><span class="params">(person,id,name,age,gender,title)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> type(person) == dict</span><br><span class="line">    person[<span class="string">'id'</span>] = id</span><br><span class="line">    person[<span class="string">'name'</span>] = name</span><br><span class="line">    person[<span class="string">'age'</span>] = age</span><br><span class="line">    person[<span class="string">'gender'</span>] = gender</span><br><span class="line">    person[<span class="string">'title'</span>] = title</span><br><span class="line"></span><br><span class="line">dora = &#123;&#125;</span><br><span class="line">initPerson(dora,<span class="string">'10003'</span>,<span class="string">'dora chen'</span>,<span class="number">32</span>,<span class="string">'female'</span>,<span class="string">'sales'</span>)</span><br></pre></td></tr></table></figure><h3 id="关键字参数调用"><a href="#关键字参数调用" class="headerlink" title="关键字参数调用"></a>关键字参数调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initPerson</span><span class="params">(person,id,name,age,gender,title)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> type(person) == dict</span><br><span class="line">    person[<span class="string">'id'</span>] = id</span><br><span class="line">    person[<span class="string">'name'</span>] = name</span><br><span class="line">    person[<span class="string">'age'</span>] = age</span><br><span class="line">    person[<span class="string">'gender'</span>] = gender</span><br><span class="line">    person[<span class="string">'title'</span>] = title</span><br><span class="line"></span><br><span class="line">initPerson(person=dora,id=<span class="string">'10003'</span>,name=<span class="string">'dora chen'</span>,age=<span class="number">32</span>,gender=<span class="string">'female'</span>,title=<span class="string">'sales'</span>)</span><br><span class="line">print(dora)</span><br></pre></td></tr></table></figure><h3 id="任意数量参数"><a href="#任意数量参数" class="headerlink" title="任意数量参数"></a>任意数量参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPrint</span><span class="params">(title,*contents)</span>:</span></span><br><span class="line">    print(title,<span class="string">":"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> contents:</span><br><span class="line">        print(<span class="string">"\t"</span>,i)</span><br><span class="line"></span><br><span class="line">myPrint(<span class="string">"Read-only data type:"</span>,<span class="string">"int"</span>,<span class="string">"float"</span>,<span class="string">'tuple'</span>,<span class="string">'str'</span>,<span class="string">'bytes'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myprint</span><span class="params">(title,**contents)</span>:</span></span><br><span class="line">    print(title,<span class="string">":"</span>)</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> contents.items():</span><br><span class="line">        print(<span class="string">"\t"</span>,k+<span class="string">":"</span>,v)</span><br><span class="line">myprint(<span class="string">"dora"</span>,name=<span class="string">"Dora chen"</span>,age=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initPerson</span><span class="params">(person,id,name,age,gender,title)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> type(person) == dict</span><br><span class="line">    person[<span class="string">'id'</span>] = id</span><br><span class="line">    person[<span class="string">'name'</span>] = name</span><br><span class="line">    person[<span class="string">'age'</span>] = age</span><br><span class="line">    person[<span class="string">'gender'</span>] = gender</span><br><span class="line">    person[<span class="string">'title'</span>] = title</span><br><span class="line"></span><br><span class="line">dora = &#123;&#125;</span><br><span class="line">tDora = (<span class="string">'10003'</span>,<span class="string">'dora chen'</span>,<span class="number">32</span>,<span class="string">'female'</span>,<span class="string">'sales'</span>)</span><br><span class="line">initPerson(dora,*tDora)</span><br><span class="line">print(dora)</span><br><span class="line"></span><br><span class="line">dDora = &#123;<span class="string">'id'</span>:<span class="string">"10003"</span>,<span class="string">'name'</span>:<span class="string">'dora chen'</span>,<span class="string">'age'</span>:<span class="number">32</span>,<span class="string">'gender'</span>:<span class="string">'female'</span>,<span class="string">'title'</span>:<span class="string">'sales'</span>&#125;</span><br><span class="line">initPerson(dora,**dDora)</span><br><span class="line">print(dora)</span><br></pre></td></tr></table></figure><h3 id="python-全局作用域实现方式"><a href="#python-全局作用域实现方式" class="headerlink" title="python 全局作用域实现方式"></a>python 全局作用域实现方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">x =<span class="number">1</span></span><br><span class="line">y =<span class="number">2</span></span><br><span class="line">scope = vars()</span><br><span class="line">pprint.pprint(scope)</span><br><span class="line">scope[<span class="string">'x'</span>] = <span class="number">3</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h3 id="递归-阶乘（factorial）总结不要在大规模的计算中使用递归"><a href="#递归-阶乘（factorial）总结不要在大规模的计算中使用递归" class="headerlink" title="递归 阶乘（factorial）总结不要在大规模的计算中使用递归"></a>递归 阶乘（factorial）总结不要在大规模的计算中使用递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n*(factorial(n<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"6!="</span>,factorial(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p> 程序设计语言<br> 1990年前<br> 结构化编程 structured programming<br> 1990年后<br> 面向对象程序语言 object oriented programming</p><p>面向对象关键术语：</p><p>  类型 type or class</p><p>  对象 object or instance</p><p>  属性 attribute or data member</p><p>  方法 method or function</p><p>example：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gender</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    mate = <span class="number">1</span></span><br><span class="line">    female = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(range.__doc__)</span><br></pre></td></tr></table></figure></p><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># write</span></span><br><span class="line">f = open(<span class="string">'datafile.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">"This is a file which is writable in text mode.\n"</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">f = open(<span class="string">'datafile.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">sLine1 = f.readline()</span><br><span class="line">print(sLine1)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全使用流的简洁方式</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'datafile.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">  sLine1 = f.readline()</span><br><span class="line">  print(sLine1)</span><br></pre></td></tr></table></figure><h2 id="标准输入-标准输出-错误流"><a href="#标准输入-标准输出-错误流" class="headerlink" title="标准输入 标准输出 错误流"></a>标准输入 标准输出 错误流</h2><p>example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">iInput = open(<span class="string">'standardInput.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">iInput.write(<span class="string">'Alas\n'</span>)</span><br><span class="line">iInput.write(<span class="string">'27\n'</span>)</span><br><span class="line">iInput.close()</span><br><span class="line"></span><br><span class="line">sys.stdout = open(<span class="string">'standardOut.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">sys.stdin = open(<span class="string">'standardInput.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">sys.stderr = open(<span class="string">'standardError.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">name = input(<span class="string">'Water are you Name?'</span>)</span><br><span class="line">age = input(<span class="string">'How old are you'</span>)</span><br><span class="line">print(<span class="string">'This is %s she %s old'</span> %(name,age))</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">"Exception infomatoin"</span>)</span><br></pre></td></tr></table></figure><h2 id="管道重定向"><a href="#管道重定向" class="headerlink" title="管道重定向"></a>管道重定向</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat title.txt | python wordCount.py</span><br></pre></td></tr></table></figure><h2 id="结构化文本文件-ini-json"><a href="#结构化文本文件-ini-json" class="headerlink" title="结构化文本文件 ini json"></a>结构化文本文件 ini json</h2><p>example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dora = <span class="string">"&#123;'name':'Dora','no':'2018173','age':26,'married':false,'scores':[&#123;'c++':76&#125;,&#123;'Data structure':99.5&#125;]&#125;"</span></span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">iDora = open(<span class="string">'dora.json'</span>,<span class="string">'w'</span>)</span><br><span class="line">json.dump(dora,iDora)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">dora = json.load(open(<span class="string">'dora.json'</span>,<span class="string">'r'</span>))</span><br><span class="line">print(dora)</span><br></pre></td></tr></table></figure><h2 id="异常、警告"><a href="#异常、警告" class="headerlink" title="异常、警告"></a>异常、警告</h2><p>异常勾子 ：当系统发生异常时会执行一个指定的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,traceback</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userExceptHook</span><span class="params">(exceptType,value,traceBack)</span>:</span></span><br><span class="line">    fError = open(<span class="string">'except_error.log'</span>, <span class="string">'w'</span>)</span><br><span class="line">    traceList = traceback.format_tb(traceBack)</span><br><span class="line">    html = str(datetime.now())+<span class="string">'\n'</span></span><br><span class="line">    html += repr(exceptType)+<span class="string">'\n'</span></span><br><span class="line">    html += repr(value) + <span class="string">'\n'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> traceList:</span><br><span class="line">        html += i+<span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">    print(html,file=sys.stderr)</span><br><span class="line">    print(html,file=fError)</span><br><span class="line">    fError.close()</span><br><span class="line"></span><br><span class="line">sys.excepthook = userExceptHook</span><br><span class="line"></span><br><span class="line">sFirst = input(<span class="string">"first number"</span>)</span><br><span class="line">sSecond = input(<span class="string">"second number"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(int(sFirst)/int(sSecond))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure></p><h2 id="类的序列化-迭代器和生成器函数"><a href="#类的序列化-迭代器和生成器函数" class="headerlink" title="类的序列化 迭代器和生成器函数"></a>类的序列化 迭代器和生成器函数</h2><h3 id="类的序列化"><a href="#类的序列化" class="headerlink" title="类的序列化"></a>类的序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.seq = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        self.maxKey = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computeTo</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.seq),key +<span class="number">1</span>):</span><br><span class="line">            v = self.seq[i<span class="number">-1</span>]+self.seq[i<span class="number">-2</span>]</span><br><span class="line">            self.seq.append(v)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(item, int):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'type of item need int'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(item&gt;=<span class="number">0</span> <span class="keyword">and</span> item&lt;self.maxKey):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">"sequence max length is 1000,you's item &gt; max length"</span>)</span><br><span class="line">        <span class="keyword">if</span> item&gt;len(self.seq):</span><br><span class="line">            self.computeTo(item)</span><br><span class="line">        <span class="keyword">return</span> self.seq[item]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(key, int):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'type of key need int'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(key&gt;=<span class="number">0</span> <span class="keyword">and</span> key&lt;self.maxKey):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">"sequence max length is 1000,you's key &gt; max length"</span>)</span><br><span class="line">        <span class="keyword">if</span> key &gt; len(self.seq):</span><br><span class="line">            self.computeTo(key)</span><br><span class="line">        self.seq[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.maxKey</span><br><span class="line"></span><br><span class="line">f = Fibonacci()</span><br><span class="line">print(<span class="string">"f[20]:"</span>,f[<span class="number">20</span>])</span><br><span class="line">f[<span class="number">10</span>] = <span class="string">"熊孩子"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    print(f[i],end=<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"----------------------------------------------------------------------------------"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span><span class="params">(list)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,*arg)</span>:</span></span><br><span class="line">        super().__init__(*arg)</span><br><span class="line">        self.iCounter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self.iCounter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> super().__getitem__(item)</span><br><span class="line"></span><br><span class="line">f = Fibonacci(range(<span class="number">100</span>))</span><br><span class="line">print(<span class="string">'f[20]'</span>,f[<span class="number">20</span>])</span><br><span class="line">f[<span class="number">19</span>] = <span class="string">"熊孩子"</span></span><br><span class="line">print(<span class="string">'f[19]'</span>,f[<span class="number">19</span>])</span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure><h3 id="创建可迭代类"><a href="#创建可迭代类" class="headerlink" title="创建可迭代类"></a>创建可迭代类</h3><p>  迭代器和序列的对比</p><p>  迭代器,由于是当系统调用next方法时才会生成相应的数据所以在系统资源占用损耗节省方面优于序列,但是不能像序列那样可以随意指定下标取值,并且只能迭代一次.推荐需要依次获取一次数据时使用</p><p>  序列,由于系统执行后会在系统内部一次性创建完成序列所以系统资源占用损耗节省方面劣于迭代器,但是它可以获取指定下标的值.推荐在重复或指定获取数据的情况下使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,arg)</span>:</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.length = arg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(self.index,int):</span><br><span class="line">            <span class="keyword">raise</span> TypeError</span><br><span class="line">        <span class="keyword">elif</span> self.index &gt;= self.length <span class="keyword">or</span> self.index&lt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">if</span> self.index <span class="keyword">in</span>(<span class="number">0</span>,<span class="number">1</span>):</span><br><span class="line">            result = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = self.a + self.b</span><br><span class="line">            self.a,self.b = self.b,result</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">f = Fibonacci(<span class="number">10</span>)</span><br><span class="line">print(list(f))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    print(i,end=<span class="string">","</span>)</span><br></pre></td></tr></table></figure><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacciGenerator</span><span class="params">(len)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(len,int):</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line">    a,b =<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c = a + b</span><br><span class="line">            a,b = b,c</span><br><span class="line">            <span class="keyword">yield</span> c</span><br><span class="line">f = fibonacciGenerator(<span class="number">10</span>)</span><br><span class="line">print(list(f))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    print(i,end=<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">f = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="comment">#列表推导</span></span><br><span class="line">f2 = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)) </span><br><span class="line">print(type(f),f)</span><br><span class="line">print(type(f2),list(f))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-命令篇</title>
      <link href="/MeBlog/2020/04/03/Linux-%E5%91%BD%E4%BB%A4%E7%AF%87/"/>
      <url>/MeBlog/2020/04/03/Linux-%E5%91%BD%E4%BB%A4%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h3><h4 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]#</span><br></pre></td></tr></table></figure><p> 如上所示：<br>       [] ：是centos的提示分隔符，没有特殊的意义<br>       root ：表示当前的登录用户<br>       @ ：表示分隔符号，没有特殊的意义<br>       bogon : 表示当前系统的简写<br>       ～ ：表示当前用户所在的目录，～就是当前用户的家(home)目录</p><pre><code># : 命令提示符，可以标识当前登录用户的权限等级，普通用户使用$标识，超级管理员用#标识</code></pre><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><p><img src="http://39.104.171.29/image/1553455157361.png" alt="1553455157361"></p><p>选项存在2种格式</p><pre><code>1.长格式选项 如：--all 2.短格式选项 如：-a</code></pre><h4 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h4><p><img src="http://39.104.171.29/image/1553455753059.png" alt="1553455753059"></p><p>使用 -a 时会看到有的文件名前有.此时表示此文件为隐藏文件。</p><p>使用-l 查看详细信息</p><p><img src="http://39.104.171.29/image/1553456138517.png" alt="1553456138517"></p><p>上面1表示此文件的链接计数</p><p><img src="http://39.104.171.29/image/1553456202080.png" alt="1553456202080"></p><p>上面的root 表示文件的所有者，也就是文件的创建人或负责人，一个文件只能有一个所有者</p><p><img src="http://39.104.171.29/image/1553456372734.png" alt="1553456372734"></p><p>上面表示文件的所属组，一个文件只能拥有一个所有组</p><p>在-l 后追加h -lh 表示人性化显示，使文件的大小更直观、</p><p><img src="http://39.104.171.29/image/1553456551687.png" alt="1553456551687"></p><p>ls -i 可以获取文件的I节点或获取文件的id号</p><p><img src="http://39.104.171.29/image/1553457241923.png" alt="1553457241923"></p><p><img src="http://39.104.171.29/image/1553457569457.png" alt="1553457569457"></p><p>cd - 回到上次操作的目录</p><p>cd ~ 回到当前用户的根目录</p><p>cd 回到当前用户的根目录</p><p><img src="http://39.104.171.29/image/1553457832770.png" alt="1553457832770"></p><p><img src="http://39.104.171.29/image/1553457956595.png" alt="1553457956595"></p><p><img src="http://39.104.171.29/image/1553458096340.png" alt="1553458096340"></p><p><img src="http://39.104.171.29/image/1553458587530.png" alt="1553458587530"></p><p><img src="http://39.104.171.29/image/1553458964678.png" alt="1553458964678"></p><p>tree 命令以目录树的方式显示文件结构信息</p><p>使用tree 时可能会遇到command not  found ,这时就需要安装此命令</p><p>本人使用的是centos 7 的系统 发现使用yum 无法获取tree的安装包</p><p>所以只能使用源码包安装，于是在<a href="ftp://mama.indstate.edu/linux/tree/" target="_blank" rel="noopener">ftp://mama.indstate.edu/linux/tree/</a> 下载了 源码包</p><p>在/usr/local/src 下使用make 编译了源码包</p><h4 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h4><p><img src="http://39.104.171.29/image/1553463374927.png" alt="1553463374927"></p><p><img src="http://39.104.171.29/image/1553463888804.png" alt="1553463888804"></p><p>cat 适用于查看简短文件内容，如shell脚本</p><p><img src="http://39.104.171.29/image/1553464171496.png" alt="1553464171496"></p><p><img src="http://39.104.171.29/image/1553464603686.png" alt="1553464603686"></p><p>less 进入后使用 /关键字 可进行反白关键字高亮显示，同时按N键可以跳到下一个关键字，在高亮的关键字后加入！可以取消高亮效果</p><p><img src="http://39.104.171.29/image/1553465266101.png" alt="1553465266101"></p><p><img src="http://39.104.171.29/image/1553465409489.png" alt="1553465409489"></p><p><img src="http://39.104.171.29/image/1553600438679.png" alt="1553600438679"></p><p><img src="http://39.104.171.29/image/1553601846764.png" alt="1553601846764"></p><p>硬链接的生成命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln /tmp/china/changzhi /root/china.hard</span><br></pre></td></tr></table></figure><p>硬链接 共享文件的inode ,但是文件夹不能创建硬链接。</p><h4 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h4><p>权限分为了三类 r w s 读 写 执行</p><p><img src="http://39.104.171.29/image/1553602141983.png" alt="1553602141983"></p><p><img src="http://39.104.171.29/image/1553602447029.png" alt="1553602447029"></p><p><img src="http://39.104.171.29/image/1553603202959.png" alt="1553603202959"></p><p><img src="http://39.104.171.29/image/1553603260245.png" alt="1553603260245"></p><h5 id="其他权限管理命令"><a href="#其他权限管理命令" class="headerlink" title="其他权限管理命令"></a>其他权限管理命令</h5><p><img src="http://39.104.171.29/image/1553605959901.png" alt="1553605959901"></p><p><img src="http://39.104.171.29/image/1553606015581.png" alt="1553606015581"></p><p><img src="http://39.104.171.29/image/1553606075600.png" alt="1553606075600"></p><h4 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h4><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><p><img src="http://39.104.171.29/image/1553749537377.png" alt="1553749537377"></p><p><img src="http://39.104.171.29/image/1553749679807.png" alt="1553749679807"></p><p>-name 加通配符可实现模糊搜索文件</p><p>通配符 * 表示多个字符</p><p>通配符 ？表示单个字符</p><p><img src="http://39.104.171.29/image/1553752715110.png" alt="1553752715110"></p><p><img src="http://39.104.171.29/image/1553752887543.png" alt="1553752887543"></p><p><img src="http://39.104.171.29/image/1553752983831.png" alt="1553752983831"></p><h5 id="其他搜索命令"><a href="#其他搜索命令" class="headerlink" title="其他搜索命令"></a>其他搜索命令</h5><p><img src="http://39.104.171.29/image/1553755683871.png" alt="1553755683871"></p><p>此查询基于文件资料库所以，查询时对比find占用系统资源较少。</p><p>存在缺陷无法查询tmp目录下的文件</p><p>不能实时查询，如果刚创建的数据没有录入文件资料库时。会导致无法查询到文件。此时使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br></pre></td></tr></table></figure><p>然后再次使用    locate可查找到文件</p><p><img src="http://39.104.171.29/image/1553756124804.png" alt="1553756124804"></p><p><img src="http://39.104.171.29/image/1553756360865.png" alt="1553756360865"></p><p><img src="http://39.104.171.29/image/1553757094395.png" alt="1553757094395"></p><h4 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h4><p><img src="http://39.104.171.29/image/1553757468067.png" alt="1553757468067"></p><p>帮助命令类型 1表示命令，5表示配置文件</p><p>命令名称：whatis</p><p>NAME<br>       whatis - 在 whatis 数据库里查找完整的单词</p><p>总览 (SYNOPSIS)<br>       whatis keyword …</p><p>描述 (DESCRIPTION)<br>       whatis 命令在一些特定的包含系统命令的简短描述的数据库文件里查找关键字， 然后把 结果送到标准输出。 查找的内容必须完全匹配关键字的才会输出。 whatis 数据库文件是用 /usr/sbin/makewhatis 命令建立的。</p><p>参见 (SEE ALSO)<br>       apropos(1), man(1).</p><p>[中文版维护人]<br>       唐友 <a href="mailto:&#116;&#x6f;&#x6e;&#x79;&#95;&#116;&#121;&#64;&#x32;&#54;&#x33;&#x2e;&#x6e;&#x65;&#x74;" target="_blank" rel="noopener">&#116;&#x6f;&#x6e;&#x79;&#95;&#116;&#121;&#64;&#x32;&#54;&#x33;&#x2e;&#x6e;&#x65;&#x74;</a></p><p>[中文版最新更新]<br>       2001/9/8</p><p>[中国Linux论坛man手册页翻译计划]<br>       <a href="http://cmpp.linuxforum.net" target="_blank" rel="noopener">http://cmpp.linuxforum.net</a></p><p>命令名称：apropos</p><p>NAME<br>       apropos - 在 whatis 数据库中查找字符串</p><p>总览 (SYNOPSIS)<br>       apropos keyword …</p><p>描述 (DESCRIPTION)<br>       apropos 命令在一些特定的包含系统命令的简短描述的数据库文件里查找关键字， 然后把 结果送到标准输出。</p><p>参见 (SEE ALSO)<br>       whatis(1), man(1).</p><p>[中文版维护人]<br>       唐友 <a href="mailto:&#116;&#111;&#x6e;&#121;&#x5f;&#116;&#121;&#x40;&#x32;&#x36;&#x33;&#46;&#110;&#x65;&#x74;" target="_blank" rel="noopener">&#116;&#111;&#x6e;&#121;&#x5f;&#116;&#121;&#x40;&#x32;&#x36;&#x33;&#46;&#110;&#x65;&#x74;</a></p><p>[中文版最新更新]<br>       2001/9/20</p><p>[中国Linux论坛man手册页翻译计划]<br>       <a href="http://cmpp.linuxforum.net" target="_blank" rel="noopener">http://cmpp.linuxforum.net</a></p><p><img src="http://39.104.171.29/image/1553758782441.png" alt="1553758782441"></p><h4 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h4><p><img src="http://39.104.171.29/image/1553826507188.png" alt="1553826507188"></p><p><img src="http://39.104.171.29/image/1553826897084.png" alt="1553826897084"></p><p><img src="http://39.104.171.29/image/1553826911136.png" alt="1553826911136"></p><p><img src="http://39.104.171.29/image/1553827412666.png" alt="1553827412666"></p><p><img src="http://39.104.171.29/image/1553827301824.png" alt="1553827301824"></p><p><img src="http://39.104.171.29/image/1553828266112.png" alt="1553828266112"></p><h4 id="压缩和解压命令"><a href="#压缩和解压命令" class="headerlink" title="压缩和解压命令"></a>压缩和解压命令</h4><h5 id="压缩格式"><a href="#压缩格式" class="headerlink" title="压缩格式"></a>压缩格式</h5><p>gz  zip  rar    其中 zip 是windos和Linux 都支持的压缩格式</p><h5 id="压缩解压命令使用"><a href="#压缩解压命令使用" class="headerlink" title="压缩解压命令使用"></a>压缩解压命令使用</h5><p><img src="http://39.104.171.29/image/1553831418375.png" alt="1553831418375"></p><p><img src="http://39.104.171.29/image/1553831583899.png" alt="1553831583899"></p><p>gzip的缺陷就是目前只能压缩文件，并且压缩后是不保留源文件的。</p><p><img src="http://39.104.171.29/image/1553831796484.png" alt="1553831796484"></p><p>tar 格式表示打包</p><p><img src="http://39.104.171.29/image/1553832058168.png" alt="1553832058168"></p><p><img src="http://39.104.171.29/image/1553837000891.png" alt="1553837000891"></p><p><img src="http://39.104.171.29/image/1553837160959.png" alt="1553837160959"></p><p>unzip 解压文件时出现乱码如何解决，使用命令 unzip -O CP936 压缩包名称 即可。其中-O表示知道文件的编码集，<br>CP936是IBM code page 中的第936页也就是咋们俗称的GBK。</p><p><img src="http://39.104.171.29/image/1553837197214.png" alt="1553837197214"></p><p><img src="http://39.104.171.29/image/1553837357376.png" alt="1553837357376"></p><p><img src="http://39.104.171.29/image/1553837563419.png" alt="1553837563419"><br>rar 格式的文件解压或压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装rar shell脚本</span><br><span class="line"> sudo apt install rar</span><br><span class="line"></span><br><span class="line">rar x 文件名进行解压</span><br><span class="line">更多信息使用 man rar</span><br></pre></td></tr></table></figure></p><h4 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h4><p><img src="http://39.104.171.29/image/1553837724986.png" alt="1553837724986"></p><p><img src="http://39.104.171.29/image/1553837906794.png" alt="1553837906794"></p><p><img src="http://39.104.171.29/image/1553838044540.png" alt="1553838044540"></p><p><img src="http://39.104.171.29/image/1553838208557.png" alt="1553838208557"></p><p><img src="http://39.104.171.29/image/1553838404765.png" alt="1553838404765"></p><p>mail 命令操作时需要使用CTRL+D 才可生效，如执邮件的删除功能，需要除了使用delete命令后还需使用</p><p>CTRL+D才可。</p><p>mail 进入使用界面后， h表示查看列表，d表示删除指定的邮件</p><p><img src="http://39.104.171.29/image/1553838607987.png" alt="1553838607987"></p><p><img src="http://39.104.171.29/image/1553838817826.png" alt="1553838817826"></p><p><img src="http://39.104.171.29/image/1553838803865.png" alt="1553838803865"></p><p><img src="http://39.104.171.29/image/1553839077239.png" alt="1553839077239"></p><p><img src="http://39.104.171.29/image/1553841741827.png" alt="1553841741827"></p><p><img src="http://39.104.171.29/image/1553839651829.png" alt="1553839651829"></p><h4 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h4><p><img src="http://39.104.171.29/image/1553842448954.png" alt="1553842448954"></p><h4 id="开关机命令"><a href="#开关机命令" class="headerlink" title="开关机命令"></a>开关机命令</h4><p><img src="http://39.104.171.29/image/1554102568116.png" alt="1554102568116"></p><p><img src="http://39.104.171.29/image/1554102608485.png" alt="1554102608485"></p><p><img src="http://39.104.171.29/image/1554102624441.png" alt="1554102624441"></p><p><img src="http://39.104.171.29/image/1554102670799.png" alt="1554102670799"></p><p><img src="http://39.104.171.29/image/1554102699933.png" alt="1554102699933"></p><p><img src="http://39.104.171.29/image/1554102724817.png" alt="1554102724817"></p><p>修改系统默认运行级别代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 2</span><br></pre></td></tr></table></figure><p><img src="http://39.104.171.29/image/1554102791796.png" alt="1554102791796"> </p><p>查看系统存储信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/meminfo</span><br></pre></td></tr></table></figure></p><h4 id="工具版本切换"><a href="#工具版本切换" class="headerlink" title="工具版本切换"></a>工具版本切换</h4><p>java jdk版本切换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdk 版本切换：sudo update-alternatives --config java</span><br></pre></td></tr></table></figure></p><h4 id="查看系统进程"><a href="#查看系统进程" class="headerlink" title="查看系统进程"></a>查看系统进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux |grep java</span><br></pre></td></tr></table></figure><h4 id="nohup-和-amp"><a href="#nohup-和-amp" class="headerlink" title="nohup 和&amp;"></a>nohup 和&amp;</h4><h5 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h5><p>简介：nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。</p><p>nohup 是 no hang up 的缩写，就是不挂断的意思。</p><p>nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。</p><p>在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中。</p><p>关键词：0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nohup python MM3Spider.py &gt; python_info.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>上面的案例表示以不挂断的形式执行MM3Spider.py文件 并将标准异常流（standard error）输入到标准输出流中，并且将标准输出流的信息输入 python_info.log文件中</p><h5 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h5><p>简介：后台执行某段命令</p><h5 id="nohup-和-amp-的区别"><a href="#nohup-和-amp-的区别" class="headerlink" title="nohup 和 &amp;的区别"></a>nohup 和 &amp;的区别</h5><p>&amp;是指在后台运行，但当用户推出(挂起)的时候，命令自动也跟着退出，nohup ： 不挂断的运行，注意并没有后台运行的功能，，就是指，用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&amp;才是后台运行</p><p>通常我们组合使用如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nohup python MM3Spider.py &gt; python_info.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-文件配置篇</title>
      <link href="/MeBlog/2020/04/03/linux-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AF%87/"/>
      <url>/MeBlog/2020/04/03/linux-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><h2 id="etc-profile-文件"><a href="#etc-profile-文件" class="headerlink" title="/etc/profile 文件"></a>/etc/profile 文件</h2><p>/etc/profile 文件属于一个系统的全局变量<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;PS1-&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;BASH-&#125;</span>"</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$BASH</span>"</span> != <span class="string">"/bin/sh"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># The file bash.bashrc already sets the default PS1.</span></span><br><span class="line">    <span class="comment"># PS1='\h:\w\$ '</span></span><br><span class="line">    <span class="keyword">if</span> [ -f /etc/bash.bashrc ]; <span class="keyword">then</span></span><br><span class="line">      . /etc/bash.bashrc</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"`id -u`"</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">      PS1=<span class="string">'# '</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      PS1=<span class="string">'$ '</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d /etc/profile.d ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> /etc/profile.d/*.sh; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -r <span class="variable">$i</span> ]; <span class="keyword">then</span></span><br><span class="line">      . <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">unset</span> i</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><ol><li><p>Linux是一个多用户操作系统。用户登录或切换（即Login shell 启动）时都有一个专用的运行环境，但首先执行 /etc/profile 。而Non-login shell不会调用这个脚本。各用户的默认环境（一组环境变量的定义）一般相同。用户也可以自行配置运行环境，即修改相应的系统环境变量。</p></li><li><p>在 /etc/profile 文件中设置的变量是全局变量。而 .bashrc文件（在用户的家目录下）则只对当前用户有用</p></li><li><p>使用 source 命令更新环境变量。source /etc/profile  或者  ./profile，执行一下文件。但不能用 sh /etc/profile。sh 是在子 shell 进程中执行的，即使PATH改变了也不会反应到当前环境中。而 source 是在当前 shell 进程中执行的，所以我们能看到PATH的改变</p></li></ol><p>4.在profile文件添加或修改的内容需要注销系统才能生效。同名的环境变量，后写入的起作用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PC计算机常识</title>
      <link href="/MeBlog/2020/03/18/pc%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%9A%84%E5%B8%B8%E8%AF%86/"/>
      <url>/MeBlog/2020/03/18/pc%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%9A%84%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机是如何记录时间的"><a href="#计算机是如何记录时间的" class="headerlink" title="计算机是如何记录时间的"></a>计算机是如何记录时间的</h2><p>名词：RTC</p><p>RTC （real time clock）实时时钟</p><p>计算机断电期间，RTC芯片由锂电池供电；</p><p>RTC在内部或外部晶体振荡器驱动下以固定节拍增加内部计数器的值；</p><p>计算机开机后，CPU通过scl/sda串行线读取RTC的计数值；</p><p>RTC计数值表从格林尼治时间1970年1月1日零时起；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring4 读后笔记</title>
      <link href="/MeBlog/2020/02/03/spring4/"/>
      <url>/MeBlog/2020/02/03/spring4/</url>
      
        <content type="html"><![CDATA[<h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>spring 的作者叫做 Rob johnson</p><h2 id="最初创建的目标"><a href="#最初创建的目标" class="headerlink" title="最初创建的目标"></a>最初创建的目标</h2><p>spring 创建的初期主要是为了解决企业级应用开发的复杂性</p><h2 id="spring-的根本使命"><a href="#spring-的根本使命" class="headerlink" title="spring 的根本使命"></a>spring 的根本使命</h2><p>简化JAVA开发</p><h2 id="支撑spring-使命实现的4个关键策略"><a href="#支撑spring-使命实现的4个关键策略" class="headerlink" title="支撑spring 使命实现的4个关键策略"></a>支撑spring 使命实现的4个关键策略</h2><p>基于pojo的轻量级和最小侵入性编程<br>通过依赖注入和面相接口实现松耦合<br>基于切面和惯例进行声明式编程<br>通过切面和模板减少样板式代码</p><h3 id="pojo示例代码"><a href="#pojo示例代码" class="headerlink" title="pojo示例代码"></a>pojo示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordBean</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello word!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造器模式"><a href="#构造器模式" class="headerlink" title="构造器模式"></a>构造器模式</h3><p>将一个事物运行的流程确定，用一个类表示，如上面的braveKnight类<br>将事物中多变的部分抽取出来，如执行的任务quest</p><h3 id="这样做的好处"><a href="#这样做的好处" class="headerlink" title="这样做的好处"></a>这样做的好处</h3><p>代码将松耦合<br>这样一来我们不用发愁骑士每次执行一个新的任务就需要重新创建一个骑士，而只需要新建一个需要执行的任务类并且实现quest接口即可</p><h3 id="DI-dependency-injection"><a href="#DI-dependency-injection" class="headerlink" title="DI(dependency injection)"></a>DI(dependency injection)</h3><h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><p>github 上查看 <a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome4" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome4</a></p><h4 id="Java注解声明式装配"><a href="#Java注解声明式装配" class="headerlink" title="Java注解声明式装配"></a>Java注解声明式装配</h4><p>github 上查看 <a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome5" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome5</a></p><h4 id="xml装配bean"><a href="#xml装配bean" class="headerlink" title="xml装配bean"></a>xml装配bean</h4><pre><code>C命名空间中的标签无法装配集合。</code></pre><p>代码：github 上查看 <a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome6" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome6</a></p><h4 id="导入和混合装配"><a href="#导入和混合装配" class="headerlink" title="导入和混合装配"></a>导入和混合装配</h4><p>代码：github 上查看 <a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome7" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome7</a></p><h5 id="注解混合xml或注解"><a href="#注解混合xml或注解" class="headerlink" title="注解混合xml或注解"></a>注解混合xml或注解</h5><p>@import 将别的配置引入当前配置中<br>@importResource 将xml配置引入当前配置中</p><h5 id="xml混合注解或xml"><a href="#xml混合注解或xml" class="headerlink" title="xml混合注解或xml"></a>xml混合注解或xml</h5><p><import> 标签可将别的xml配置导入当前配置中</import></p><p><bean> 标签可以将JavaConfig配置以bean的方式导入</bean></p><h4 id="profile条件化装配配置"><a href="#profile条件化装配配置" class="headerlink" title="profile条件化装配配置"></a>profile条件化装配配置</h4><p>使用profile 可以实现程序在不同配置下切换并运行</p><h5 id="基于注解下的使用"><a href="#基于注解下的使用" class="headerlink" title="基于注解下的使用"></a>基于注解下的使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"MagicExists"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">##### 基于xml下的使用</span><br><span class="line">```xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> ?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:c=<span class="string">"http://www.springframework.org/schema/c"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span> profile=<span class="string">"MagicExists"</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="激活并使用条件配置下的配置"><a href="#激活并使用条件配置下的配置" class="headerlink" title="激活并使用条件配置下的配置"></a>激活并使用条件配置下的配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = MagicExistsConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome8Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ActiveProfiles</span>(<span class="string">"MagicExists"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> MagicBean magicBean;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Assert.assertNotNull(magicBean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于条件化配置装配dome可到如下网址查看 <a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome8" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome8</a></p><h4 id="条件化bean"><a href="#条件化bean" class="headerlink" title="条件化bean"></a>条件化bean</h4><h5 id="基于注解实现（-conditional）"><a href="#基于注解实现（-conditional）" class="headerlink" title="基于注解实现（@conditional）"></a>基于注解实现（@conditional）</h5><p>1.在bean声明上加入@condition注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional</span>(MagicExistsCondition.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MagicBean <span class="title">magicBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.编写MagicExistsCondition条件判定类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> MagicExistsCondition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span> 判断Magic存在</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/1/8 上午10:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment env = conditionContext.getEnvironment();</span><br><span class="line">        <span class="keyword">return</span> env.containsProperty(<span class="string">"magic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.测试<br>@conditional注解会根据条件判定类中的matches方法返回的结果来装配当前被声明的bean<br>代码 <a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome8" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome8</a></p><h4 id="处理自动装配歧义"><a href="#处理自动装配歧义" class="headerlink" title="处理自动装配歧义"></a>处理自动装配歧义</h4><h5 id="Primary"><a href="#Primary" class="headerlink" title="Primary"></a>Primary</h5><p>指定每次都首选的bean（个人不太推荐，因为它不够灵活）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span> <span class="comment">//指定首选bean解决方案</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cake</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Qualifier"><a href="#Qualifier" class="headerlink" title="Qualifier"></a>Qualifier</h5><p>使用限定符指定要装配的bean</p><h6 id="根据bean的ID装配"><a href="#根据bean的ID装配" class="headerlink" title="根据bean的ID装配"></a>根据bean的ID装配</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cake"</span>)<span class="comment">//限定符解决方案</span></span><br><span class="line"><span class="keyword">private</span> Dessert dessert;</span><br></pre></td></tr></table></figure><h6 id="根据自定义限定符注解装配"><a href="#根据自定义限定符注解装配" class="headerlink" title="根据自定义限定符注解装配"></a>根据自定义限定符注解装配</h6><p>1.创建自定义限定符注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Cold</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/1/14 下午1:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Cold &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.在bean的声明处使用注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Cold</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.自动注入处使用注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Cold</span> <span class="comment">//自定义限定符注解</span></span><br><span class="line"><span class="keyword">private</span> Dessert dessert;</span><br></pre></td></tr></table></figure></p><p>代码：github 上查看 <a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome9" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome9</a></p><h3 id="spring-是通过什么装载这些配置后的类的"><a href="#spring-是通过什么装载这些配置后的类的" class="headerlink" title="spring 是通过什么装载这些配置后的类的"></a>spring 是通过什么装载这些配置后的类的</h3><p>spring通过应用上下文来实现应用装载配置<br>spring提供了多种上下文的实现，也就是说spring可以通过多种不同的方式来实现应用类的装载和配置</p><h3 id="关于dependency-injection-的更过信息可以查看《dependency-injection》"><a href="#关于dependency-injection-的更过信息可以查看《dependency-injection》" class="headerlink" title="关于dependency injection 的更过信息可以查看《dependency injection》"></a>关于dependency injection 的更过信息可以查看《dependency injection》</h3><p>总结 关于依赖注入和面相接口编程，本事阐述的核心思想是基于 装饰器模式+spring的多样化配置方式+spring 装载配置的核心接口（application context）</p><h3 id="AOP面向切面"><a href="#AOP面向切面" class="headerlink" title="AOP面向切面"></a>AOP面向切面</h3><h4 id="spring实现AOP的的方式"><a href="#spring实现AOP的的方式" class="headerlink" title="spring实现AOP的的方式"></a>spring实现AOP的的方式</h4><p>1.spring 本身提供的aop方案是基于代理实现，这种方案只能做到方法级别的把控无法对类的创建构造函数等操作<br>2.可以引入aspectJ方案替代，但是学习成本比较高。此方案可以做到细粒度的把控</p><h4 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h4><p>主要操控的内容有<br>1.5种通知（前置通知，后置通知，返回通知，异常通知，环绕通知）<br>其中环绕通知可以通过ProceedingJoinPoint 参数类实现前后返异四中通知。<br>2.带参通知<br>3.为接口添加新的接口<br>代码案例 ：<a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome12" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome12</a><br><a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome13" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome13</a><br><a href="https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome14" target="_blank" rel="noopener">https://github.com/slothjun/Spring4BookProject/tree/master/src/main/java/dome14</a></p><h4 id="xml实现"><a href="#xml实现" class="headerlink" title="xml实现"></a>xml实现</h4><p>基于XML配置</p><h3 id="sping-容器（基于IOC思想）"><a href="#sping-容器（基于IOC思想）" class="headerlink" title="sping 容器（基于IOC思想）"></a>sping 容器（基于IOC思想）</h3><p>spring 容器负责创建，装配，配置bean。并管理bean的整个生命周期</p><h4 id="spring-自带的容器实现"><a href="#spring-自带的容器实现" class="headerlink" title="spring 自带的容器实现"></a>spring 自带的容器实现</h4><p>总体可归纳为2种类型</p><h5 id="bean工厂（由org-springframework-beans-factory-BeanFactory定义）"><a href="#bean工厂（由org-springframework-beans-factory-BeanFactory定义）" class="headerlink" title="bean工厂（由org.springframework.beans.factory.BeanFactory定义）"></a>bean工厂（由org.springframework.beans.factory.BeanFactory定义）</h5><p>提供基本的DI支持</p><h5 id="应用上下文（由org-springframework-context-ApplicationContext定义）"><a href="#应用上下文（由org-springframework-context-ApplicationContext定义）" class="headerlink" title="应用上下文（由org.springframework.context.ApplicationContext定义）"></a>应用上下文（由org.springframework.context.ApplicationContext定义）</h5><p>基于BeanFactory构建，提供应用框架级别的服务<br>AnnotationConfigApplicationContext 从一个或多个基于java配置类中加载spring应用上下文<br>AnnotationConfigWebApplicationContext 从一个或多个基于java的配置类中加载SpringWeb应用上下文<br>ClassPathXmlApplicationContext 从类路径下的一个或多个xml配置文件中加载spring应用上下文<br>FileSystemXmlapplicationContext 从文件系统中的一个或多个xml配置文件中加载spring应用上下文<br>XmlWebApplicationContext 从Web应用下的一个或多个xml配置文件中加载应用上下文</p><h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><p><img src="http://39.104.171.29/image/springBeanLife.jpg" alt></p><h4 id="bean-的作用域"><a href="#bean-的作用域" class="headerlink" title="bean 的作用域"></a>bean 的作用域</h4><p>spring默认bean的作用域是单例的。</p><h5 id="scope的4大作用域"><a href="#scope的4大作用域" class="headerlink" title="scope的4大作用域"></a>scope的4大作用域</h5><p>Singleton 单例：在整个应用中只创建一次bean<br>Prototype 原型：每次注入或根据spring上下文获取时，都会创建新的bean实例<br>Session 会话：在web应用中为每次会话创建一个bean的实例<br>Request 请求：在web应用中为每次请求创建一个bean的实例</p><p>使用Scope注解指定作用域</p><h6 id="传统项目"><a href="#传统项目" class="headerlink" title="传统项目"></a>传统项目</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeCart</span> <span class="keyword">implements</span> <span class="title">ShoppingCart</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"prototypeCart"</span> <span class="attr">class</span>=<span class="string">"dome10.PrototypeCart"</span> <span class="attr">scope</span>=<span class="string">"Prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="web项目"><a href="#web项目" class="headerlink" title="web项目"></a>web项目</h6><p>在为web项目指定bean的作用域时需要注意bean构建时依赖传递的问题<br>问题举例：<br>    如有一个购物车bean需的作用域需要被指定为Session级别。当spring的上下文创建时发现购物车bean是的作用域是购物车级别的所以不能被创建。<br>    如何解决此问题，答案是通过代理的手段解决</p><p>对于bean是以接口的方式注入 (基于java代理)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE,proxyMode = ScopedProxyMode.INTERFACES)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeCart</span> <span class="keyword">implements</span> <span class="title">ShoppingCart</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"prototypeCart"</span> <span class="attr">class</span>=<span class="string">"dome10.PrototypeCart"</span> <span class="attr">scope</span>=<span class="string">"Session"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于bean是以类的方式注入（基于CGLib代理）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE,proxyMode = ScopedProxyMode.TARGET_CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeCart</span> <span class="keyword">implements</span> <span class="title">ShoppingCart</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"prototypeCart"</span> <span class="attr">class</span>=<span class="string">"dome10.PrototypeCart"</span> <span class="attr">scope</span>=<span class="string">"Session"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springMVC"><a href="#springMVC" class="headerlink" title="springMVC"></a>springMVC</h2><p>​    运行流程图</p><p><img src="http://39.104.171.29/image/springMvc-generater.png" alt></p><p>dispatcher Servlet 前端控制器（front Controller）核心</p><p>快速尝鲜：</p><h4 id="基于spring-搭建spring-mvc"><a href="#基于spring-搭建spring-mvc" class="headerlink" title="基于spring 搭建spring mvc"></a>基于spring 搭建spring mvc</h4><p>1.将DispatcherServlet 注册到web容器中</p><pre><code>在 Servlet 3. 0 环境 中， 容器 会在 类 路径 中 查找 实现 javax. servlet. ServletContainerInitializer 接口 的 类， 如果 能 发现 的 话， 就会 用 它来 配置 Servlet 容器。</code></pre><p>​    Spring 提供 了 这个 接口 的 实现， 名为 SpringServletContainerInitializer。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@HandlesTypes(&#123;WebApplicationInitializer.class&#125;)</span><br><span class="line">public class SpringServletContainerInitializer implements ServletContainerInitializer</span><br></pre></td></tr></table></figure><p>​    其中的HandlesTypes 是什么？</p><p>1.Tomcat的主机容器在添加子容器时，会通过解析.xml并通过类加载器加载@HandlesTypes注解的类</p><p>2.读取@HandlesTypes注解值值。并放入ServletContainerInitializers对应的Set集合中</p><p>3.在ApplicationContext内部启动时会通知ServletContainerInitializers的onStart方法（）。这个onStart方法的第一个参数就是@HandlesTypes注解的值值指定的类集合</p><p>4.在Spring应用中，对ServletContainerInitializers的实现就是SpringServletContainerInitializer，注解指定的类就是WebApplicationInitializer。</p><p>通过上面解读过程我们知道，如果要想使用基于servlet3.0支持注解申明servlet。使用spring框架时的关注点就在WebApplicationInitializer接口中。</p><p>如果个人有能力或者有兴趣的化可以自己通过实现WebApplicationInitializer接口来注册servlet。但是一般我们只需要使用spring进行过一些封装的AbstractAnnotationConfigDispatcherServletInitializer抽象类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt;[] configClasses = <span class="keyword">this</span>.getRootConfigClasses();</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">            AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">            context.register(configClasses);</span><br><span class="line">            <span class="keyword">return</span> context;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createServletApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">        Class&lt;?&gt;[] configClasses = <span class="keyword">this</span>.getServletConfigClasses();</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">            context.register(configClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getRootConfigClasses();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getServletConfigClasses();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 AbstractAnnotationConfigDispatcherServletInitializer注册容器并初始化上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.healthengine.medpro.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfigAchieve</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//用来配置ContextLoaderListener 的上下文</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用来配置springMvc 中Dispatcher Servlet 上下文</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置容器请求的映射路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置Filter"><a href="#配置Filter" class="headerlink" title="配置Filter"></a>配置Filter</h4><h5 id="方式1：基于Disparther-Servlet-配置"><a href="#方式1：基于Disparther-Servlet-配置" class="headerlink" title="方式1：基于Disparther Servlet 配置"></a>方式1：基于Disparther Servlet 配置</h5><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.healthengine.medpro.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.MultipartConfigElement;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfigAchieve</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来配置ContextLoaderListener 的上下文</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来配置springMvc 中Dispatcher Servlet 上下文</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置容器请求的映射路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置filter</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">//自己定义的filter 类（数组）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方式2：自行实现"><a href="#方式2：自行实现" class="headerlink" title="方式2：自行实现"></a>方式2：自行实现</h5><h4 id="处理Multipart格式的内容信息"><a href="#处理Multipart格式的内容信息" class="headerlink" title="处理Multipart格式的内容信息"></a>处理Multipart格式的内容信息</h4><p>​    1.配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.healthengine.medpro.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.MultipartConfigElement;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfigAchieve</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来配置ContextLoaderListener 的上下文</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来配置springMvc 中Dispatcher Servlet 上下文</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置容器请求的映射路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义注册</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Multipart 配置设置</span></span><br><span class="line">        registration.setMultipartConfig(<span class="keyword">new</span> MultipartConfigElement(<span class="string">"temp/medpro/"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置MultipartResolver Bean</p><p>MultipartResolver 是springframework.web提供用于处理Multipart的接口规范</p><p>​    1.CommonsMultipartResolver： 使用 Jakarta Commons FileUpload 解析 multipart 请求；               </p><p>​    2.StandardServletMultipartResolver： 依赖于 Servlet 3. 0 对 multipart 请求 的 支持（ 始于 Spring 3. 1）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StandardServletMultipartResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multipartHandle</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String originalFilename = multipartFile.getOriginalFilename();</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = multipartFile.getBytes();</span><br><span class="line">    String contentType = multipartFile.getContentType();</span><br><span class="line">    InputStream inputStream = multipartFile.getInputStream();</span><br><span class="line">    String name = multipartFile.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JNDI-转载</title>
      <link href="/MeBlog/2020/01/07/JNDI-%E8%BD%AC%E8%BD%BD/"/>
      <url>/MeBlog/2020/01/07/JNDI-%E8%BD%AC%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>JNDI是 Java 命名与目录接口（Java Naming and Directory Interface），在J2EE规范中是重要的规范之一，不少专家认为，没有透彻理解JNDI的意义和作用，就没有真正掌握J2EE特别是EJB的知识。<br>那么，JNDI到底起什么作用？</p><p>要了解JNDI的作用，我们可以从“如果不用JNDI我们怎样做？用了JNDI后我们又将怎样做？”这个问题来探讨。</p><p>没有JNDI的做法：<br>程序员开发时，知道要开发访问MySQL数据库的应用，于是将一个对 MySQL JDBC 驱动程序类的引用进行了编码，并通过使用适当的 JDBC URL 连接到数据库。<br>就像以下代码这样：</p><p>Java code<br>Connection conn=null;<br>try {<br>    Class.forName(“com.mysql.jdbc.Driver”, true, Thread.currentThread().getContextClassLoader());<br>    conn=DriverManager.getConnection(“jdbc:mysql://MyDBServer?user=xxx&amp;password=xxx”);<br>    ……<br>    conn.close();<br>} catch(Exception e) {<br>    e.printStackTrace();<br>} finally {<br>    if(conn!=null) {<br>        try {<br>            conn.close();<br>        } catch(SQLException e) {}<br>    }<br>}</p><p>这是传统的做法，也是以前非Java程序员（如Delphi、VB等）常见的做法。这种做法一般在小规模的开发过程中不会产生问题，只要程序员熟悉Java语言、了解JDBC技术和MySQL，可以很快开发出相应的应用程序。</p><p>没有JNDI的做法存在的问题：<br>1、数据库服务器名称MyDBServer 、用户名和口令都可能需要改变，由此引发JDBC URL需要修改；<br>2、数据库可能改用别的产品，如改用DB2或者Oracle，引发JDBC驱动程序包和类名需要修改；<br>3、随着实际使用终端的增加，原配置的连接池参数可能需要调整；<br>4、……</p><p>解决办法：<br>程序员应该不需要关心“具体的数据库后台是什么？JDBC驱动程序是什么？JDBC URL格式是什么？访问数据库的用户名和口令是什么？”等等这些问题，程序员编写的程序应该没有对 JDBC 驱动程序的引用，没有服务器名称，没有用户名称或口令 —— 甚至没有数据库池或连接管理。而是把这些问题交给J2EE容器来配置和管理，程序员只需要对这些配置和管理进行引用即可。</p><p>由此，就有了JNDI。</p><p>用了JNDI之后的做法：<br>首先，在在J2EE容器中配置JNDI参数，定义一个数据源，也就是JDBC引用参数，给这个数据源设置一个名称；然后，在程序中，通过数据源名称引用数据源从而访问后台数据库。<br>具体操作如下（以JBoss为例）：<br>1、配置数据源<br>在JBoss 的 D:/jboss420GA/docs/examples/jca 文件夹下面，有很多不同数据库引用的数据源定义模板。将其中的 mysql-ds.xml 文件Copy到你使用的服务器下，如 D:/jboss420GA/server/default/deploy。<br>修改 mysql-ds.xml 文件的内容，使之能通过JDBC正确访问你的MySQL数据库，如下：</p><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><datasources><br><local-tx-datasource><br>  <jndi-name>MySqlDS</jndi-name><br>  <connection-url>jdbc:mysql://localhost:3306/lw</connection-url><br>  <driver-class>com.mysql.jdbc.Driver</driver-class><br>  <user-name>root</user-name><br>  <password>rootpassword</password><br><exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter</exception-sorter-class-name><br>  <metadata><br>  <type-mapping>mySQL</type-mapping><br>  </metadata><br></local-tx-datasource><br></datasources><p>这里，定义了一个名为MySqlDS的数据源，其参数包括JDBC的URL，驱动类名，用户名及密码等。</p><p>2、在程序中引用数据源：<br>Java code<br>Connection conn=null;<br>try {<br>    Context ctx = new InitialContext();<br>    Object datasourceRef = ctx.lookup(“java:MySqlDS”);<br>    //引用数据源<br>    DataSource ds = (Datasource) datasourceRef;<br>    conn = ds.getConnection();<br>    ……<br>    c.close();<br>} catch(Exception e) {<br>    e.printStackTrace();<br>} finally {<br>    if(conn!=null) {<br>        try {<br>            conn.close();<br>        } catch(SQLException e) {}<br>    }<br>}</p><p>直接使用JDBC或者通过JNDI引用数据源的编程代码量相差无几，但是现在的程序可以不用关心具体JDBC参数了。<br>在系统部署后，如果数据库的相关参数变更，只需要重新配置 mysql-ds.xml 修改其中的JDBC参数，只要保证数据源的名称不变，那么程序源代码就无需修改。</p><p>由此可见，JNDI避免了程序与数据库之间的紧耦合，使应用更加易于配置、易于部署。</p><p>总结：<br>J2EE 规范要求所有 J2EE 容器都要提供 JNDI 规范的实现。JNDI 在 J2EE 中的角色就是“交换机” —— J2EE 组件在运行时间接地查找其他组件、资源或服务的通用机制。在多数情况下，提供 JNDI 供应者的容器可以充当有限的数据存储，这样管理员就可以设置应用程序的执行属性，并让其他应用程序引用这些属性（Java 管理扩展（Java Management Extensions，JMX）也可以用作这个目的）。JNDI 在 J2EE 应用程序中的主要角色就是提供间接层，这样组件就可以发现所需要的资源，而不用了解这些间接性。</p><p>在 J2EE 中，JNDI 是把 J2EE 应用程序合在一起的粘合剂，JNDI 提供的间接寻址允许跨企业交付可伸缩的、功能强大且很灵活的应用程序。这是 J2EE 的承诺，而且经过一些计划和预先考虑，这个承诺是完全可以实现的。</p><p>说白了就是把资源取个名字，再根据名字来找资源。</p><p>//===============================================================================================================<br>首先我们来回顾一下简单的问题，列在下面第一点。<br>1.我们知道，Java 的运行从 static main 开始，为什么一定要从 static 方法开始呢？<br>2.在我们知道这个世界上的另外一个地方有一个对象存在而且服务器也会在我们开始工作前为我们准备好，那么我该怎么找到它呢？如果这个对象是我这个类创建的，那么当然简单，直接用对象的引用就能调用它的方法，那如果这个对象不是我创建的，我想主动调用它的方法这似乎在任何编程语言中都不可能，记得写一个方法那是被别人调用的不是主动调用别人。</p><p>就像你找人一样，如果他还没有和你建立联系的话(建立联系就是保存一份对象的引用，如果两个对象彼此没有创建另外一个而且也没有被中间的第三方建立这种关系问题就出现了)，请问你如何和他打交道？<br>现实中是：<br>a. 我们拨通 114<br>  Java 中：Context ctx = new InitialContext();<br>b. 请问哪里有通马桶的？114 答，xxx… 为您转接中，请稍候。<br>  Java 中：DataSource ds = (DataSource) ctx.lookup(“便民服务公司”);<br>c. 过了一会儿，人来了，你说：师付，请帮我通马桶吧。<br>  Java 中: ds.getConnection();</p><p>上面的话，我没有回答你什么是 JNDI, 但是我回答了为什么我们需要 JNDI. 希望你在概念上了解了它存在的必要性。</p><p>下面的话，给你一点指导如何更好的理解 JNDI 实现：<br>1.一个对象如果它在另外一个地方(可能与当前运行的程序不在同一个 VM / 同一进程中), 对象怎么可能从一个 VM 中发送到另外一个 VM 中呢？像 LDAP 这种，对象的状态还需要持久地保存的话(重启服务器进程后它还在)，又该怎么办呢？请看 JNDI StateFactory, 它用一种方法把一个对象转换成某种方式保存下来，就像我们把一个 Entity 对象保存下来时，我们会用 SQL 来做一样。</p><p>2.有一个对象上次已经保存了状态，现在服务器重启了，上次的对象肯定不在内存里面，我们怎么恢复上次的状态呢？<br>请看 JNDI ObjectFactory. 它读取一些上次保存的状态信息，来创建并初始化一个对象。比如：我们配置了一个 XML，它是某个 JDBC 数据源的配置数据，Application Server 启动时读取这个信息(相当于上次的状态),然后重启对象。</p><p>3.企业应用这么复杂，面向接口编程，那如何用一种简单的方式来配置新的实现类呢？Java 的做法是：<br>已经定义了 SPI (Service Provider Interface). 包括以下几点：<br>  接口准备好了，如：StateFactory / ObjectFactory.<br>  配置：先搜索 JRE 下面的某个 jndiprovider.properties 文件当作默认实现，再查找用户 classpath 根路径下 /jndi.properties. 另外还有 System.getProperties() 和在创建 InitialContext 给一个 hashtable 作为参数，这三个参数, 有优先级的关系，越是后面具体的参数优先级越高，越前面越通用型的参数优先级越低。这一点，请看 JDK ResourceManager 这个类的源码。<br>  实现类与初始化它们是如何自动完成的呢？这个你需要看 Context 接口里面的常量，以及拿 Sun LDAP InitialContextFactory 运行样例来看 Context 接口的常量一个样本参数值，一般我们很重要的是 InitialContextFactory 这个参数，但也有时候也有其他参数要配置，比如：pkgs, 它是说，我们给一个包名，JNDI 管理器要查找实现时用这个包名列表当成包名，类名就是 协议名 + 固定的后缀：比如： ldap://localhost:389, 它会用一个’包名前缀.协议名.协议名 + URLContextFactory’ 作为类名来搜索一个类，如果它存在就把它当成实现类，如果没找到再尝试另外一个包名前缀。你可以看 com.sun.jndi.url 名，下面有例子看，比如说 ldap:// 的情况就是 找一个类 com.sun.jndi.url.ldap.ldapURLContextFactory，如果是 dns://<a href="http://www.163.com/xxx" target="_blank" rel="noopener">www.163.com/xxx</a> 就找个 com.sun.jndi.url.dns.dnsURLContextFactory。这是 URL context factory 也就是当你使用 ctx.lookup(“java:xxxx/yyy”) 这种带协议前缀的时候。</p><p>另外你也可以类比地看 com.sun.<a href="http://www.protocol" target="_blank" rel="noopener">www.protocol</a> 包里面的类，它是另外不一个与 JNDI 不相关的 URLStreamHandler 处理的规则，与些设计和配置几乎完全相同。我以前写过一个 jdbc:oracle:username/password:@localhost:1521:training/[select A from C where DEL_IND = 0] , 在 java 程序中输入这个 URL 我们可以把数据库里面的数据读取出来，效果就根你输入 file:/C:/boot.ini 读取了这个文件内容一样，办法就是我写了一个支持 jdbc 协议的 URLStreamHandler 在命令行配置一个使用它，其他的应用程序类就能自动处理，它们都不知道我是从数据库里面读取的数据。</p><ol start="4"><li>J2EE 1.3 开始，资源的管理由应用服务器单独来管理和配置，这与 J2EE 1.2 不同，在 J2EE 1.2 中我们直接在应用程序中配置我们要用的资源。J2EE 1.3 中我们配置一个数据源在服务器上，我们在应用程序中只需要说明我们配置的资源的引用就行了，比如我们只在 web.xml 或 ejb-jar.xml 配置 <resource-ref> 而不是 data source 本身。这有什么好处？比如：我们定义了两个 training 的数据源：jdbc/training/db2. jdbc/oracle/db2. 一个是开发环境，一个是 UAT 环境，现在开发时我们建立一个 <resource-ref> 指向jdbc/training/db2，那么就用 db2 数据库，UAT 测试时我们建立另外一个 <resource-ref> 指向 jdbc/training/oracle, 就会使用 oracle 数据库，而这本身不需要修改代码，只是修改了 web.xml / ejb-jar.xml ,而且现在连接到数据的用户名和密码不再是应用程序开发本身的事情，因为你不需要配置资源也就不需要知道它的登录名和密码，而是由管理员在服务器上配置数据源，这里注意，开发人员做他代码部分的事情，服务器管理员负责配置资源源，J2EE component provider 和 Deployer 两个角色的职责分开了，虽然现实中 deployer 都是委托给了开发人员，但 J2EE 规范是分开来描述的。</resource-ref></resource-ref></resource-ref></li></ol><p>5.上面说了半天，目的是什么呢？这是我的痛苦经历，第一次写 EJB, 买了本书，J2EE 从入门到精通(就是那本传说中的黃皮宝典系列)，写了一个无状态 session bean 来访问数据源，死活找不到数据源：NamingException: xxx not found. 在 IBM developerworks 上看到一篇文章，茅塞顿开，原来那本书讲的是J2EE 1.2, 我用的 WSAD 5.1.2 开发用的默认配置都是 J2EE 1.3。这里面引出了 JNDI LinkRef, 为了实现上面 4 里面所说的服务器上配置一个资源，但应用程序里面配置一个引用的话，现在的应用服务器在处理这点JNDI技术实现上基本上都是用 LinkRef 来实现的，这是 JNDI 里面的一个类。服务器启动时会创建一个 jdbc/training/db2 和 jdbc/training/oracle 两个 DataSource 对象 (用的是 ObjectFactory), 当一个应用程序访问了准备访问数据源时，服务器检测到了 web.xml/ejb-jar.xml 中指定了 <resource-ref> 它就会创建一个 LinkRef 放到 context 中去，它的名称是：jdbc/training,但它的 ref 是 jdbc/training/db2.<br>这样我们 ctx.lookup(“java:jdbc/training”) 时，java 协议对应的 javaURLContextFactory 会把这个 jdbc/training 对象找出来，在检测到它是一个 LinkRef 对象时，会自动再用它的 ref 值(这里是 jdbc/training/db2) 再 lookup 一遍，这下终于找到 jdbc/training/db2 这个 data source 对象。</resource-ref></p><p>6.JNDI 里面还有其他的相关的东西。再结合一个 Reference 概念看，LinkRef 是继承它的。想再具体的了解一个实现细节，请拿一份 apache commons-xxx.jar (名字我忘记了，不过用过 spring / hibernate 来创建数据源的人可能知道它们用 xxxDataSource 做一个不需要在服务器上配置，但却能使用 data source 的办法)，我不是推荐你这个 jar, 我是推荐你看这个xxxDataSource 源码，里面演示了一个 ObjectFactory 用法。这和 JMS ConnectionFactory等其他 J2EE 托管资源的配置和使用都是用的同样的技术实现的。举一反三。<br>想了解更，就再看一个 StateFactory 的实现以及 Reference 的源码之类的。作为期望迈入 J2EE 中级编程的你，至少在概念和理论上要知道 ObjectFactory / LinkRef / SPI / resource ref 配置这几点，如果你再知道 StateFactory 是怎么实现的就更好了。</p><p>转载自<a href="https://blog.csdn.net/wn084/article/details/80729230" target="_blank" rel="noopener">https://blog.csdn.net/wn084/article/details/80729230</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/MeBlog/2019/11/30/%E4%B8%AD%E5%9B%BD%E8%BF%91%E7%8E%B0%E4%BB%A3%E5%8F%B2-note/"/>
      <url>/MeBlog/2019/11/30/%E4%B8%AD%E5%9B%BD%E8%BF%91%E7%8E%B0%E4%BB%A3%E5%8F%B2-note/</url>
      
        <content type="html"><![CDATA[<p>中国近现代史</p><h2 id="1840-1919年（鸦片战争到五四运动前夜）风云变换的八十年"><a href="#1840-1919年（鸦片战争到五四运动前夜）风云变换的八十年" class="headerlink" title="1840-1919年（鸦片战争到五四运动前夜）风云变换的八十年"></a>1840-1919年（鸦片战争到五四运动前夜）风云变换的八十年</h2><h3 id="鸦片战争前的中国"><a href="#鸦片战争前的中国" class="headerlink" title="鸦片战争前的中国"></a>鸦片战争前的中国</h3><p>1.中国位于亚洲的东部<br>2.中国拥有五千年的文化历史，经历的朝代如下<br>    五千年前的黄河长江流域的文明<br>    四千年前的 炎黄尧舜禹时期<br>    公元前21世纪王朝国家 夏、商、周<br>    公元前221年后的封建制国家 秦、汉、三国、晋、南北朝、隋、唐、五代、宋辽西夏金、元、明、清</p><h4 id="中国历史的主流是什么？"><a href="#中国历史的主流是什么？" class="headerlink" title="中国历史的主流是什么？"></a>中国历史的主流是什么？</h4><p>1.国家统一</p><p>2.各民族间文化和经济的关联和交流</p><h3 id="外国资本主义的入侵与近代中国社会半殖民地半封建性质"><a href="#外国资本主义的入侵与近代中国社会半殖民地半封建性质" class="headerlink" title="外国资本主义的入侵与近代中国社会半殖民地半封建性质"></a>外国资本主义的入侵与近代中国社会半殖民地半封建性质</h3><h4 id="中国近代史的起点（鸦片战争）"><a href="#中国近代史的起点（鸦片战争）" class="headerlink" title="中国近代史的起点（鸦片战争）"></a>中国近代史的起点（鸦片战争）</h4><p>为什么说中国近代史的起点是鸦片战争？</p><p>因为鸦片战争后清政府与西方列前签订了一系列卖国条约如下</p><pre><code>中英: 1842年《南京条约》1843年《虎门条约》中法: 1844年签订的《望厦条约》中美: 1844年签订的《黄埔条约》</code></pre><p>这些不平等条约严重侵犯了中国的领土、领海、司法、关税等方面的主权。由此看出中国已经不是那个由封建阶级所完全掌控的社会。而是由封建阶级和西方列强所统治形成的社会。这也就是中国近代史的起点。（中国近代史是以封建统治的打破为界限的）</p><p>总结：鸦片战争打破了中国封建时期的领土、领海、司法等一系列主权。使中国社会进入了半殖民地半封建时期。也就是中国近代史的起点</p><h4 id="中国社会的半殖民地半封建性质"><a href="#中国社会的半殖民地半封建性质" class="headerlink" title="中国社会的半殖民地半封建性质"></a>中国社会的半殖民地半封建性质</h4><pre><code>主权方面：由封建阶级的专政变为西方列强的干涉甚至主导政治方面：封建势力倾向或投靠西方列强经济方面：中国自然经济被破坏，社会大体经济由西方列强主导人民方面：长期遭受压迫奴役，民不聊生</code></pre><h4 id="当时社会中阶级关系和变动"><a href="#当时社会中阶级关系和变动" class="headerlink" title="当时社会中阶级关系和变动"></a>当时社会中阶级关系和变动</h4><pre><code>地主：拥有大量土地和政权，加剧对人民的剥削农民：原有田者无田，变更为贫民或雇农贫民：被资本家剥削，主要负责工厂劳动雇农：主要被地主剥削，负责种田资本家：外国列强资本人员、地主、官僚、民族资本</code></pre><h4 id="近代中国的主要矛盾和历史任务"><a href="#近代中国的主要矛盾和历史任务" class="headerlink" title="近代中国的主要矛盾和历史任务"></a>近代中国的主要矛盾和历史任务</h4><h5 id="主要矛盾"><a href="#主要矛盾" class="headerlink" title="主要矛盾"></a>主要矛盾</h5><p>1.帝国主义的和中华民族的矛盾<br>2.封建主义和人民大众的矛盾</p><h5 id="俩大任务"><a href="#俩大任务" class="headerlink" title="俩大任务"></a>俩大任务</h5><p>1.争取民族独立，人民解放<br>2.实现国家富强，人民富裕</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数学-因式分解</title>
      <link href="/MeBlog/2019/11/28/%E6%95%B0%E5%AD%A6-%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3/"/>
      <url>/MeBlog/2019/11/28/%E6%95%B0%E5%AD%A6-%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>## </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数学-正弦</title>
      <link href="/MeBlog/2019/11/28/%E6%95%B0%E5%AD%A6-%E6%AD%A3%E5%BC%A6/"/>
      <url>/MeBlog/2019/11/28/%E6%95%B0%E5%AD%A6-%E6%AD%A3%E5%BC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>正弦（sine），数学术语，在直角三角形中，任意一锐角∠A的对边与斜边的比叫做∠A的正弦，记作sinA（由英语sine一词简写得来），即sinA=∠A的对边/斜边。</p><p>个人理解：正弦 就是指定角的对边与斜边的比</p><h2 id="正弦函数"><a href="#正弦函数" class="headerlink" title="正弦函数"></a>正弦函数</h2><h2 id="单位圆"><a href="#单位圆" class="headerlink" title="单位圆"></a>单位圆</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派-系统篇</title>
      <link href="/MeBlog/2019/11/22/%E6%A0%91%E8%8E%93%E6%B4%BE-%E7%B3%BB%E7%BB%9F%E7%AF%87/"/>
      <url>/MeBlog/2019/11/22/%E6%A0%91%E8%8E%93%E6%B4%BE-%E7%B3%BB%E7%BB%9F%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="shell程序开机启动"><a href="#shell程序开机启动" class="headerlink" title="shell程序开机启动"></a>shell程序开机启动</h2><p>核心文件是 /etc/profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">#将需要开机自启动的文件路径加入</span><br><span class="line">/home/pi/text.sh</span><br></pre></td></tr></table></figure><h2 id="获取系统位数"><a href="#获取系统位数" class="headerlink" title="获取系统位数"></a>获取系统位数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派-apt篇</title>
      <link href="/MeBlog/2019/11/22/%E6%A0%91%E8%8E%93%E6%B4%BE-apt%E7%AF%87/"/>
      <url>/MeBlog/2019/11/22/%E6%A0%91%E8%8E%93%E6%B4%BE-apt%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="添加apt-source-资源路径"><a href="#添加apt-source-资源路径" class="headerlink" title="添加apt source 资源路径"></a>添加apt source 资源路径</h2><p>主要修改/etc/apt/sources.list 文件</p><p>添加阿里镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line">#添加如下内容</span><br><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main non-free contrib</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda 工具</title>
      <link href="/MeBlog/2019/09/27/Anaconda%E5%B7%A5%E5%85%B7/"/>
      <url>/MeBlog/2019/09/27/Anaconda%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="version-环境切换"><a href="#version-环境切换" class="headerlink" title="version 环境切换"></a>version 环境切换</h3><h4 id="列出当前Anaconda-python拥有的环境列表"><a href="#列出当前Anaconda-python拥有的环境列表" class="headerlink" title="列出当前Anaconda python拥有的环境列表"></a>列出当前Anaconda python拥有的环境列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(python36) spiderbao@spiderbao-CW65S:~$ conda info -e</span><br><span class="line"># conda environments:</span><br><span class="line">#</span><br><span class="line">base                     /home/spiderbao/anaconda3</span><br><span class="line">python36              *  /home/spiderbao/anaconda3/envs/python36</span><br></pre></td></tr></table></figure><p>其中base 为安装Anaconda 所默认安装的</p><h4 id="查看当前Python的版本"><a href="#查看当前Python的版本" class="headerlink" title="查看当前Python的版本"></a>查看当前Python的版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(python36) spiderbao@spiderbao-CW65S:~$ python -V</span><br><span class="line">Python 3.6.9 :: Anaconda, Inc.</span><br></pre></td></tr></table></figure><h4 id="安装新的Python-版本"><a href="#安装新的Python-版本" class="headerlink" title="安装新的Python 版本"></a>安装新的Python 版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name python36 python=3.6</span><br></pre></td></tr></table></figure><p>其中 python36 为别名</p><p>新版本安装完后一些常用的库和包需要手动安装</p><h4 id="切换Python-版本"><a href="#切换Python-版本" class="headerlink" title="切换Python 版本"></a>切换Python 版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate python36</span><br></pre></td></tr></table></figure><p>其中Python36 为别名</p><h4 id="切换会之前的环境"><a href="#切换会之前的环境" class="headerlink" title="切换会之前的环境"></a>切换会之前的环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h4 id="删除指定的版本环境"><a href="#删除指定的版本环境" class="headerlink" title="删除指定的版本环境"></a>删除指定的版本环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name python34 --all</span><br></pre></td></tr></table></figure><p>其中python34 为别名</p><h4 id="手动安装常用的库和包"><a href="#手动安装常用的库和包" class="headerlink" title="手动安装常用的库和包"></a>手动安装常用的库和包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda install numpy</span><br><span class="line"></span><br><span class="line">conda install scipy</span><br><span class="line"></span><br><span class="line">conda install matplotlib</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python带我飞-note</title>
      <link href="/MeBlog/2019/09/18/Python%E5%B8%A6%E6%88%91%E9%A3%9E-note/"/>
      <url>/MeBlog/2019/09/18/Python%E5%B8%A6%E6%88%91%E9%A3%9E-note/</url>
      
        <content type="html"><![CDATA[<h2 id="第二篇-进阶"><a href="#第二篇-进阶" class="headerlink" title="第二篇 进阶"></a>第二篇 进阶</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量是编程语言中最基础的术语，用来指计算机中存储的可变数据。如下例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Val = <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><h4 id="变量的规则"><a href="#变量的规则" class="headerlink" title="变量的规则"></a>变量的规则</h4><p>类型不同，存储功能不同</p><p>申明变量无需定义变量类型，直接赋值即可</p><p>如何做到直接赋值，原因是Python内部对变量进行了对象封装，并且它具有三个重要的属性id,type,value</p><h4 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h4><p>Python3中的类型划分为6种：</p><p>number 数字可以划分为 int float bool complex 等</p><p>string 字符串</p><p>tuple 元组</p><p>sets 集合</p><p>dictionaries 字典</p><h4 id="变量类型的帮助函数"><a href="#变量类型的帮助函数" class="headerlink" title="变量类型的帮助函数"></a>变量类型的帮助函数</h4><p>dir 用来查询类型的所有属性。如dir(number)</p><p>help 用来查询类型具体的说明文档。如help(number)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql必知必会-note</title>
      <link href="/MeBlog/2019/09/10/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A-note/"/>
      <url>/MeBlog/2019/09/10/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A-note/</url>
      
        <content type="html"><![CDATA[<h2 id="了解sql"><a href="#了解sql" class="headerlink" title="了解sql"></a>了解sql</h2><h3 id="数据库基础术语"><a href="#数据库基础术语" class="headerlink" title="数据库基础术语"></a>数据库基础术语</h3><h4 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h4><p>数据库是一个以某种有组织的方式存储的数据集合。所以本人认为数据库是一个管理数据的概念。</p><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>表是某种特定类型数据的结构化清单。</p><h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p>模式 是关于数据库和表的布局及特性的信息</p><h4 id="列"><a href="#列" class="headerlink" title="列"></a>列</h4><p>列 column 表中的一个字段，所有表是由一个或多个列组成。</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>数据类型 datatype 表示所容许的数据类型。每个表的列都有相应的数据类型，它限制了列中存储的数据。数据类型对于数据的排序，和优化磁盘使用方面起到了重要的作用。</p><h4 id="行"><a href="#行" class="headerlink" title="行"></a>行</h4><p>行 row 表中的一行记录。</p><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><p>主键 primarykey 由一列或列表示。它们与普通的列不同，它们具有其值具有表中唯一性切不为null的特性。</p><h4 id="什么是sql"><a href="#什么是sql" class="headerlink" title="什么是sql"></a>什么是sql</h4><p>sql 的全称是structured query language （结构化查询语言）它是一个专门用来跟数据库通讯的语言。</p><p>sql具有的特定及优点如下</p><p>1.互通性 sql 不是某个DBMS厂商的专属语言，所以使用sql可以操作大多数DBMS产品 如MySQL</p><p>2.简单易学。sql的大多数功能由一个或几个关键字组成，所以学习成本较低。</p><p>3.在保持语法简单的情况下，做到了功能强大操作灵活。</p><h2 id="mysql简介"><a href="#mysql简介" class="headerlink" title="mysql简介"></a>mysql简介</h2><h3 id="什么是MySQL"><a href="#什么是MySQL" class="headerlink" title="什么是MySQL"></a>什么是MySQL</h3><p>首先MySQL它是一种DBMS产品，DBMS是databaseManageSystem 的简称。其次MySQL具有如下特性</p><p>1.成本底，由于MySQL是开源产品所以企业商业是不需要支付费用的。</p><p>2.性能，MySQL在DBMS系列产品中的性能优越</p><p>3.可信赖，就像Linux内核一样。MySQL的开源使得其的使用者和维护者增多。</p><p>4.简单易用</p><h3 id="DBMS产品分类"><a href="#DBMS产品分类" class="headerlink" title="DBMS产品分类"></a>DBMS产品分类</h3><p>DBMS产品可以大致分为2类，一类是基于共享文件系统如File Maker 等。另一类是基于客户机与服务器的如MySQL、Oracle等</p><h3 id="MySQL工具（客户端）"><a href="#MySQL工具（客户端）" class="headerlink" title="MySQL工具（客户端）"></a>MySQL工具（客户端）</h3><p>MySQL workbench</p><p>mysql命令行（自带）</p><h2 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接一般用于像 MySQL workbench 这样的工具或程序代码中。</p><p>链接案例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:3306</span><br></pre></td></tr></table></figure><p>其中 root表示用户名</p><p>localhost 表示IP地址</p><p>3306 表示服务端口</p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>登录数据库后使用MySQL命令行工具选择切换数据库可以使用关键字USE实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> 存在的数据库名称</span><br></pre></td></tr></table></figure><h3 id="关于SHOW的一些操作"><a href="#关于SHOW的一些操作" class="headerlink" title="关于SHOW的一些操作"></a>关于SHOW的一些操作</h3><p>显示所有的数据库名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| crashcourse        |</span><br><span class="line">| fileupload         |</span><br><span class="line">| maven_study        |</span><br><span class="line">| mybatis_study      |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>显示数据库中的所有表名称，注意：此时需要使用USE选择要查看的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE crashcourse;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+-----------------------+</span><br><span class="line">| Tables_in_crashcourse |</span><br><span class="line">+-----------------------+</span><br><span class="line">| customers             |</span><br><span class="line">| orderitems            |</span><br><span class="line">| orders                |</span><br><span class="line">| productnotes          |</span><br><span class="line">| products              |</span><br><span class="line">| vendors               |</span><br><span class="line">+-----------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>显示表中列column的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM orders;</span><br><span class="line">+------------+----------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+------------+----------+------+-----+---------+----------------+</span><br><span class="line">| order_num  | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| order_date | datetime | NO   |     | NULL    |                |</span><br><span class="line">| cust_id    | int(11)  | NO   | MUL | NULL    |                |</span><br><span class="line">+------------+----------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>此查询还有一个快捷方式就是 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DESCRIBE orders;</span><br><span class="line">+------------+----------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+------------+----------+------+-----+---------+----------------+</span><br><span class="line">| order_num  | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| order_date | datetime | NO   |     | NULL    |                |</span><br><span class="line">| cust_id    | int(11)  | NO   | MUL | NULL    |                |</span><br><span class="line">+------------+----------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>DESCRIBE 是 SHOW COLUMNS FROM的一种快捷方式</p><p>显示数据库创建语句或表的创建语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE DATABASE crashcourse;</span><br><span class="line">+-------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| Database    | Create Database                                                                       |</span><br><span class="line">+-------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| crashcourse | CREATE DATABASE `crashcourse` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */ |</span><br><span class="line">+-------------+---------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW CREATE TABLE order;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;order&apos; at line 1</span><br><span class="line">mysql&gt; SHOW CREATE TABLE orders;</span><br><span class="line">+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table  | Create Table                                                                                                                                                                                                                                                                                                                                                                          |</span><br><span class="line">+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| orders | CREATE TABLE `orders` (</span><br><span class="line">  `order_num` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `order_date` datetime NOT NULL,</span><br><span class="line">  `cust_id` int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`order_num`),</span><br><span class="line">  KEY `fk_orders_customers` (`cust_id`),</span><br><span class="line">  CONSTRAINT `fk_orders_customers` FOREIGN KEY (`cust_id`) REFERENCES `customers` (`cust_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=20010 DEFAULT CHARSET=utf8 COLLATE=utf8_bin |</span><br><span class="line">+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>关于SHOW的一些命令可以通过 HELP SHOW获取</p><h2 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h2><h3 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h3><p>select是sql中最常用的查询语句</p><h4 id="检索单个列"><a href="#检索单个列" class="headerlink" title="检索单个列"></a>检索单个列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products;</span><br><span class="line">+----------------+</span><br><span class="line">| prod_name      |</span><br><span class="line">+----------------+</span><br><span class="line">| .5 ton anvil   |</span><br><span class="line">| 1 ton anvil    |</span><br><span class="line">| 2 ton anvil    |</span><br><span class="line">| Detonator      |</span><br><span class="line">| Bird seed      |</span><br><span class="line">| Carrots        |</span><br><span class="line">| Fuses          |</span><br><span class="line">| JetPack 1000   |</span><br><span class="line">| JetPack 2000   |</span><br><span class="line">| Oil can        |</span><br><span class="line">| Safe           |</span><br><span class="line">| Sling          |</span><br><span class="line">| TNT (1 stick)  |</span><br><span class="line">| TNT (5 sticks) |</span><br><span class="line">+----------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>本次查询只是单纯的检索了单个列的数据，没有对数据做过滤和排序。</p><p>个人认为过滤不是必须的，但排序是必须的。因为不指定排序的数据顺序是不可控的。</p><h4 id="检索多个列"><a href="#检索多个列" class="headerlink" title="检索多个列"></a>检索多个列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id,prod_name,prod_price FROM products;</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| prod_id | prod_name      | prod_price |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| ANV01   | .5 ton anvil   |       5.99 |</span><br><span class="line">| ANV02   | 1 ton anvil    |       9.99 |</span><br><span class="line">| ANV03   | 2 ton anvil    |      14.99 |</span><br><span class="line">| DTNTR   | Detonator      |      13.00 |</span><br><span class="line">| FB      | Bird seed      |      10.00 |</span><br><span class="line">| FC      | Carrots        |       2.50 |</span><br><span class="line">| FU1     | Fuses          |       3.42 |</span><br><span class="line">| JP1000  | JetPack 1000   |      35.00 |</span><br><span class="line">| JP2000  | JetPack 2000   |      55.00 |</span><br><span class="line">| OL1     | Oil can        |       8.99 |</span><br><span class="line">| SAFE    | Safe           |      50.00 |</span><br><span class="line">| SLING   | Sling          |       4.49 |</span><br><span class="line">| TNT1    | TNT (1 stick)  |       2.50 |</span><br><span class="line">| TNT2    | TNT (5 sticks) |      10.00 |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>注意多个列间使用,分割最后一个不需要加入,不然会出现语法错误</p><p>如果现在需要检索表中的所有列，可以使用通配符<code>*</code>代替列名。</p><h4 id="检索数据去重"><a href="#检索数据去重" class="headerlink" title="检索数据去重"></a>检索数据去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id FROM products;</span><br><span class="line">+---------+</span><br><span class="line">| vend_id |</span><br><span class="line">+---------+</span><br><span class="line">|    1001 |</span><br><span class="line">|    1001 |</span><br><span class="line">|    1001 |</span><br><span class="line">|    1002 |</span><br><span class="line">|    1002 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1005 |</span><br><span class="line">|    1005 |</span><br><span class="line">+---------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT DISTINCT vend_id FROM products;</span><br><span class="line">+---------+</span><br><span class="line">| vend_id |</span><br><span class="line">+---------+</span><br><span class="line">|    1001 |</span><br><span class="line">|    1002 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1005 |</span><br><span class="line">+---------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>第一次select 查询获取了products.vend_id的所有数据<br>第二次select 查询内容同上但是加入了DISTINCT关键字对数据进行了去重。</p><p>DISTINCT使用注意事项</p><p>1.不能对部分列使用，如 prod_id,DISTINCT vend_id。</p><p>2.DISTINCT 位于 SELECT 后 列前 ，所有的被检索的列将都具有去重功能。</p><h4 id="检索限制输出"><a href="#检索限制输出" class="headerlink" title="检索限制输出"></a>检索限制输出</h4><p>想要控制输出就使用 limit关键字如下</p><p>输出查询结果的前5行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products LIMIT 5;</span><br><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| .5 ton anvil |</span><br><span class="line">| 1 ton anvil  |</span><br><span class="line">| 2 ton anvil  |</span><br><span class="line">| Detonator    |</span><br><span class="line">| Bird seed    |</span><br><span class="line">+--------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>从第1行开始显示3行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products LIMIT 1,3;</span><br><span class="line">+-------------+</span><br><span class="line">| prod_name   |</span><br><span class="line">+-------------+</span><br><span class="line">| 1 ton anvil |</span><br><span class="line">| 2 ton anvil |</span><br><span class="line">| Detonator   |</span><br><span class="line">+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="使用完全限定"><a href="#使用完全限定" class="headerlink" title="使用完全限定"></a>使用完全限定</h4><p>之前的查询语句中使用的都是先对表名，举个对比的例子如下</p><p>未使用完全限定的查询语句</p><p>SELECT prod_name FROM products LIMIT 1,3</p><p>使用完全限定的查询语句</p><p>SELECT products.prod_name FROM crashcourse.products LIMIT 1,3</p><p>使用完全限定时语句更严谨。推荐使用！</p><h2 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h2><h3 id="单列排序数据"><a href="#单列排序数据" class="headerlink" title="单列排序数据"></a>单列排序数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products ORDER BY prod_name;</span><br><span class="line">+----------------+</span><br><span class="line">| prod_name      |</span><br><span class="line">+----------------+</span><br><span class="line">| .5 ton anvil   |</span><br><span class="line">| 1 ton anvil    |</span><br><span class="line">| 2 ton anvil    |</span><br><span class="line">| Bird seed      |</span><br><span class="line">| Carrots        |</span><br><span class="line">| Detonator      |</span><br><span class="line">| Fuses          |</span><br><span class="line">| JetPack 1000   |</span><br><span class="line">| JetPack 2000   |</span><br><span class="line">| Oil can        |</span><br><span class="line">| Safe           |</span><br><span class="line">| Sling          |</span><br><span class="line">| TNT (1 stick)  |</span><br><span class="line">| TNT (5 sticks) |</span><br><span class="line">+----------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>根据products.prod_name 按字母升序排序。</p><h3 id="多列排序顺序"><a href="#多列排序顺序" class="headerlink" title="多列排序顺序"></a>多列排序顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id,prod_price,prod_name FROM products ORDER BY prod_price,prod_name;</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| prod_id | prod_price | prod_name      |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| FC      |       2.50 | Carrots        |</span><br><span class="line">| TNT1    |       2.50 | TNT (1 stick)  |</span><br><span class="line">| FU1     |       3.42 | Fuses          |</span><br><span class="line">| SLING   |       4.49 | Sling          |</span><br><span class="line">| ANV01   |       5.99 | .5 ton anvil   |</span><br><span class="line">| OL1     |       8.99 | Oil can        |</span><br><span class="line">| ANV02   |       9.99 | 1 ton anvil    |</span><br><span class="line">| FB      |      10.00 | Bird seed      |</span><br><span class="line">| TNT2    |      10.00 | TNT (5 sticks) |</span><br><span class="line">| DTNTR   |      13.00 | Detonator      |</span><br><span class="line">| ANV03   |      14.99 | 2 ton anvil    |</span><br><span class="line">| JP1000  |      35.00 | JetPack 1000   |</span><br><span class="line">| SAFE    |      50.00 | Safe           |</span><br><span class="line">| JP2000  |      55.00 | JetPack 2000   |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>上述例子中的输出，仅在多行拥有相同的prod_price值时，才对产品prod_name进行排序。如果prod_price的值都是唯一的就不会使用prod_name的条件进行排序</p><h3 id="排序的方向"><a href="#排序的方向" class="headerlink" title="排序的方向"></a>排序的方向</h3><p>默认排序的方向是升序，相反降序的案例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id,prod_price,prod_name FROM products ORDER BY prod_price DESC;</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| prod_id | prod_price | prod_name      |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| JP2000  |      55.00 | JetPack 2000   |</span><br><span class="line">| SAFE    |      50.00 | Safe           |</span><br><span class="line">| JP1000  |      35.00 | JetPack 1000   |</span><br><span class="line">| ANV03   |      14.99 | 2 ton anvil    |</span><br><span class="line">| DTNTR   |      13.00 | Detonator      |</span><br><span class="line">| FB      |      10.00 | Bird seed      |</span><br><span class="line">| TNT2    |      10.00 | TNT (5 sticks) |</span><br><span class="line">| ANV02   |       9.99 | 1 ton anvil    |</span><br><span class="line">| OL1     |       8.99 | Oil can        |</span><br><span class="line">| ANV01   |       5.99 | .5 ton anvil   |</span><br><span class="line">| SLING   |       4.49 | Sling          |</span><br><span class="line">| FU1     |       3.42 | Fuses          |</span><br><span class="line">| FC      |       2.50 | Carrots        |</span><br><span class="line">| TNT1    |       2.50 | TNT (1 stick)  |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>另外 DESC 不同于 DISTINCT 它可用于不同的条件列，只需要在每个列后加入DESC即可。</p><p>SELECT prod_id,prod_price,prod_name FROM products ORDER BY prod_price DESC,prod_name;</p><p>表示按价格降序排序，如果有价格相同的按商品名称升序排序。</p><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><h3 id="where子语句"><a href="#where子语句" class="headerlink" title="where子语句"></a>where子语句</h3><p>where子语句可以添加一些查询条件，过滤数据。</p><h4 id="根据where-操作符过滤"><a href="#根据where-操作符过滤" class="headerlink" title="根据where 操作符过滤"></a>根据where 操作符过滤</h4><p>where操作符如下</p><p>=    等于</p><p>&lt;&gt;    不等于</p><p>!=    不等于</p><p>&lt;    小于</p><p>&lt;=    小于等于</p><blockquote><p>   大于</p></blockquote><blockquote><p>=    大于等于</p></blockquote><p>BETWEEN    在指定两个值之间，包括指定的值</p><h4 id="BETWEEN-使用"><a href="#BETWEEN-使用" class="headerlink" title="BETWEEN 使用"></a>BETWEEN 使用</h4><p>获取价格在5-10元的商品<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name,prod_price FROM products WHERE prod_price BETWEEN 5 AND 10 ORDER BY prod_price DESC;</span><br><span class="line">+----------------+------------+</span><br><span class="line">| prod_name      | prod_price |</span><br><span class="line">+----------------+------------+</span><br><span class="line">| Bird seed      |      10.00 |</span><br><span class="line">| TNT (5 sticks) |      10.00 |</span><br><span class="line">| 1 ton anvil    |       9.99 |</span><br><span class="line">| Oil can        |       8.99 |</span><br><span class="line">| .5 ton anvil   |       5.99 |</span><br><span class="line">+----------------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h4 id="空值null过滤"><a href="#空值null过滤" class="headerlink" title="空值null过滤"></a>空值null过滤</h4><p>获取商品价格为null 的所有商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_price IS NULL;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>获取商品价格不为null 的所有商品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_price IS NOT NULL;</span><br><span class="line">+----------------+</span><br><span class="line">| prod_name      |</span><br><span class="line">+----------------+</span><br><span class="line">| .5 ton anvil   |</span><br><span class="line">| 1 ton anvil    |</span><br><span class="line">| 2 ton anvil    |</span><br><span class="line">| Detonator      |</span><br><span class="line">| Bird seed      |</span><br><span class="line">| Carrots        |</span><br><span class="line">| Fuses          |</span><br><span class="line">| JetPack 1000   |</span><br><span class="line">| JetPack 2000   |</span><br><span class="line">| Oil can        |</span><br><span class="line">| Safe           |</span><br><span class="line">| Sling          |</span><br><span class="line">| TNT (1 stick)  |</span><br><span class="line">| TNT (5 sticks) |</span><br><span class="line">+----------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="AND-OR-IN-NOT-操作符"><a href="#AND-OR-IN-NOT-操作符" class="headerlink" title="AND OR IN NOT 操作符"></a>AND OR IN NOT 操作符</h2><p>操作符（operator）的定义：用来联结或改变WHERE字句中的关键字。也称为逻辑操作符</p><h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><p>相当于语句中的并且，用作条件追加。</p><p>查询厂商id为1003 并且价格大于等于10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,prod_id,prod_price,prod_name FROM products WHERE vend_id = 1003 AND prod_price &gt;= 10 ORDER BY prod_name;</span><br><span class="line">+---------+---------+------------+----------------+</span><br><span class="line">| vend_id | prod_id | prod_price | prod_name      |</span><br><span class="line">+---------+---------+------------+----------------+</span><br><span class="line">|    1003 | FB      |      10.00 | Bird seed      |</span><br><span class="line">|    1003 | DTNTR   |      13.00 | Detonator      |</span><br><span class="line">|    1003 | SAFE    |      50.00 | Safe           |</span><br><span class="line">|    1003 | TNT2    |      10.00 | TNT (5 sticks) |</span><br><span class="line">+---------+---------+------------+----------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>AND 可以在一次查询中多次使用</p><h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><p>相当于语句中或者，用于条件选择。</p><p>查询厂商id为1003或1002的商品信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,prod_name,prod_price FROM products WHERE vend_id = 1003 OR vend_id = 1002 ORDER BY prod_name;</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| vend_id | prod_name      | prod_price |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">|    1003 | Bird seed      |      10.00 |</span><br><span class="line">|    1003 | Carrots        |       2.50 |</span><br><span class="line">|    1003 | Detonator      |      13.00 |</span><br><span class="line">|    1002 | Fuses          |       3.42 |</span><br><span class="line">|    1002 | Oil can        |       8.99 |</span><br><span class="line">|    1003 | Safe           |      50.00 |</span><br><span class="line">|    1003 | Sling          |       4.49 |</span><br><span class="line">|    1003 | TNT (1 stick)  |       2.50 |</span><br><span class="line">|    1003 | TNT (5 sticks) |      10.00 |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>OR 可以在一次查询中多次使用</p><h3 id="AND-OR-联合使用"><a href="#AND-OR-联合使用" class="headerlink" title="AND OR 联合使用"></a>AND OR 联合使用</h3><p>使用时需要注意优先级问题。</p><p>MySQL中默认 AND 与 OR 同时出现时 AND 优先被执行。</p><p>误区案例</p><p>查询厂商为1002或1003的价格大于等于10的商品<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,prod_name,prod_price FROM products WHERE vend_id = 1002 OR vend_id = 1003 AND prod_price &gt;= 10 ORDER BY prod_name;</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| vend_id | prod_name      | prod_price |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">|    1003 | Bird seed      |      10.00 |</span><br><span class="line">|    1003 | Detonator      |      13.00 |</span><br><span class="line">|    1002 | Fuses          |       3.42 |</span><br><span class="line">|    1002 | Oil can        |       8.99 |</span><br><span class="line">|    1003 | Safe           |      50.00 |</span><br><span class="line">|    1003 | TNT (5 sticks) |      10.00 |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>此时发现 价格 为 3.42 和 8.99的商品被查出。原因是上面所说的优先级导致的。</p><p>误区解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,prod_name,prod_price FROM products WHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price &gt;= 10 ORDER BY prod_name;</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| vend_id | prod_name      | prod_price |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">|    1003 | Bird seed      |      10.00 |</span><br><span class="line">|    1003 | Detonator      |      13.00 |</span><br><span class="line">|    1003 | Safe           |      50.00 |</span><br><span class="line">|    1003 | TNT (5 sticks) |      10.00 |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>当OR条件加入（）时它的优先级就大于了AND,就像是数学运算的优先级问题一样被（）解决。</p><p>AND 和 OR 同时使用的场景下建议使用（）。</p><h3 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h3><p>IN 用来指定条件范围<br>使用OR操作符过滤数据的一些案例，同样使用IN也可以完成</p><p>查询厂商id为1003或1002的商品信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,prod_name,prod_price FROM products WHERE vend_id IN (1002,1003) ORDER BY prod_name;</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| vend_id | prod_name      | prod_price |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">|    1003 | Bird seed      |      10.00 |</span><br><span class="line">|    1003 | Carrots        |       2.50 |</span><br><span class="line">|    1003 | Detonator      |      13.00 |</span><br><span class="line">|    1002 | Fuses          |       3.42 |</span><br><span class="line">|    1002 | Oil can        |       8.99 |</span><br><span class="line">|    1003 | Safe           |      50.00 |</span><br><span class="line">|    1003 | Sling          |       4.49 |</span><br><span class="line">|    1003 | TNT (1 stick)  |       2.50 |</span><br><span class="line">|    1003 | TNT (5 sticks) |      10.00 |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>IN与OR比较具有的优点如下</p><p>1.语法更清晰简洁</p><p>2.在使用IN时操作符优先级问题会减少</p><p>3.执行更快</p><p>4.IN可以包含其他的SELECT语句。使得能够动态创建WHERE字句</p><h3 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h3><p>WHERE 字句中的NOT操作符有且只能有一个，功能是否定之后所跟的任何条件。</p><p>查询厂商id不是1002,1003的所有商品信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name,prod_price FROM products WHERE vend_id NOT IN (1002,1003) ORDER BY prod_name;</span><br><span class="line">+--------------+------------+</span><br><span class="line">| prod_name    | prod_price |</span><br><span class="line">+--------------+------------+</span><br><span class="line">| .5 ton anvil |       5.99 |</span><br><span class="line">| 1 ton anvil  |       9.99 |</span><br><span class="line">| 2 ton anvil  |      14.99 |</span><br><span class="line">| JetPack 1000 |      35.00 |</span><br><span class="line">| JetPack 2000 |      55.00 |</span><br><span class="line">+--------------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>NOT支持的取反的操作符有 IN、BETWEEN、EXISTS。</p><h2 id="通配符进行过滤"><a href="#通配符进行过滤" class="headerlink" title="通配符进行过滤"></a>通配符进行过滤</h2><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><p>LIKE 是开启通配符匹配的关键字。</p><p>通配符号 % _</p><p>%表示匹配任意字符<br>_表示匹配一个字符</p><p>查询商品名称中包含 anvil<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id,prod_name FROM products WHERE prod_name LIKE &apos;%anvil&apos;;</span><br><span class="line">+---------+--------------+</span><br><span class="line">| prod_id | prod_name    |</span><br><span class="line">+---------+--------------+</span><br><span class="line">| ANV01   | .5 ton anvil |</span><br><span class="line">| ANV02   | 1 ton anvil  |</span><br><span class="line">| ANV03   | 2 ton anvil  |</span><br><span class="line">+---------+--------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT prod_id,prod_name FROM products WHERE prod_name LIKE &apos;_ ton anvil&apos;;</span><br><span class="line">+---------+-------------+</span><br><span class="line">| prod_id | prod_name   |</span><br><span class="line">+---------+-------------+</span><br><span class="line">| ANV02   | 1 ton anvil |</span><br><span class="line">| ANV03   | 2 ton anvil |</span><br><span class="line">+---------+-------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>使用通配符的技巧</p><p>1.不要过度使用通配符，会造成数据库运算压力。</p><p>2.在明确需要使用通配符时，除非绝对有必要，否则不要把他们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</p><p>3.仔细注意通配符的位置。</p><h2 id="使用正则表达式进行搜索"><a href="#使用正则表达式进行搜索" class="headerlink" title="使用正则表达式进行搜索"></a>使用正则表达式进行搜索</h2><p>MySQL开启使用正则表达式的关键字符是 REGEXP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_name FROM products WHERE prod_name REGEXP &apos;.000&apos; ORDER BY prod_name;</span><br><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">| JetPack 2000 |</span><br><span class="line">+--------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h2><h3 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h3><p>计算字段是原先表中不存在的字段，通过使用数据库函数或计算后并重命名的字段。</p><h4 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h4><p>vendors 表中厂商名称和地址是分离的。客户端需要获取一个vend—title的字段。格式是这样的 vend_name (vend_country)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT Concat(Trim(vend_name),&apos; (&apos;,Trim(vend_country),&apos;)&apos;) AS vend_title FROM vendors ORDER BY vend_name;</span><br><span class="line">+-------------------------+</span><br><span class="line">| vend_title              |</span><br><span class="line">+-------------------------+</span><br><span class="line">| ACME (USA)              |</span><br><span class="line">| Anvils R Us (USA)       |</span><br><span class="line">| Furball Inc. (USA)      |</span><br><span class="line">| Jet Set (England)       |</span><br><span class="line">| Jouets Et Ours (France) |</span><br><span class="line">| LT Supplies (USA)       |</span><br><span class="line">+-------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>其中函数 Concat 用于链接多个字符串</p><p>Trim函数用于去除字段左右的空格</p><p>AS 关键字用于起别名 alias</p><h4 id="执行算数计算"><a href="#执行算数计算" class="headerlink" title="执行算数计算"></a>执行算数计算</h4><p>在表查询中，需要添加一个字段，这个字段来至于表中2个字段的乘积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT prod_id,quantity,item_price,quantity*item_price AS expended_price FROM orderitems ORDER BY expended_price;</span><br><span class="line">+---------+----------+------------+----------------+</span><br><span class="line">| prod_id | quantity | item_price | expended_price |</span><br><span class="line">+---------+----------+------------+----------------+</span><br><span class="line">| SLING   |        1 |       4.49 |           4.49 |</span><br><span class="line">| OL1     |        1 |       8.99 |           8.99 |</span><br><span class="line">| FB      |        1 |      10.00 |          10.00 |</span><br><span class="line">| FB      |        1 |      10.00 |          10.00 |</span><br><span class="line">| ANV03   |        1 |      14.99 |          14.99 |</span><br><span class="line">| ANV02   |        3 |       9.99 |          29.97 |</span><br><span class="line">| TNT2    |        5 |      10.00 |          50.00 |</span><br><span class="line">| JP2000  |        1 |      55.00 |          55.00 |</span><br><span class="line">| ANV01   |       10 |       5.99 |          59.90 |</span><br><span class="line">| FC      |       50 |       2.50 |         125.00 |</span><br><span class="line">| TNT2    |      100 |      10.00 |        1000.00 |</span><br><span class="line">+---------+----------+------------+----------------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="测试计算"><a href="#测试计算" class="headerlink" title="测试计算"></a>测试计算</h3><p>使用 SELECT 函数 或运算即可</p><p>测试now函数获取当前时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT NOW();</span><br><span class="line">+---------------------+</span><br><span class="line">| NOW()               |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2019-09-03 16:07:01 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>测试 三乘五<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT 3*5;</span><br><span class="line">+-----+</span><br><span class="line">| 3*5 |</span><br><span class="line">+-----+</span><br><span class="line">|  15 |</span><br><span class="line">+-----+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h2 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><p>sql是通用的，但是函数并不是通用的。以下介绍关于MySQL提供的函数</p><h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><p>下面列举一些关于MySQL处理文本的函数</p><p>Left()    返回字符串左边的字符</p><p>length()    返回字符串的长度</p><p>Locate()    找出字符串的一个子串</p><p>Lower()        将字符串转换为小写</p><p>LTrim()        去掉字符串左边的空格</p><p>Right()        返回字符串右边的字符</p><p>RTrim()        去掉字符串右边的空格</p><p>Soundex()    返回字符串的soundex值（用于声音模糊查询）</p><p>SubString()    返回字符串的字符</p><p>Upper()        将字符串转换为大写</p><p>Upper示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_name,UPPER(vend_name) AS vend_name_upper FROM vendors ORDER BY vend_name;</span><br><span class="line">+----------------+-----------------+</span><br><span class="line">| vend_name      | vend_name_upper |</span><br><span class="line">+----------------+-----------------+</span><br><span class="line">| ACME           | ACME            |</span><br><span class="line">| Anvils R Us    | ANVILS R US     |</span><br><span class="line">| Furball Inc.   | FURBALL INC.    |</span><br><span class="line">| Jet Set        | JET SET         |</span><br><span class="line">| Jouets Et Ours | JOUETS ET OURS  |</span><br><span class="line">| LT Supplies    | LT SUPPLIES     |</span><br><span class="line">+----------------+-----------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><p>关于MySQL处理日期和时间的函数</p><p>AddDate()    添加一个日期</p><p>AddTime()    添加一个时间</p><p>CurDate()    返回当前日期</p><p>CurTime()    返回当前时间</p><p>Date()        返回日期时间的日期部分</p><p>DateDiff()    计算两个日期之差</p><p>Date_Add()    高度灵活的日期运算函数</p><p>Date_Format    返回一个格式化的日期或时间串</p><p>Day()        返回一个日期的天数部分</p><p>DayOfWeek()    对于一个日期返回对应的星期</p><p>Hour()        返回时间中的小时</p><p>Minute()    返回时间中的分钟</p><p>Month()        返回一个日期的月份部分</p><p>Now()        返回当前日期和时间</p><p>Second()    返回一个时间的秒</p><p>Time()        返回日期时间的时间部分</p><p>Year()        返回一个日期的年份部分</p><p>Year示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT order_date,Year(order_date) AS order_date_year From orders ORDER BY order_date_year;</span><br><span class="line">+---------------------+-----------------+</span><br><span class="line">| order_date          | order_date_year |</span><br><span class="line">+---------------------+-----------------+</span><br><span class="line">| 2005-09-01 00:00:00 |            2005 |</span><br><span class="line">| 2005-09-12 00:00:00 |            2005 |</span><br><span class="line">| 2005-09-30 00:00:00 |            2005 |</span><br><span class="line">| 2005-10-03 00:00:00 |            2005 |</span><br><span class="line">| 2005-10-08 00:00:00 |            2005 |</span><br><span class="line">+---------------------+-----------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="MySQL中的数值处理函数"><a href="#MySQL中的数值处理函数" class="headerlink" title="MySQL中的数值处理函数"></a>MySQL中的数值处理函数</h3><p>Abs()    返回一个数的绝对值</p><p>Cos()    返回一个角度的余弦</p><p>Exp()    返回一个数的指数值</p><p>Mod()    返回操作的余数</p><p>Pi()    返回圆周率</p><p>Rand()    返回一个随机数</p><p>Sin()    返回一个角度的正弦</p><p>Sqrt()    返回一个数的平方根</p><p>Tan()    返回一个角度的正切</p><h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><h4 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h4><p>AVG()    返回某列的平均值</p><p>案例：获取所有商品的平均价格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(prod_price) AS prod_price_avg FROM products;</span><br><span class="line">+----------------+</span><br><span class="line">| prod_price_avg |</span><br><span class="line">+----------------+</span><br><span class="line">|      16.133571 |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h4><p>COUNT()    统计表中的行数，参数（parameter）为*时代表所有列null也会被统计。当指定特定的列时只针对指定的列统计并且null不会计入统计。</p><p>案例：统计商品个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) FROM customers;</span><br><span class="line">+----------+</span><br><span class="line">| COUNT(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        5 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT COUNT(cust_email) FROM customers;</span><br><span class="line">+-------------------+</span><br><span class="line">| COUNT(cust_email) |</span><br><span class="line">+-------------------+</span><br><span class="line">|                 3 |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h4><p>MAX()    获取指定列中的最大值，必须传入指定的列。当遇到null会忽略</p><p>案例：获取商品的最大价格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT MAX(prod_price) AS max_price FROM products;</span><br><span class="line">+-----------+</span><br><span class="line">| max_price |</span><br><span class="line">+-----------+</span><br><span class="line">|     55.00 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="MIN"><a href="#MIN" class="headerlink" title="MIN"></a>MIN</h4><p>MIN()    与MAX相反获取列中的最小值。注意事项一致。</p><p>案例：获取商品的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT MIN(prod_price) AS min_price FROM products;</span><br><span class="line">+-----------+</span><br><span class="line">| min_price |</span><br><span class="line">+-----------+</span><br><span class="line">|      2.50 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="SUN"><a href="#SUN" class="headerlink" title="SUN"></a>SUN</h4><p>SUN()    求和函数。null被忽略</p><p>案例：获取20005订单的商品的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(quantity) AS items_ordered FROM orderitems WHERE order_num = 20005;</span><br><span class="line">+---------------+</span><br><span class="line">| items_ordered |</span><br><span class="line">+---------------+</span><br><span class="line">|            19 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="聚集函数中DISTINCT和All"><a href="#聚集函数中DISTINCT和All" class="headerlink" title="聚集函数中DISTINCT和All"></a>聚集函数中DISTINCT和All</h3><p>聚集函数默认取值范围是all（指定列的所有值）我们可以在上面的几个聚集函数中使用DISTINCT去重后进行聚合计算</p><p>上面的5个函数中MAX和MIN使用DISTINCT无意义。因为我们要获取的是最大值或最小值</p><p>DISTINCT不能用于COUNT(*)，因为不允许使用COUNT(DISTINCT)。类似的DISTINCT必须使用列名。</p><p>案例：获取不同商品价格的平均值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(DISTINCT prod_price) AS avg_price FROM products;</span><br><span class="line">+-----------+</span><br><span class="line">| avg_price |</span><br><span class="line">+-----------+</span><br><span class="line">| 17.780833 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="组合聚合函数"><a href="#组合聚合函数" class="headerlink" title="组合聚合函数"></a>组合聚合函数</h3><p>案例：获取所有商品数量，商品的最大值、最小值以及商品的平均值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) AS num_item,MAX(prod_price) AS max_price,MIN(prod_price) AS min_price,AVG(prod_price) AS avg_price FROM products;</span><br><span class="line">+----------+-----------+-----------+-----------+</span><br><span class="line">| num_item | max_price | min_price | avg_price |</span><br><span class="line">+----------+-----------+-----------+-----------+</span><br><span class="line">|       14 |     55.00 |      2.50 | 16.133571 |</span><br><span class="line">+----------+-----------+-----------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><h3 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h3><p>数据为什么要分组，当遇到求每组每种……的需求时我们可以考虑使用分组。</p><p>使用group by可以实现分组声明。同时下面列举一些关于分组的规定</p><p>1.GROUP BY 分组后，数据将在最后规定的分组上进行汇总。也就是说分组后不能从个别的列中获取数据</p><p>2.GROUP BY子句中列出的每列都必须是检索或有效的表达式（不能是聚集函数）。如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。</p><p>3.除聚集计算外，SELECT语句中的每个列必须在GROUP BY字句中给出</p><p>4.如果分组中存在null值，则将null作为一个分组返回。如果列中存在多行null值，它们将分为一组。</p><p>5.GROUP BY 语法顺序在 WHERE之后ORDER BY之前。</p><p>案例：获取每个厂商的商品个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,COUNT(*) FROM products GROUP BY vend_id ORDER BY vend_id;</span><br><span class="line">+---------+----------+</span><br><span class="line">| vend_id | COUNT(*) |</span><br><span class="line">+---------+----------+</span><br><span class="line">|    1001 |        3 |</span><br><span class="line">|    1002 |        2 |</span><br><span class="line">|    1003 |        7 |</span><br><span class="line">|    1005 |        2 |</span><br><span class="line">+---------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h3><p>就是在分组的前提下过滤数据，可使用HAVING完成过滤</p><p>案例：获取每个厂商商品数量，厂商商品数量小于2过滤掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,COUNT(*) AS prod_num FROM products GROUP BY vend_id HAVING prod_num &gt;=2;</span><br><span class="line">+---------+----------+</span><br><span class="line">| vend_id | prod_num |</span><br><span class="line">+---------+----------+</span><br><span class="line">|    1001 |        3 |</span><br><span class="line">|    1002 |        2 |</span><br><span class="line">|    1003 |        7 |</span><br><span class="line">|    1005 |        2 |</span><br><span class="line">+---------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="过滤分组-排序"><a href="#过滤分组-排序" class="headerlink" title="过滤分组+排序"></a>过滤分组+排序</h3><p>案例：获取每个厂商商品数量，厂商商品数量小于2过滤掉。最后按商品数量的升序排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,COUNT(*) AS prod_num FROM products GROUP BY vend_id HAVING prod_num &gt;=2 ORDER BY prod_num;</span><br><span class="line">+---------+----------+</span><br><span class="line">| vend_id | prod_num |</span><br><span class="line">+---------+----------+</span><br><span class="line">|    1002 |        2 |</span><br><span class="line">|    1005 |        2 |</span><br><span class="line">|    1001 |        3 |</span><br><span class="line">|    1003 |        7 |</span><br><span class="line">+---------+----------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="行过滤-分组过滤-排序"><a href="#行过滤-分组过滤-排序" class="headerlink" title="行过滤+分组过滤+排序"></a>行过滤+分组过滤+排序</h3><p>案例：获取每个厂商商品数量，过滤掉商品价格小于10的商品，厂商商品数量小于2也过滤掉。最后按商品数量的升序排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,COUNT(*) AS prod_num FROM products WHERE prod_price &gt;=10  GROUP BY vend_id HAVING prod_num &gt;=2 ORDER BY prod_num;</span><br><span class="line">+---------+----------+</span><br><span class="line">| vend_id | prod_num |</span><br><span class="line">+---------+----------+</span><br><span class="line">|    1005 |        2 |</span><br><span class="line">|    1003 |        4 |</span><br><span class="line">+---------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="WHERE-GROUP-BY-HAVING-ORDER-BY-各自的作用"><a href="#WHERE-GROUP-BY-HAVING-ORDER-BY-各自的作用" class="headerlink" title="WHERE GROUP BY HAVING ORDER BY 各自的作用"></a>WHERE GROUP BY HAVING ORDER BY 各自的作用</h3><p>WHERE     用于行过滤</p><p>GROUP BY     用于分组说明</p><p>HAVING         用于分组过滤</p><p>ORDER BY     用于输出排序</p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>首先子查询是MySQL4.1引入的特性。</p><p>子查询可以组合使用</p><p>子查询的效率不高，尽量少用</p><p>下面列举2个例子</p><p>1.列出订购物品TNT2的所有客户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; SELECT cust_name,cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num IN (SELECT order_num FROM orderitems WHERE prod_id = &apos;TNT2&apos;))</span><br><span class="line">    -&gt; ;</span><br><span class="line">+----------------+--------------+</span><br><span class="line">| cust_name      | cust_contact |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">| Coyote Inc.    | Y Lee        |</span><br><span class="line">| Yosemite Place | Y Sam        |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>2.获取customers表中每个顾客的订单总数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT cust_name,cust_state,(SELECT COUNT(*) FROM orders WHERE customers.cust_id = orders.cust_id) AS orders FROM customers ORDER BY cust_name;</span><br><span class="line">+----------------+------------+--------+</span><br><span class="line">| cust_name      | cust_state | orders |</span><br><span class="line">+----------------+------------+--------+</span><br><span class="line">| Coyote Inc.    | MI         |      2 |</span><br><span class="line">| E Fudd         | IL         |      1 |</span><br><span class="line">| Mouse House    | OH         |      0 |</span><br><span class="line">| Wascals        | IN         |      1 |</span><br><span class="line">| Yosemite Place | AZ         |      1 |</span><br><span class="line">+----------------+------------+--------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>使用子查询的诀窍是分步骤循序渐进的运行（编写）sql</p><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><p>联结表就是将一些关系表联结起来，获取数据。</p><h3 id="关系表"><a href="#关系表" class="headerlink" title="关系表"></a>关系表</h3><p>关系表简单说就是2张表之间存在关联性。它具有以下优点</p><p>1.因为每张表都是根据其特性建立的，所以它不允许出现重复的字段。复用性强</p><p>2.可以细粒度的利用字段进行查询过滤</p><p>3.操作简单，一次操作多次引用</p><p>联结案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_name,prod_name,prod_price FROM vendors,products WHERE vendors.vend_id = products.vend_id ORDER BY vend_name,prod_name;</span><br><span class="line">+-------------+----------------+------------+</span><br><span class="line">| vend_name   | prod_name      | prod_price |</span><br><span class="line">+-------------+----------------+------------+</span><br><span class="line">| ACME        | Bird seed      |      10.00 |</span><br><span class="line">| ACME        | Carrots        |       2.50 |</span><br><span class="line">| ACME        | Detonator      |      13.00 |</span><br><span class="line">| ACME        | Safe           |      50.00 |</span><br><span class="line">| ACME        | Sling          |       4.49 |</span><br><span class="line">| ACME        | TNT (1 stick)  |       2.50 |</span><br><span class="line">| ACME        | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Anvils R Us | .5 ton anvil   |       5.99 |</span><br><span class="line">| Anvils R Us | 1 ton anvil    |       9.99 |</span><br><span class="line">| Anvils R Us | 2 ton anvil    |      14.99 |</span><br><span class="line">| Jet Set     | JetPack 1000   |      35.00 |</span><br><span class="line">| Jet Set     | JetPack 2000   |      55.00 |</span><br><span class="line">| LT Supplies | Fuses          |       3.42 |</span><br><span class="line">| LT Supplies | Oil can        |       8.99 |</span><br><span class="line">+-------------+----------------+------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h3><h4 id="笛卡尔集"><a href="#笛卡尔集" class="headerlink" title="笛卡尔集"></a>笛卡尔集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_name,prod_name,prod_price FROM vendors,products ORDER BY vend_name,prod_name;</span><br><span class="line">+----------------+----------------+------------+</span><br><span class="line">| vend_name      | prod_name      | prod_price |</span><br><span class="line">+----------------+----------------+------------+</span><br><span class="line">| ACME           | .5 ton anvil   |       5.99 |</span><br><span class="line">| ACME           | 1 ton anvil    |       9.99 |</span><br><span class="line">| ACME           | 2 ton anvil    |      14.99 |</span><br><span class="line">| ACME           | Bird seed      |      10.00 |</span><br><span class="line">| ACME           | Carrots        |       2.50 |</span><br><span class="line">| ACME           | Detonator      |      13.00 |</span><br><span class="line">| ACME           | Fuses          |       3.42 |</span><br><span class="line">| ACME           | JetPack 1000   |      35.00 |</span><br><span class="line">| ACME           | JetPack 2000   |      55.00 |</span><br><span class="line">| ACME           | Oil can        |       8.99 |</span><br><span class="line">| ACME           | Safe           |      50.00 |</span><br><span class="line">| ACME           | Sling          |       4.49 |</span><br><span class="line">| ACME           | TNT (1 stick)  |       2.50 |</span><br><span class="line">| ACME           | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Anvils R Us    | .5 ton anvil   |       5.99 |</span><br><span class="line">| Anvils R Us    | 1 ton anvil    |       9.99 |</span><br><span class="line">| Anvils R Us    | 2 ton anvil    |      14.99 |</span><br><span class="line">| Anvils R Us    | Bird seed      |      10.00 |</span><br><span class="line">| Anvils R Us    | Carrots        |       2.50 |</span><br><span class="line">| Anvils R Us    | Detonator      |      13.00 |</span><br><span class="line">| Anvils R Us    | Fuses          |       3.42 |</span><br><span class="line">| Anvils R Us    | JetPack 1000   |      35.00 |</span><br><span class="line">| Anvils R Us    | JetPack 2000   |      55.00 |</span><br><span class="line">| Anvils R Us    | Oil can        |       8.99 |</span><br><span class="line">| Anvils R Us    | Safe           |      50.00 |</span><br><span class="line">| Anvils R Us    | Sling          |       4.49 |</span><br><span class="line">| Anvils R Us    | TNT (1 stick)  |       2.50 |</span><br><span class="line">| Anvils R Us    | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Furball Inc.   | .5 ton anvil   |       5.99 |</span><br><span class="line">| Furball Inc.   | 1 ton anvil    |       9.99 |</span><br><span class="line">| Furball Inc.   | 2 ton anvil    |      14.99 |</span><br><span class="line">| Furball Inc.   | Bird seed      |      10.00 |</span><br><span class="line">| Furball Inc.   | Carrots        |       2.50 |</span><br><span class="line">| Furball Inc.   | Detonator      |      13.00 |</span><br><span class="line">| Furball Inc.   | Fuses          |       3.42 |</span><br><span class="line">| Furball Inc.   | JetPack 1000   |      35.00 |</span><br><span class="line">| Furball Inc.   | JetPack 2000   |      55.00 |</span><br><span class="line">| Furball Inc.   | Oil can        |       8.99 |</span><br><span class="line">| Furball Inc.   | Safe           |      50.00 |</span><br><span class="line">| Furball Inc.   | Sling          |       4.49 |</span><br><span class="line">| Furball Inc.   | TNT (1 stick)  |       2.50 |</span><br><span class="line">| Furball Inc.   | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Jet Set        | .5 ton anvil   |       5.99 |</span><br><span class="line">| Jet Set        | 1 ton anvil    |       9.99 |</span><br><span class="line">| Jet Set        | 2 ton anvil    |      14.99 |</span><br><span class="line">| Jet Set        | Bird seed      |      10.00 |</span><br><span class="line">| Jet Set        | Carrots        |       2.50 |</span><br><span class="line">| Jet Set        | Detonator      |      13.00 |</span><br><span class="line">| Jet Set        | Fuses          |       3.42 |</span><br><span class="line">| Jet Set        | JetPack 1000   |      35.00 |</span><br><span class="line">| Jet Set        | JetPack 2000   |      55.00 |</span><br><span class="line">| Jet Set        | Oil can        |       8.99 |</span><br><span class="line">| Jet Set        | Safe           |      50.00 |</span><br><span class="line">| Jet Set        | Sling          |       4.49 |</span><br><span class="line">| Jet Set        | TNT (1 stick)  |       2.50 |</span><br><span class="line">| Jet Set        | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Jouets Et Ours | .5 ton anvil   |       5.99 |</span><br><span class="line">| Jouets Et Ours | 1 ton anvil    |       9.99 |</span><br><span class="line">| Jouets Et Ours | 2 ton anvil    |      14.99 |</span><br><span class="line">| Jouets Et Ours | Bird seed      |      10.00 |</span><br><span class="line">| Jouets Et Ours | Carrots        |       2.50 |</span><br><span class="line">| Jouets Et Ours | Detonator      |      13.00 |</span><br><span class="line">| Jouets Et Ours | Fuses          |       3.42 |</span><br><span class="line">| Jouets Et Ours | JetPack 1000   |      35.00 |</span><br><span class="line">| Jouets Et Ours | JetPack 2000   |      55.00 |</span><br><span class="line">| Jouets Et Ours | Oil can        |       8.99 |</span><br><span class="line">| Jouets Et Ours | Safe           |      50.00 |</span><br><span class="line">| Jouets Et Ours | Sling          |       4.49 |</span><br><span class="line">| Jouets Et Ours | TNT (1 stick)  |       2.50 |</span><br><span class="line">| Jouets Et Ours | TNT (5 sticks) |      10.00 |</span><br><span class="line">| LT Supplies    | .5 ton anvil   |       5.99 |</span><br><span class="line">| LT Supplies    | 1 ton anvil    |       9.99 |</span><br><span class="line">| LT Supplies    | 2 ton anvil    |      14.99 |</span><br><span class="line">| LT Supplies    | Bird seed      |      10.00 |</span><br><span class="line">| LT Supplies    | Carrots        |       2.50 |</span><br><span class="line">| LT Supplies    | Detonator      |      13.00 |</span><br><span class="line">| LT Supplies    | Fuses          |       3.42 |</span><br><span class="line">| LT Supplies    | JetPack 1000   |      35.00 |</span><br><span class="line">| LT Supplies    | JetPack 2000   |      55.00 |</span><br><span class="line">| LT Supplies    | Oil can        |       8.99 |</span><br><span class="line">| LT Supplies    | Safe           |      50.00 |</span><br><span class="line">| LT Supplies    | Sling          |       4.49 |</span><br><span class="line">| LT Supplies    | TNT (1 stick)  |       2.50 |</span><br><span class="line">| LT Supplies    | TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+----------------+------------+</span><br><span class="line">84 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="inner-join-ANSI-SQL语法"><a href="#inner-join-ANSI-SQL语法" class="headerlink" title="inner join(ANSI SQL语法)"></a>inner join(ANSI SQL语法)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_name,prod_name,prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;</span><br><span class="line">+-------------+----------------+------------+</span><br><span class="line">| vend_name   | prod_name      | prod_price |</span><br><span class="line">+-------------+----------------+------------+</span><br><span class="line">| Anvils R Us | .5 ton anvil   |       5.99 |</span><br><span class="line">| Anvils R Us | 1 ton anvil    |       9.99 |</span><br><span class="line">| Anvils R Us | 2 ton anvil    |      14.99 |</span><br><span class="line">| LT Supplies | Fuses          |       3.42 |</span><br><span class="line">| LT Supplies | Oil can        |       8.99 |</span><br><span class="line">| ACME        | Detonator      |      13.00 |</span><br><span class="line">| ACME        | Bird seed      |      10.00 |</span><br><span class="line">| ACME        | Carrots        |       2.50 |</span><br><span class="line">| ACME        | Safe           |      50.00 |</span><br><span class="line">| ACME        | Sling          |       4.49 |</span><br><span class="line">| ACME        | TNT (1 stick)  |       2.50 |</span><br><span class="line">| ACME        | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Jet Set     | JetPack 1000   |      35.00 |</span><br><span class="line">| Jet Set     | JetPack 2000   |      55.00 |</span><br><span class="line">+-------------+----------------+------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>当两个表中vend_id都同时存在并对应的数据</p><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>联结会影响数据库性能，所以使用联结时要尽量避免出现不必要的表联结。</p><h2 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h2><h3 id="不同类型的联结"><a href="#不同类型的联结" class="headerlink" title="不同类型的联结"></a>不同类型的联结</h3><h4 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h4><p>单个表使用别名被联结后获取数据的情况属于自联结</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT p1.prod_id,p1.prod_name FROM products as p1 INNER JOIN products as p2 ON p1.vend_id = p2.vend_id WHERE p2.prod_id = &apos;DTNTR&apos; ORDER BY p1.prod_name;</span><br><span class="line">+---------+----------------+</span><br><span class="line">| prod_id | prod_name      |</span><br><span class="line">+---------+----------------+</span><br><span class="line">| FB      | Bird seed      |</span><br><span class="line">| FC      | Carrots        |</span><br><span class="line">| DTNTR   | Detonator      |</span><br><span class="line">| SAFE    | Safe           |</span><br><span class="line">| SLING   | Sling          |</span><br><span class="line">| TNT1    | TNT (1 stick)  |</span><br><span class="line">| TNT2    | TNT (5 sticks) |</span><br><span class="line">+---------+----------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>自联结的好处是，它可以替代子查询完成相同的操作。并且比子查询性能要高</p><h4 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h4><p>明确联结后检索的列，并且不重复的的情况属于自然联结</p><p>之前的大多数联结案例都属于自然联结</p><h4 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h4><p>外部联结分为做联结和右联结</p><h3 id="使用联结的注意事项"><a href="#使用联结的注意事项" class="headerlink" title="使用联结的注意事项"></a>使用联结的注意事项</h3><p>1.联结的时候，联结类型要考虑清楚</p><p>2.联结条件很重要，所以也需要深思。不提供条件的话会出现笛卡尔集</p><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>组合查询就是将多条sql查询组合后使用。前提是这两条sql语句检索的列必须一致。</p><h3 id="创建组合查询"><a href="#创建组合查询" class="headerlink" title="创建组合查询"></a>创建组合查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,prod_id,prod_price FROM products WHERE prod_price &lt;=5 UNION SELECT vend_id,prod_id,prod_price FROM products WHERE vend_id IN (1001,1002);</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">| vend_id | prod_id | prod_price |</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">|    1003 | FC      |       2.50 |</span><br><span class="line">|    1002 | FU1     |       3.42 |</span><br><span class="line">|    1003 | SLING   |       4.49 |</span><br><span class="line">|    1003 | TNT1    |       2.50 |</span><br><span class="line">|    1001 | ANV01   |       5.99 |</span><br><span class="line">|    1001 | ANV02   |       9.99 |</span><br><span class="line">|    1001 | ANV03   |      14.99 |</span><br><span class="line">|    1002 | OL1     |       8.99 |</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>组合查询使用注意事项</p><ol><li><p>组合查询中SELECT最少为2条</p></li><li><p>组合查询中每条查询语句中检索的列必须相同，顺序可以不一样。数据类型是数据库支持的类型</p></li><li><p>组合查询ORDER by要用在最后.</p></li><li><p>组合查询会自动过滤重复的数据。如果不想被过滤可以使用 union all 如下面的例子</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT vend_id,prod_id,prod_price FROM products WHERE prod_price &lt;=5 UNION ALL SELECT vend_id,prod_id,prod_price FROM products WHERE vend_id IN (1001,1002);</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">| vend_id | prod_id | prod_price |</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">|    1003 | FC      |       2.50 |</span><br><span class="line">|    1002 | FU1     |       3.42 |</span><br><span class="line">|    1003 | SLING   |       4.49 |</span><br><span class="line">|    1003 | TNT1    |       2.50 |</span><br><span class="line">|    1001 | ANV01   |       5.99 |</span><br><span class="line">|    1001 | ANV02   |       9.99 |</span><br><span class="line">|    1001 | ANV03   |      14.99 |</span><br><span class="line">|    1002 | FU1     |       3.42 |</span><br><span class="line">|    1002 | OL1     |       8.99 |</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h2><p>由于本章内容myISAM 引擎不支持中文所以不做笔记介绍</p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="插入完整一行"><a href="#插入完整一行" class="headerlink" title="插入完整一行"></a>插入完整一行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO customers VALUES(null,&apos;Pep E. LaPew&apos;,&apos;100 Main Street&apos;,&apos;Los Angeles&apos;,&apos;CA&apos;,&apos;90046&apos;,&apos;USA&apos;,null,null);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br></pre></td></tr></table></figure><h4 id="提高性能降低insert的优先级"><a href="#提高性能降低insert的优先级" class="headerlink" title="提高性能降低insert的优先级"></a>提高性能降低insert的优先级</h4><p>如果数据检索是最重要的，在insert into 将加入 low_priority可降低insert语句的优先级。这样别的用户的查询语句就有可能被优先执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert low_priority into</span><br></pre></td></tr></table></figure><h3 id="插入多个行"><a href="#插入多个行" class="headerlink" title="插入多个行"></a>插入多个行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO customers(cust_name,cust_address,cust_city,cust_state,cust_zip,cust_country) values(&apos;Pep e. LaPew&apos;,&apos;100 Main Street&apos;,&apos;Los Angeles&apos;,&apos;CA&apos;,&apos;90046&apos;,&apos;USA&apos;),(&apos;M.martian&apos;,&apos;42 Galaxy Way&apos;,&apos;New York&apos;,&apos;Ny&apos;,&apos;11213&apos;,&apos;USA&apos;);</span><br><span class="line">Query OK, 2 rows affected (0.06 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><h3 id="插入检索后的行"><a href="#插入检索后的行" class="headerlink" title="插入检索后的行"></a>插入检索后的行</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(</span><br><span class="line">cust_id,</span><br><span class="line">cust_contact,</span><br><span class="line">cust_email,</span><br><span class="line">cust_name,</span><br><span class="line">cust_address,</span><br><span class="line">cust_city,</span><br><span class="line">cust_country)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">cust_id,</span><br><span class="line">cust_contact,</span><br><span class="line">cust_email,</span><br><span class="line">cust_name,</span><br><span class="line">cust_address,</span><br><span class="line">cust_city,cust_country </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">custnew;</span><br></pre></td></tr></table></figure><h3 id="插入时的注意事项"><a href="#插入时的注意事项" class="headerlink" title="插入时的注意事项"></a>插入时的注意事项</h3><ol><li>插入数据时应该明确指定要插入的列</li></ol><h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE customers SET cust_email = &apos;elmer@fudd.com&apos; WHERE cust_id = 10005;</span><br><span class="line">Query OK, 1 row affected (0.09 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure><h3 id="IGNORE"><a href="#IGNORE" class="headerlink" title="IGNORE"></a>IGNORE</h3><p>如果update更新多行，并且更新中如果一行或多行出现错误时，会取消整个update操作。使用ignore可以忽略错误行完成修改更新。(谨慎使用，个人认为它打破了sql执行时数据的一致性)</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELETE FROM customers Where cust_id = 10006;</span><br><span class="line">Query OK, 1 row affected (0.06 sec)</span><br></pre></td></tr></table></figure><h3 id="删除表内所有数据"><a href="#删除表内所有数据" class="headerlink" title="删除表内所有数据"></a>删除表内所有数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; truncate table custnew1;</span><br><span class="line">Query OK, 0 rows affected (0.24 sec)</span><br></pre></td></tr></table></figure><h3 id="update-和-delete使用注意事项"><a href="#update-和-delete使用注意事项" class="headerlink" title="update 和 delete使用注意事项"></a>update 和 delete使用注意事项</h3><ol><li><p>更新或删除数据时要考虑where条件，除非操作是针对全表内容的</p></li><li><p>更新或删除的where条件，操作前要在SELECT 中查询并确认</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>quartz-初始</title>
      <link href="/MeBlog/2019/09/10/quartz/"/>
      <url>/MeBlog/2019/09/10/quartz/</url>
      
        <content type="html"><![CDATA[<h2 id="quartz-简介"><a href="#quartz-简介" class="headerlink" title="quartz 简介"></a>quartz 简介</h2><h2 id="maven坐标"><a href="#maven坐标" class="headerlink" title="maven坐标"></a>maven坐标</h2><h2 id="quartz-快速入门"><a href="#quartz-快速入门" class="headerlink" title="quartz 快速入门"></a>quartz 快速入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">StdSchedulerFactory stdSchedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();<span class="comment">//创建StdSchedulerFactory工厂</span></span><br><span class="line">Scheduler scheduler = stdSchedulerFactory.getScheduler();</span><br><span class="line"></span><br><span class="line">scheduler.start();</span><br><span class="line"></span><br><span class="line">JobDetail job = newJob(HelloJob.class)</span><br><span class="line">        .withIdentity(<span class="string">"myJob"</span>,<span class="string">"group1"</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Trigger trigger = newTrigger()</span><br><span class="line">        .withIdentity(<span class="string">"myTrigger"</span>,<span class="string">"group1"</span>)</span><br><span class="line">        .startNow()</span><br><span class="line">        <span class="comment">//调度触发执行内容和时间的操作</span></span><br><span class="line">        .withSchedule(simpleSchedule()</span><br><span class="line">            .withIntervalInSeconds(<span class="number">4</span>)</span><br><span class="line">            .repeatForever())</span><br><span class="line">        .build();</span><br><span class="line">scheduler.scheduleJob(job,trigger);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;&#125;<span class="comment">//测试用，防止主线程结束</span></span><br></pre></td></tr></table></figure><h2 id="Quartz-常用接口"><a href="#Quartz-常用接口" class="headerlink" title="Quartz 常用接口"></a>Quartz 常用接口</h2><h3 id="Scheduler-与调度程序交"><a href="#Scheduler-与调度程序交" class="headerlink" title="Scheduler (与调度程序交)"></a>Scheduler (与调度程序交)</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><pre><code>开始：SchedulerFactory 创建后开始结束：Scheduler调用shutdown结束</code></pre><h3 id="Job-调度的内容实现定义"><a href="#Job-调度的内容实现定义" class="headerlink" title="Job (调度的内容实现定义)"></a>Job (调度的内容实现定义)</h3><h3 id="JobDetail-作业实例"><a href="#JobDetail-作业实例" class="headerlink" title="JobDetail (作业实例)"></a>JobDetail (作业实例)</h3><h3 id="Trigger-（触发器）"><a href="#Trigger-（触发器）" class="headerlink" title="Trigger （触发器）"></a>Trigger （触发器）</h3><h4 id="公共属性"><a href="#公共属性" class="headerlink" title="公共属性"></a>公共属性</h4><pre><code>所有类型的trigger都有TriggerKey这个属性，表示trigger的身份；除此之外，trigger还有很多其它的公共属性。这些属性，在构建trigger的时候可以通过TriggerBuilder设置。</code></pre><p>trigger的公共属性有：</p><p>jobKey属性：当trigger触发时被执行的job的身份；</p><p>startTime属性：设置trigger第一次触发的时间；该属性的值是java.util.Date类型，表示某个指定的时间点；有些类型的trigger，会在设置的startTime时立即触发，有些类型的trigger，表示其触发是在startTime之后开始生效。比如，现在是1月份，你设置了一个trigger–“在每个月的第5天执行”，然后你将startTime属性设置为4月1号，则该trigger第一次触发会是在几个月以后了(即4月5号)。</p><p>endTime属性：表示trigger失效的时间点。比如，”每月第5天执行”的trigger，如果其endTime是7月1号，则其最后一次执行时间是6月5号。</p><h4 id="优先级（priority）"><a href="#优先级（priority）" class="headerlink" title="优先级（priority）"></a>优先级（priority）</h4><p>如果你的trigger很多(或者Quartz线程池的工作线程太少)，Quartz可能没有足够的资源同时触发所有的trigger；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性。比如，你有N个trigger需要同时触发，但只有Z个工作线程，优先级最高的Z个trigger会被首先触发。如果没有为trigger设置优先级，trigger使用默认优先级，值为5；priority属性的值可以是任意整数，正数、负数都可以。</p><p>注意：只有同时触发的trigger之间才会比较优先级。10:59触发的trigger总是在11:00触发的trigger之前执行。</p><p>注意：如果trigger是可恢复的，在恢复后再调度时，优先级与原trigger是一样的。</p><h4 id="错过触发描述（misfire-instructions）"><a href="#错过触发描述（misfire-instructions）" class="headerlink" title="错过触发描述（misfire instructions）"></a>错过触发描述（misfire instructions）</h4><p>trigger还有一个重要的属性misfire；如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”，即根据trigger的类型和配置动态调整行为。当scheduler启动的时候，查询所有错过触发(misfire)的持久性trigger。然后根据它们各自的misfire机制更新trigger的信息。当你在项目中使用Quartz时，你应该对各种类型的trigger的misfire机制都比较熟悉，这些misfire机制在JavaDoc中有说明</p><h4 id="Simple-Trigger"><a href="#Simple-Trigger" class="headerlink" title="Simple Trigger"></a>Simple Trigger</h4><h3 id="JobBuilder-用于构建JobDetail"><a href="#JobBuilder-用于构建JobDetail" class="headerlink" title="JobBuilder (用于构建JobDetail)"></a>JobBuilder (用于构建JobDetail)</h3><h3 id="TriggerBuilder-用于构建Trigger"><a href="#TriggerBuilder-用于构建Trigger" class="headerlink" title="TriggerBuilder (用于构建Trigger)"></a>TriggerBuilder (用于构建Trigger)</h3><h3 id="Scheduler-Job-Trigger-三者的调用关系"><a href="#Scheduler-Job-Trigger-三者的调用关系" class="headerlink" title="Scheduler Job Trigger 三者的调用关系"></a>Scheduler Job Trigger 三者的调用关系</h3><p>Scheduler 调度计划，如果想要执行调度，需要将Job和Trigger放入<br>scheduler实例化后，可以启动(start)、暂停(stand-by)、停止(shutdown)注意：scheduler被停止后，除非重新实例化，否则不能重新启动；只有当scheduler启动后，即使处于暂停状态也不行，trigger才会被触发</p><p>Job 用来定义工作内容</p><p>Trigger用来定义调度的触发时间，以及绑定工作组</p><h3 id="JobDataMap的使用"><a href="#JobDataMap的使用" class="headerlink" title="JobDataMap的使用"></a>JobDataMap的使用</h3><p>1.Job类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DumbJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DumbJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> JobExecutionException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      JobKey key = context.getJobDetail().getKey();</span><br><span class="line"></span><br><span class="line">      JobDataMap dataMap = context.getJobDetail().getJobDataMap();</span><br><span class="line"></span><br><span class="line">      String jobSays = dataMap.getString(<span class="string">"jobSays"</span>);</span><br><span class="line">      <span class="keyword">float</span> myFloatValue = dataMap.getFloat(<span class="string">"myFloatValue"</span>);</span><br><span class="line"></span><br><span class="line">      System.err.println(<span class="string">"Instance "</span> + key + <span class="string">" of DumbJob says: "</span> + jobSays + <span class="string">", and val is: "</span> + myFloatValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>2.调度定义时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define the job and tie it to our DumbJob class</span></span><br><span class="line">JobDetail job = newJob(DumbJob.class)</span><br><span class="line">    .withIdentity(<span class="string">"myJob"</span>, <span class="string">"group1"</span>) <span class="comment">// name "myJob", group "group1"</span></span><br><span class="line">    .usingJobData(<span class="string">"jobSays"</span>, <span class="string">"Hello World!"</span>)</span><br><span class="line">    .usingJobData(<span class="string">"myFloatValue"</span>, <span class="number">3.141f</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></p><h4 id="自动填充jobDataMap参数"><a href="#自动填充jobDataMap参数" class="headerlink" title="自动填充jobDataMap参数"></a>自动填充jobDataMap参数</h4><p>只需要修改Job类，在类中添加map相对应的字段提供set方法即可。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DumbJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String jobSays;</span><br><span class="line">    <span class="keyword">float</span> myFloatValue;</span><br><span class="line">    ArrayList state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DumbJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> JobExecutionException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      JobKey key = context.getJobDetail().getKey();</span><br><span class="line"></span><br><span class="line">      JobDataMap dataMap = context.getMergedJobDataMap();  <span class="comment">// Note the difference from the previous example</span></span><br><span class="line"></span><br><span class="line">      state.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">      System.err.println(<span class="string">"Instance "</span> + key + <span class="string">" of DumbJob says: "</span> + jobSays + <span class="string">", and val is: "</span> + myFloatValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobSays</span><span class="params">(String jobSays)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.jobSays = jobSays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyFloatValue</span><span class="params">(<span class="keyword">float</span> myFloatValue)</span> </span>&#123;</span><br><span class="line">      myFloatValue = myFloatValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(ArrayList state)</span> </span>&#123;</span><br><span class="line">      state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="PersistJobDataAfterExecution"><a href="#PersistJobDataAfterExecution" class="headerlink" title="@PersistJobDataAfterExecution"></a>@PersistJobDataAfterExecution</h2><p>由于Job类的创建是由Scheduler上的JobFactory 运行时动态创建的，所以个人猜测框架创作人使用了动态代理的技术。所以Job的成员变量与外界的交互就成为了难题。如何实现呢？答案就是在实现Job的类上加入@PersistJobDataAfterExecution注解，这样JobDataMap中的数据就可以与外界交互了。</p><h2 id="DisallowConcurrentExecution"><a href="#DisallowConcurrentExecution" class="headerlink" title="@DisallowConcurrentExecution"></a>@DisallowConcurrentExecution</h2><pre><code>个人目前还没有使用过，w3cschool的官方文档上是这样介绍的：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@DisallowConcurrentExecution：将该注解加到job类上，告诉Quartz不要并发地执行同一个job定义（这里指特定的job类）的多个实例</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-系统结构</title>
      <link href="/MeBlog/2019/08/27/linux%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
      <url>/MeBlog/2019/08/27/linux%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>简单的说Linux系统可分为 Linux内核 + 应用程序</p><p>对于Linux系统的细致划分，可以分为</p><p>Linux 内核</p><p>系统调用</p><p>库函数</p><p>shell</p><p>应用程序</p><h2 id="内核模式与系统调用"><a href="#内核模式与系统调用" class="headerlink" title="内核模式与系统调用"></a>内核模式与系统调用</h2><h3 id="内核模式"><a href="#内核模式" class="headerlink" title="内核模式"></a>内核模式</h3><p>计算机的硬件资源又系统内核来操控，应用程序要想调用系统硬件资源需要通过访问或调用内核接口来实现指定的功能。<br>这时系统的内核就是操控硬件的基础操作。我们把内核程序的活动称为内核模式，应用程序的活动称为用户模式。</p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>应用程序通过内核接口调用内核程序的过程称为系统调用。</p><p>Linux中的系统调用接口大约有200多种，我们可以通过shell查看Linux下的所有系统调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 2 syscalls</span><br></pre></td></tr></table></figure><p>man 中的参数2表示系统调用，不理解的可通过 man man 查看系统帮助文档.</p><p>系统调用常见的有</p><p>read 文件读取</p><p>write 文件写入</p><p>fork 复制当前进程</p><p>wait 等待某个进程完成</p><p>chdir 改变工作目录</p><p>通过系统调用，Linux用户可以体验到内核封装的好处。使得我们不必关系硬件驱动使用的一些底层细节。我更专注与程序的功能和要实现的目的。</p><h3 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h3><p>库函数是什么，个人认为库函数就是系统调用的更上一层的封装。将系统调用的一些指令结合起来写成函数的形式，以方便调用。就像是C语言中的C标准库一样，有了他们程序开发起来更便捷。</p><p>除了C标准库，Linux还有一些其他的库比如 POSIX等</p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>shell 是一个交互程序，他是为了普通用户通过shell在不需要自己编程的情况下使用系统的一些资源。</p><h3 id="用户程序"><a href="#用户程序" class="headerlink" title="用户程序"></a>用户程序</h3><p>用户程序是基于编程语言开发后的程序，它也是通过其语言调用系统内核功能来使用系统的一些硬件资源。和库函数不同的是1它是面向用户的，2它针对的功能更专一，使用更方便。</p><p>早期由于Linux程序中大部分用户程序是用C编写的，然而Linux系统内核也是由C编写的。所以我觉得我们有必要了解下C中的函数调用与进程空间</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bash-初识</title>
      <link href="/MeBlog/2019/08/26/bash-%E5%88%9D%E8%AF%86/"/>
      <url>/MeBlog/2019/08/26/bash-%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是bash"><a href="#什么是bash" class="headerlink" title="什么是bash"></a>什么是bash</h2><p>简单的说，bash是一个命令解释工具</p><h2 id="命令的语法以及规范"><a href="#命令的语法以及规范" class="headerlink" title="命令的语法以及规范"></a>命令的语法以及规范</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量和java中的变量所表示的含义大致相同，都是用一个引用表示地址值中的数据。</p><p>待验证：bash的变量只能存储文本。</p><p>变量的赋值方式和Java中变量赋值类似。下面列举几个例子，看后自会明白。</p><p>$var=word 注意等号的左右不能留有空格</p><p>$var=’hello word’</p><p>$var=”hello word”<br>上面两种都可以表示文本中包含空格的输入。不同之处在于，双引号中可以掺入变量，系统会放入变量引用的值。而单引号却只能打印所有输入的文本内容，变量引用也会当做文本。</p><p>$v1=word<br>$var=”hello ${v1}test” ${}中放入的变量可以中缺的被标识并识别，如果不使用${} 表达式的含义将会变为引用v1!的变量此时不会输出 hello Wordtest 而是 hello </p><p>$now=<code>date</code> 注意<code></code>中可以使用命令。查看now echo $now 这时会输出时间</p><p>$date=$now 变量之间也可以互相传值</p><p>$read name 这时Linux会等待用户输入，输入完成后会把输入的值赋值给name</p><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><p>bash中的数学计算类似上学时的数学运算，只要吧运算表达式写入$(())中即可</p><p>加法运算 $((3+2))</p><p>减法运算 $((3-2))</p><p>乘法运算 $((3*2))</p><p>除法运算 $((3/2))</p><p>求余运算 $((2%3))</p><p>乘方运算 $((2**3))</p><h3 id="返回代码"><a href="#返回代码" class="headerlink" title="返回代码"></a>返回代码</h3><p>Linux命令执行完后会放回一个值，返回0表示这段命令执行成功<br>$? 可以查看当前命令执行的结果</p><h3 id="；的使用"><a href="#；的使用" class="headerlink" title="；的使用"></a>；的使用</h3><p>命令中使用；可以在一行命令中执行多个命令。如ls;$? 表示打印目录信息并回响命令返回值</p><h3 id="短路与或"><a href="#短路与或" class="headerlink" title="短路与或"></a>短路与或</h3><p>短路与，在多个命令中，后面命令的执行与否取决于之前命令的返回值，当返回值为0时之后的命令才会执行</p><p>如： rm dome.file &amp;&amp; echo “remove dome.file sucess” 当删除过文件dome.file后会输出文本信息，失败后则不输出。</p><p>短路或，短路或正好是短路与的反向解释。当之前的命令失败后后面的命令才会执行，否则不执行</p><p>如：rm dome.file &amp;&amp; echo “remove dome.file fail” 当没有删除文件dome.file后会输出文本信息，否则不会输出任何信息。</p><h2 id="bash-script"><a href="#bash-script" class="headerlink" title="bash script"></a>bash script</h2><h3 id="fist-bash-file"><a href="#fist-bash-file" class="headerlink" title="fist bash file"></a>fist bash file</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">user=`whoami`</span><br><span class="line">echo &quot;Information of $&#123;user&#125; computer&quot; &gt;&gt; log</span><br><span class="line"></span><br><span class="line">lscpu &gt;&gt; log</span><br><span class="line">uname -a &gt;&gt; log</span><br><span class="line">free -h &gt;&gt; log</span><br></pre></td></tr></table></figure><p>这是一个简单的bash脚本，刚刚解释了什么是bash他是一个命令解释器，所以bash脚步就是集多条bash命令的一个文本。<br>这样做的好处是我们可以记录使用命令的逻辑，并多次复用。</p><h3 id="bash中传入参数"><a href="#bash中传入参数" class="headerlink" title="bash中传入参数"></a>bash中传入参数</h3><p>bash 中的参数使用 $0 $1 …表示</p><p>使用例子：</p><p>测试流程 1编辑bashscript 2运行 3显示结果</p><p>1 编辑script<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br></pre></td></tr></table></figure></p><p>2 运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ ./test_arg.bash hello word</span><br></pre></td></tr></table></figure></p><p>3.显示结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./test_arg.bash</span><br><span class="line">hello</span><br><span class="line">word</span><br></pre></td></tr></table></figure></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>个人认为函数是对bash脚本的一次封装，通过内部定义函数可以将命令功能分块包装。从而达到脚本内函数的复用</p><h3 id="无参函数示例"><a href="#无参函数示例" class="headerlink" title="无参函数示例"></a>无参函数示例</h3><p>测试流程  1编写脚本 2运行 3展示结果</p><p>1 编写脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">function meInfo()&#123;</span><br><span class="line">  date &gt;&gt; log</span><br><span class="line">  lscpu &gt;&gt; log</span><br><span class="line">  uname -a &gt;&gt; log</span><br><span class="line">  free -h &gt;&gt; log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">meInfo</span><br></pre></td></tr></table></figure></p><p>2 运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ ./test_function.bash</span><br></pre></td></tr></table></figure><p>3 显示结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ cat log </span><br><span class="line">2019年 08月 26日 星期一 13:52:10 CST</span><br><span class="line">xxxxxxxxxxxxxxxxx</span><br><span class="line">xxxxxxxxxxxxxxxx</span><br><span class="line">xxxxxxxxxxxxxxx</span><br><span class="line">xxxxxxxxxxxxxxxx</span><br><span class="line">xxxxxxxxxxxxx</span><br><span class="line">x</span><br></pre></td></tr></table></figure></p><h4 id="带参函数示例"><a href="#带参函数示例" class="headerlink" title="带参函数示例"></a>带参函数示例</h4><p>测试流程  1编写脚本 2运行 3展示结果</p><p>1.编写脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">function meInfo()&#123;</span><br><span class="line">  date &gt;&gt; $1</span><br><span class="line">  echo &apos;hello&apos; &gt;&gt; $1</span><br><span class="line">  echo &apos;word&apos;  &gt;&gt;  $1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">meInfo melog</span><br><span class="line">meInfo melog2</span><br></pre></td></tr></table></figure></p><p>2 运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ ./test_function.bash</span><br></pre></td></tr></table></figure><p>3 显示结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ cat melog</span><br><span class="line">2019年 08月 26日 星期一 14:14:37 CST</span><br><span class="line">hello</span><br><span class="line">word</span><br><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ cat melog2</span><br><span class="line">2019年 08月 26日 星期一 14:14:37 CST</span><br><span class="line">hello</span><br><span class="line">word</span><br></pre></td></tr></table></figure></p><h4 id="跨脚本函数调用"><a href="#跨脚本函数调用" class="headerlink" title="跨脚本函数调用"></a>跨脚本函数调用</h4><p>首先跨脚本函数调用是基于脚本之上的操作，从此也可以看出函数封装的好处。</p><p>跨脚本函数调用主要使用source关键字</p><p>测试流程 1编写脚本 2 运行 3 展示结果</p><p>1 编写脚本</p><p>test_function.bash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">function meInfo()&#123;</span><br><span class="line">  date &gt;&gt; $1</span><br><span class="line">  echo &apos;hello&apos; &gt;&gt; $1</span><br><span class="line">  echo &apos;word&apos;  &gt;&gt;  $1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">meInfo melog</span><br><span class="line">meInfo melog2</span><br></pre></td></tr></table></figure></p><p>app.bash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">source test_function.bash</span><br><span class="line"></span><br><span class="line">meInfo melog3</span><br><span class="line">meInfo log</span><br></pre></td></tr></table></figure></p><p>2 运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ ./app.bash</span><br></pre></td></tr></table></figure><p>3 展示结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ cat melog melog2 melog3</span><br><span class="line">2019年 08月 26日 星期一 14:30:22 CST</span><br><span class="line">hello</span><br><span class="line">word</span><br><span class="line">2019年 08月 26日 星期一 14:30:22 CST</span><br><span class="line">hello</span><br><span class="line">word</span><br><span class="line">2019年 08月 26日 星期一 14:30:22 CST</span><br><span class="line">hello</span><br><span class="line">word</span><br></pre></td></tr></table></figure><p>可以看到source 引入的test_function.bash 脚本被执行了一遍，注意是整个脚本不单是脚本中的一个函数而是整个脚本。</p><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><p>逻辑判断为的是判断一个函数式运行的真假或一个命令的真假</p><p>案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/my-bash$ test 3 -gt 2 ;echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><p>因为3大于2（-gt表示大于）所以命令的返回值为0</p><h4 id="关于数值的判断符"><a href="#关于数值的判断符" class="headerlink" title="关于数值的判断符"></a>关于数值的判断符</h4><p>大于 -gt<br>小于 -lt<br>等于 -eq<br>不等于 -ne<br>大于等于 -ge<br>小于等于 -le</p><h4 id="关于文本的判断符"><a href="#关于文本的判断符" class="headerlink" title="关于文本的判断符"></a>关于文本的判断符</h4><p>文本相同 =<br>文本不相同 !=<br>文本按字典排序一个文本在另一个文本之前 &gt;<br>文本按字典排序一个文本在另一个文本之后 &lt;</p><h4 id="关于文件判断符"><a href="#关于文件判断符" class="headerlink" title="关于文件判断符"></a>关于文件判断符</h4><p>检查文件是否存在 -e<br>检查文件是否存在并且是普通文件 -f<br>检查目录是否存在 -d<br>检查软连接是否存在 -l<br>检查文件是否可读 -r<br>检查文件是否可写 -w<br>检查文件是否可以执行 -x</p><h4 id="与或非"><a href="#与或非" class="headerlink" title="与或非"></a>与或非</h4><p>&amp;&amp; || !</p><p>注意 &amp;&amp; || ! 不能联合使用</p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>if 选择结构，类似java中的流程控制语句if</p><p>案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">user=`whoami`</span><br><span class="line">if [ $user = &apos;root&apos; ]</span><br><span class="line">then </span><br><span class="line">echo &quot;你是超级用户！&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>需要注意语法格式</p><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p>if else ,类似java中的流程控制语句 if else</p><p>案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">user=`whoami`</span><br><span class="line">if [ $user = &apos;root&apos; ]</span><br><span class="line">then </span><br><span class="line">echo &quot;你是超级用户！&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;你不是超级用户！&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>需要注意语法格式</p><p>if else 嵌套使用，类似java流程控制语句中的if else if else</p><p>案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">user=`whoami`</span><br><span class="line">if [ $user = &apos;root&apos; ]</span><br><span class="line">then </span><br><span class="line">echo &quot;你是超级用户！&quot;</span><br><span class="line">else  if [ $user = &apos;laowang&apos; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;你是老王用户！&quot;</span><br><span class="line">else if [ $user = &apos;spiderbao&apos; ]</span><br><span class="line">then</span><br><span class="line">echo &apos;你是spidermen的朋友spiderbao!&apos;</span><br><span class="line">else</span><br><span class="line">echo &apos;我也不知道你是谁！&apos;</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>格式样式模仿Java的if else if else ，唯一不同处在于结尾fi使用了多少个if就需要添加多少个fi来结尾。毕竟这是一个嵌套语句。</p><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p>case 类似java流程控制语句中的switch</p><p>案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">user=`whoami`</span><br><span class="line"></span><br><span class="line">case $user in</span><br><span class="line">root)</span><br><span class="line">echo &quot;你是超级管理员用户！&quot;</span><br><span class="line">;;</span><br><span class="line">laowang)</span><br><span class="line">echo &quot;你是老王用户！&quot;</span><br><span class="line">;;</span><br><span class="line">spiderbao)</span><br><span class="line">echo &apos;你是spiderbao用户！&apos;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &apos;我也不知道你是谁！&apos;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p><p>需要注意的是 ）中可以填写文本以及通配符<br>通配符</p><ul><li>表示任意个数的任意字符<br>? 表示一个字符的任意字符<br>[] 类似正则表达式中的[]，表示可选范围内的字符，另外[]只占一个字符位 。例如[1-5][a-x] 1a,2b 均匹配</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim篇</title>
      <link href="/MeBlog/2019/08/26/vim%E7%AF%87/"/>
      <url>/MeBlog/2019/08/26/vim%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="vim文本编辑器"><a href="#vim文本编辑器" class="headerlink" title="vim文本编辑器"></a>vim文本编辑器</h2><h3 id="vim常用操作"><a href="#vim常用操作" class="headerlink" title="vim常用操作"></a>vim常用操作</h3><p>​    <img src="http://39.104.171.29/image/1554102941025.png" alt="1554102941025"></p><p>vim是荷兰一位名叫 Bram Moolenaar  的工程师开发并分享的开源编辑器插件</p><p><img src="http://39.104.171.29/image/1554103011275.png" alt="1554103011275"></p><p><img src="http://39.104.171.29/image/1554103333245.png" alt="1554103333245"></p><p><img src="http://39.104.171.29/image/1554103479882.png" alt="1554103479882"></p><p><img src="http://39.104.171.29/image/1554103628208.png" alt="1554103628208"></p><p><img src="http://39.104.171.29/image/1554104114402.png" alt="1554104114402"></p><p>vim区域复制，进入Ctrl+V 选择要复制的区域后 按y复制 p粘贴</p><p><img src="http://39.104.171.29/image/1554104294187.png" alt="1554104294187"></p><p><img src="http://39.104.171.29/image/1554104229157.png" alt="1554104229157"></p><p><img src="http://39.104.171.29/image/1554104607078.png" alt="1554104607078"></p><h3 id="vim使用技巧"><a href="#vim使用技巧" class="headerlink" title="vim使用技巧"></a>vim使用技巧</h3><p><img src="http://39.104.171.29/image/1554105915669.png" alt="1554105915669"></p><p>上面连续行注释中 /表示隔离符 \表示转移符</p><p>个人用户下编辑添加 .vimrc 文件可以保存一些关于vim的配置和快捷键的使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ssh协议</title>
      <link href="/MeBlog/2019/08/23/ssh%E5%8D%8F%E8%AE%AE/"/>
      <url>/MeBlog/2019/08/23/ssh%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Http-headers"><a href="#Http-headers" class="headerlink" title="Http headers"></a>Http headers</h2><h3 id="if-modified-since"><a href="#if-modified-since" class="headerlink" title="if-modified-since"></a>if-modified-since</h3><p>首先他是一个条件式头部信息</p><p>个人认为它用来标识修改的时间，时间指的是上次响应头中的last-modified的时间</p><h3 id="if-match"><a href="#if-match" class="headerlink" title="if-match"></a>if-match</h3><p>首先它是一个条件式头部信息</p><p>GET方式的请求中使用它后，服务器会验证ETag是否匹配，如果不匹配则不返回数据</p><p>PUT等不安全的方法判断同上，不同之处在于不能上传数据或修改数据</p><p>它们比较的算法默认为强比较算法，也就是对比每一个比特位，都相同时认为文件或信息是相同的。如果在ETag前加入“w/”那么比较的算法就会由强比较改为相对宽松的算法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-权限整合篇</title>
      <link href="/MeBlog/2019/08/05/Linux-%E6%9D%83%E9%99%90%E6%95%B4%E5%90%88%E7%AF%87/"/>
      <url>/MeBlog/2019/08/05/Linux-%E6%9D%83%E9%99%90%E6%95%B4%E5%90%88%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="基本权限管理"><a href="#基本权限管理" class="headerlink" title="基本权限管理"></a>基本权限管理</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>基本权限管理使用 chmod 命令</p><p>如给一个文件设置属主，所属组，其他的权限如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/桌面$ touch test.txt</span><br><span class="line">spiderbao@spiderbao-CW65S:~/桌面$ chmod 774 test.txt </span><br><span class="line">spiderbao@spiderbao-CW65S:~/桌面$ ll test.txt </span><br><span class="line">-rwxrwxr-- 1 spiderbao spiderbao 0 8月   5 16:29 test.txt*</span><br></pre></td></tr></table></figure></p><p>给文件夹赋予权限同上所示，上面使用数字的方式给权限赋值，4表示读 ，2表示修改，1表示执行</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>chown 命令可以修改文件的所有者以及所属组</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#修改文件的所属组</span><br><span class="line">spiderbao@spiderbao-CW65S:~/桌面$ ll test.txt </span><br><span class="line">-rwxrwxr-- 1 spiderbao spiderbao 0 8月   5 16:29 test.txt*</span><br><span class="line">spiderbao@spiderbao-CW65S:~/桌面$ sudo chown spiderbao.ftp test.txt </span><br><span class="line">spiderbao@spiderbao-CW65S:~/桌面$ ll test.txt </span><br><span class="line">-rwxrwxr-- 1 spiderbao ftp 0 8月   5 16:29 test.txt*</span><br></pre></td></tr></table></figure><h2 id="umask默认权限管理"><a href="#umask默认权限管理" class="headerlink" title="umask默认权限管理"></a>umask默认权限管理</h2><p>查看系统默认umask<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/桌面$ umask -S</span><br><span class="line">u=rwx,g=rx,o=rx</span><br><span class="line"></span><br><span class="line">spiderbao@spiderbao-CW65S:~/桌面$ umask </span><br><span class="line">0022</span><br></pre></td></tr></table></figure></p><p>解析 umaks 0022 代表什么</p><p>其中</p><p>第一位 特殊权限位，如果是1表示文件具有SBIT权限，2表示具有SetGID权限，4表示具有SetUID权限，0表示站位符</p><p>第二位 所属主位，4 （read），2 （write），1（execute）</p><p>第三位 所属组位，4 （read），2 （write），1（execute）</p><p>第四位 其他位，4 （read），2 （write），1（execute）</p><p>默认权限算法</p><p>文件夹的默认最大权限 777<br>文件的最大默认权限 666</p><p>文件的默认值是根据 文件的最大权限值与umask设置的值进行或得出的。</p><p>666 表示 rw-rw-rw- 022 表示 —-w–w- 进行或运算后得 rw r r 所以这个就是系统中创建文件后的默认权限值</p><h2 id="ACL-权限管理"><a href="#ACL-权限管理" class="headerlink" title="ACL 权限管理"></a>ACL 权限管理</h2><p>ACL 的全称是 Access Control List (访问控制列表)</p><p>它可以针对文件设置除基本权限外的 r w x的权限</p><p>举例，现在有一个文件test 是开发小组1共同需要操作所以小组 test拥有 rw的权限，同时文件的创建者拥有rw权限，其他人无权查看test文件的内容，有一天来了以为实习生，由于他刚来不久所以需要拥有test的r权限但是不能拥有w权限这时改基本权限又不太现实。那现在怎么办呢？看看接下来我用ACL权限是如何解决的吧</p><pre><code class="Linux"></code></pre><h2 id="SetUID、SetGID、SBIT-权限管理"><a href="#SetUID、SetGID、SBIT-权限管理" class="headerlink" title="SetUID、SetGID、SBIT 权限管理"></a>SetUID、SetGID、SBIT 权限管理</h2><h2 id="chatter-权限"><a href="#chatter-权限" class="headerlink" title="chatter 权限"></a>chatter 权限</h2><h2 id="sudo-权限"><a href="#sudo-权限" class="headerlink" title="sudo 权限"></a>sudo 权限</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu add-apt-repository</title>
      <link href="/MeBlog/2019/07/03/Ubuntu-add-apt-repository/"/>
      <url>/MeBlog/2019/07/03/Ubuntu-add-apt-repository/</url>
      
        <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><h3 id="来自于Ubuntu自带文档上的介绍："><a href="#来自于Ubuntu自带文档上的介绍：" class="headerlink" title="来自于Ubuntu自带文档上的介绍："></a>来自于Ubuntu自带文档上的介绍：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository is a script which adds an external APT repository to</span><br><span class="line">      either  /etc/apt/sources.list  or a file in /etc/apt/sources.list.d/ or</span><br><span class="line">      removes an already existing repository.</span><br><span class="line"></span><br><span class="line">      The options supported by add-apt-repository are:</span><br><span class="line"></span><br><span class="line">      -h, --help Show help message and exit</span><br><span class="line"></span><br><span class="line">      -m, --massive-debug Print a lot of debug  information  to  the  command</span><br><span class="line">      line</span><br><span class="line"></span><br><span class="line">      -r, --remove Remove the specified repository</span><br><span class="line"></span><br><span class="line">      -y, --yes Assume yes to all queries</span><br><span class="line"></span><br><span class="line">      -u, --update After adding the repository, update the package cache with</span><br><span class="line">      packages from this repository (avoids need to apt-get update)</span><br><span class="line"></span><br><span class="line">      -k, --keyserver Use a custom keyserver URL instead of the default</span><br><span class="line"></span><br><span class="line">      -s, --enable-source Allow downloading of the source packages  from  the</span><br><span class="line">      repository</span><br></pre></td></tr></table></figure><h3 id="来自百度百科的介绍："><a href="#来自百度百科的介绍：" class="headerlink" title="来自百度百科的介绍："></a>来自百度百科的介绍：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository的提供方python-software-properties ，平台是Ubuntu Karmic (9.10)。</span><br><span class="line">在 Ubuntu Karmic (9.10) 我们可以使用 &quot;add-apt-repository&quot; 脚本添加 ppa 到当前的库中并且自动导入公钥.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-wget</title>
      <link href="/MeBlog/2019/07/03/wget/"/>
      <url>/MeBlog/2019/07/03/wget/</url>
      
        <content type="html"><![CDATA[<p>简介：</p><p>来自 <a href="https://www.jianshu.com/p/2e2ba8ecc22a" target="_blank" rel="noopener">https://www.jianshu.com/p/2e2ba8ecc22a</a> 用户的摘录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget是linux上的命令行的下载工具。这是一个GPL许可证下的自由软件。wget支持HTTP和FTP协议，支持代理服务器和断点续传功能，能够自动递归远程主机的目录，找到合乎条件的文件并将其下载到本地硬盘上；如果必要，wget将恰当地转换页面中的超级连接以在本地生成可浏览的镜像。由于没有交互式界面，wget可在后台运行，截获并忽略HANGUP信号，因此在用户推出登录以后，仍可继续运行。通常，wget用于成批量地下载Internet网站上的文件，或制作远程网站的镜像。</span><br><span class="line"></span><br><span class="line">作者：JeffYU</span><br><span class="line">链接：https://www.jianshu.com/p/2e2ba8ecc22a</span><br><span class="line">来源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webgl中文网学习笔记</title>
      <link href="/MeBlog/2019/07/03/webgl%E4%B8%AD%E6%96%87%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/MeBlog/2019/07/03/webgl%E4%B8%AD%E6%96%87%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="chapter1："><a href="#chapter1：" class="headerlink" title="chapter1："></a>chapter1：</h2><h3 id="what-is-Three-js"><a href="#what-is-Three-js" class="headerlink" title="what is Three.js?"></a>what is Three.js?</h3><p>什么是threejs，很简单，你将它理解成three + js就可以了。three表示3D的意思，js表示javascript的意思。那么合起来，three.js就是使用javascript 来写3D程序的意思。</p><p>Javascript是运行在网页端的脚本语言，那么毫无疑问Three.js也是运行在浏览器上的。</p><p>看到这里，也许你就开始有很多疑问了，那么让我来猜猜你的疑问吧。</p><p>1、javascript能写高效率的3D程序吗？<br>    能。技术在进步，几年前也许这是不行，写3D程序，最好是用c++，这样才能保证效率，但是现在，世界改变了。javascript的计算能力因为google的V8引 擎得到了迅猛的增强，做3D程序，做服务器都没有问题。如果你对服务器感兴趣，你可以看看nodejs，当然，不是现在。现在，你最好保持热情，将Three.js学精深，在以后的工作学习中做出 更大的成绩。</p><h3 id="Three-js-where-come-from"><a href="#Three-js-where-come-from" class="headerlink" title="Three.js where come from?"></a>Three.js where come from?</h3><p>它源自github的一个开源项目.</p><p>先去下载代码，它的地址是： <a href="https://github.com/mrdoob/three.js。" target="_blank" rel="noopener">https://github.com/mrdoob/three.js。</a> 如图所示</p><p><img src="http://www.hewebgl.com/attached/image/20130513/20130513004719_893.png" alt></p><p>analysis of source directory structur?</p><p>要了解事物的真相，就要解析到它的深处去，我们来看看Three.js的源目录结果。用解压软件解开刚才的源码包，各个目录如下所示：</p><p><img src="http://www.hewebgl.com/attached/image/20130513/20130513004728_437.png" alt></p><p>Build目录：包含两个文件，three.js 和three.min.js 。这是three.js最终被引用的文件。一个已经压缩，一个没有压缩的js文件。</p><p>Docs目录：这里是three.js的帮助文档，里面是各个函数的api，可惜并没有详细的解释。试图用这些文档来学会three.js是不可能的。</p><p>Editor目录：一个类似3D-max的简单编辑程序，它能创建一些三维物体。</p><p>Examples目录：一些很有趣的例子demo，可惜没有文档介绍。对图像学理解不深入的同学，学习成本非常高。</p><p>Src目录：源代码目录，里面是所有源代码。</p><p>Test目录：一些测试代码，基本没用。</p><p>Utils目录：存放一些脚本，python文件的工具目录。例如将3D-Max格式的模型转换为three.js特有的json模型。</p><p>.gitignore文件：git工具的过滤规则文件，没有用。</p><p>CONTRIBUTING.md文件：一个怎么报bug，怎么获得帮助的说明文档。</p><p>LICENSE文件：版权信息。</p><p>README.md文件：介绍three.js的一个文件，里面还包含了各个版本的更新内容列表。</p><h3 id="examples-one"><a href="#examples-one" class="headerlink" title="examples one"></a>examples one</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">    &lt;style&gt;canvas &#123; <span class="attr">width</span>: <span class="number">100</span>%; height: <span class="number">100</span>% &#125;&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/three.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>在chrome浏览器中 开发者工具中的console中输入 THREE.REVISION 控制台上会输出相应的版本信息。</p><h2 id="chapter2："><a href="#chapter2：" class="headerlink" title="chapter2："></a>chapter2：</h2><h3 id="three-component"><a href="#three-component" class="headerlink" title="three component"></a>three component</h3><p>在Three.js中，要渲染物体到网页中，我们需要3个组建：场景（scene）、相机（camera）和渲染器（renderer）。有了这三样东西，才能将物体渲染到网页中去。</p><p>记住关建语句：有了这三样东西，我们才能够使用相机将场景渲染到网页上去。</p><p>创建这三要素的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();  <span class="comment">// 场景</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">75</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span>);<span class="comment">// 透视相机</span></span><br><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();   <span class="comment">// 渲染器</span></span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);    <span class="comment">// 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement);</span><br></pre></td></tr></table></figure><p>在Threejs中场景就只有一种，用THREE.Scene来表示，要构件一个场景也很简单，只要new一个对象就可以了，代码如下：</p><p>var scene = new THREE.Scene();</p><p>场景是所有物体的容器，如果要显示一个苹果，就需要将苹果对象加入场景中。</p><h4 id="camera"><a href="#camera" class="headerlink" title="camera"></a>camera</h4><p>另一个组建是相机，相机决定了场景中那个角度的景色会显示出来。相机就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。</p><p>场景只有一种，但是相机却又很多种。和现实中一样，不同的相机确定了呈相的各个方面。比如有的相机适合人像，有的相机适合风景，专业的摄影师根据实际用途不一样，选择不同的相机。对程序员来说，只要设置不同的相机参数，就能够让相机产生不一样的效果。</p><p>在Threejs中有多种相机，这里介绍两种，它们是：</p><p>透视相机（THREE.PerspectiveCamera）、这里我们使用一个透视相机，透视相机的参数很多，这里先不详细讲解。后面关于相机的那一章，我们会花大力气来讲。定义一个相机的代码如下所示：（已经迫不及待想看看相机的参数了，点这里）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">75</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4 id="renderer"><a href="#renderer" class="headerlink" title="renderer"></a>renderer</h4><p>最后一步就是设置渲染器，渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制。这里我们定义了一个WebRenderer渲染器，代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement);</span><br></pre></td></tr></table></figure><p>注意，渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的，所以这里的appendChild表示将这个domElement挂接在body下面，这样渲染的结果就能够在页面中显示了。</p><h4 id="scene-add-object"><a href="#scene-add-object" class="headerlink" title="scene add object"></a>scene add object</h4><p>那现在，我们将一个物体添加到场景中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.CubeGeometry(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); </span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(geometry, material); </span><br><span class="line">scene.add(cube);</span><br></pre></td></tr></table></figure><p>代码中出现了THREE.CubeGeometry，THREE.CubeGeometry是什么东东，他是一个几何体，几何体由什么组成，已经不是本课的主要内容了，后面的课程我们会详细的学到。不过这里你只需要知道CubeGeometry是一个正方体或者长方体，究竟是什么，由它的3个参数所决定，cubeGeometry的原型如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CubeGeometry(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materials, sides);</span><br></pre></td></tr></table></figure><p>width：立方体x轴的长度</p><p>height：立方体y轴的长度</p><p>depth：立方体z轴的深度，也就是长度</p><p>想一想大家就明白，以上3个参数就能够确定一个立方体。</p><p>剩下的几个参数就要费解和复杂一些了，不过后面我们会自己来写一个立方体，到时候，你会更明白这些参数的意义，这里你可以将这些参数省略。</p><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><p>终于到了最后一步，这一步做完后，就可以该干嘛干嘛去了。</p><p>渲染应该使用渲染器，结合相机和场景来得到结果画面。实现这个功能的函数是</p><p>renderer.render(scene, camera);</p><p>渲染函数的原型如下：</p><p>render( scene, camera, renderTarget, forceClear )</p><p>各个参数的意义是：</p><p>scene：前面定义的场景</p><p>camera：前面定义的相机</p><p>renderTarget：渲染的目标，默认是渲染到前面定义的render变量中</p><p>forceClear：每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。</p><h3 id="loop-render"><a href="#loop-render" class="headerlink" title="loop render"></a>loop render</h3><p>渲染有两种方式：实时渲染和离线渲染 。</p><p>先看看离线渲染，想想《西游降魔篇》中最后的佛主，他肯定不是真的，是电脑渲染出来的，其画面质量是很高的，它是事先渲染好一帧一帧的图片，然后再把图片拼接成电影的。这就是离线渲染。如果不事先处理好一帧一帧的图片，那么电影播放得会很卡。CPU和GPU根本没有能力在播放的时候渲染出这种高质量的图片。</p><p>实时渲染：就是需要不停的对画面进行渲染，即使画面中什么也没有改变，也需要重新渲染。下面就是一个渲染循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cube.rotation.x += <span class="number">0.1</span>;</span><br><span class="line">    cube.rotation.y += <span class="number">0.1</span>;</span><br><span class="line">    renderer.render(scene, camera);</span><br><span class="line">    requestAnimationFrame(render);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中一个重要的函数是requestAnimationFrame，这个函数就是让浏览器去执行一次参数中的函数，这样通过上面render中调用requestAnimationFrame()函数，requestAnimationFrame()函数又让rander()再执行一次，就形成了我们通常所说的游戏循环了。</p><h3 id="the-relationship-between-scene-、-camera-、render"><a href="#the-relationship-between-scene-、-camera-、render" class="headerlink" title="the relationship between scene 、 camera 、render"></a>the relationship between scene 、 camera 、render</h3><p>Three.js中的场景是一个物体的容器，开发者可以将需要的角色放入场景中，例如苹果，葡萄。同时，角色自身也管理着其在场景中的位置。</p><p>相机的作用就是面对场景，在场景中取一个合适的景，把它拍下来。</p><p>渲染器的作用就是将相机拍摄下来的图片，放到浏览器中去显示。他们三者的关系如下图所示：</p><p><img src="http://www.hewebgl.com/attached/image/20130810/20130810150021_257.jpg" alt></p><h2 id="chapter3-1"><a href="#chapter3-1" class="headerlink" title="chapter3.1"></a>chapter3.1</h2><h3 id="composition-of-the-3d-World"><a href="#composition-of-the-3d-World" class="headerlink" title="composition of the 3d World"></a>composition of the 3d World</h3><p>在计算机世界里，3D世界是由点组成，两个点能够组成一条直线，三个不在一条直线上的点就能够组成一个三角形面，无数三角形面就能够组成各种形状的物体，如下图：</p><p><img src="http://www.hewebgl.com/attached/image/20130810/20130810194940_829.gif" alt></p><p>我们通常把这种网格模型叫做Mesh模型。给物体贴上皮肤，或者专业点就叫做纹理，那么这个物体就活灵活现了。最后无数的物体就组成了我们的3D世界。</p><p>那么3D世界的组成，是否真的这样简单？是的，从编程的角度，目前为此，你只需要知道这些。下一节，我们从点说起。</p><h3 id="dot"><a href="#dot" class="headerlink" title="dot"></a>dot</h3><p>在三维空间中的某一个点可以用一个坐标点来表示。一个坐标点由x,y,z三个分量构成。在three.js中，点可以在右手坐标系中表示：</p><p>空间几何中，点可以用一个向量来表示，在Three.js中也是用一个向量来表示的，代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">THREE.Vector3 = <span class="function"><span class="keyword">function</span> (<span class="params"> x, y, z </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.x = x || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.y = y || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.z = z || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们来分析这段代码：前面我们已经知道了THREE是Three.js引擎的一个全局变量。只要你想用它，就可以在任何地方用它。有点充气娃娃的意思，不需要你同意，你想用就用吧。</p><p>那么THREE.Vector3呢，就是表示Vector3是定义在THREE下面的一个类。以后要用Vector3，就必须要加THREE前缀。当然Three.js的设计者，也可以不加THREE这个前缀，但是他们预见到，Three.js引擎中会有很多类型，最好给这些类型加一个前缀，以免与开发者的代码产生冲突。</p><p>THREE.Vector3被赋值为一个函数。这个函数有3个参数，分别代表x坐标，y坐标和z坐标的分量。函数体内的代码将他们分别赋值给成员变量x，y，z。看看上面的代码，中间使用了一个“||”（或）运算符，就是当x=null或者undefine时，this.x的值应该取0。</p><h3 id="dot-operaction"><a href="#dot-operaction" class="headerlink" title="dot operaction"></a>dot operaction</h3><p>在3D世界中点可以用THREE.Vector3D来表示。对应源码为/src/math/Vector3.js（注意：源码所在的位置，可能不同版本不一样，请自己搜索Vector3关键词来确定）。在您继续学习之前，你可以打开该文件浏览一下，推荐使用WebStorm，如果没有，你也可以用NotePad++。</p><p>现在来看看怎么定义个点，假设有一个点x=4，y=8，z=9。你可以这样定义它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point1 = <span class="keyword">new</span> THREE.Vecotr3(<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>另外你也可以使用set方法，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point1 = <span class="keyword">new</span> THREE.Vector3();</span><br><span class="line">point1.set(<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><h2 id="chapter3-2"><a href="#chapter3-2" class="headerlink" title="chapter3.2"></a>chapter3.2</h2><h3 id="coordinate"><a href="#coordinate" class="headerlink" title="coordinate"></a>coordinate</h3><p>我们下面会学习使用直线画一个网格出来，为了更好的理解这个网格在空间中的位置，我们是时候，讲一讲空间坐标系了。</p><h3 id="right-handed-cartesian-coordinate"><a href="#right-handed-cartesian-coordinate" class="headerlink" title="right handed cartesian coordinate"></a>right handed cartesian coordinate</h3><p>Threejs使用的是右手坐标系，这源于opengl默认情况下，也是右手坐标系。下面是右手坐标系的图例，如果对这个概念不理解，可以百度一下，我保证你伸出手比划的那一瞬间你就明白了，如果不明白请给作者留言，我会尽快补上关于坐标系的知识。</p><p><img src="http://www.hewebgl.com/attached/image/20130515/20130515134934_11.jpg" alt></p><p>图中右边那个手对应的坐标系，就是右手坐标系。在Threejs中，坐标和右边的坐标完全一样。x轴正方向向右，y轴正方向向上，z轴由屏幕从里向外。</p><h3 id="line"><a href="#line" class="headerlink" title="line"></a>line</h3><p>在Threejs中，一条线由点，材质和颜色组成。</p><p>点由THREE.Vector3表示，Threejs中没有提供单独画点的函数，它必须被放到一个THREE.Geometry形状中，这个结构中包含一个数组vertices，这个vertices就是存放无数的点（THREE.Vector3）的数组。</p><p>为了绘制一条直线，首先我们需要定义两个点，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> THREE.Vector3( <span class="number">-100</span>, <span class="number">0</span>, <span class="number">100</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> THREE.Vector3(  <span class="number">100</span>, <span class="number">0</span>, <span class="number">-100</span> );</span><br></pre></td></tr></table></figure><p>请大家思考一下，这两个点在坐标系的什么位置，然后我们声明一个THREE.Geometry，并把点加进入，代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line"></span><br><span class="line">geometry.vertices.push(p1);</span><br><span class="line"></span><br><span class="line">geometry.vertices.push(p2);</span><br></pre></td></tr></table></figure><p>geometry.vertices的能够使用push方法，是因为geometry.vertices是一个数组。这样geometry 中就有了2个点了。</p><p>然后我们需要给线加一种材质，可以使用专为线准备的材质，THREE.LineBasicMaterial。</p><p>最终我们通过THREE.Line绘制了一条线，如下代码所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="keyword">new</span> THREE.Line( geometry, material, THREE.LinePieces );</span><br></pre></td></tr></table></figure><p>ok，line就是我们要的线条了。</p><h2 id="chapter4"><a href="#chapter4" class="headerlink" title="chapter4"></a>chapter4</h2><h3 id="loop-render-1"><a href="#loop-render-1" class="headerlink" title="loop render"></a>loop render</h3><p>物体运动还有一个关键点，就是要渲染物体运动的每一个过程，让它显示给观众。渲染的时候，我们调用的是渲染器的render() 函数。代码如下：</p><p>renderer.render( scene, camera );</p><p>如果我们改变了物体的位置或者颜色之类的属性，就必须重新调用render()函数，才能够将新的场景绘制到浏览器中去。不然浏览器是不会自动刷新场景的。</p><p>如果不断的改变物体的颜色，那么就需要不断的绘制新的场景，所以我们最好的方式，是让画面执行一个循环，不断的调用render来重绘，这个循环就是渲染循环，在游戏中，也叫游戏循环。</p><p>为了实现循环，我们需要javascript的一个特殊函数，这个函数是requestAnimationFrame。</p><p>调用requestAnimationFrame函数，传递一个callback参数，则在下一个动画帧时，会调用callback这个函数。</p><p>于是，我们的游戏循环会这样写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    render();</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame( animate );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会不断的执行animate这个函数。也就是不断的执行render()函数。在render()函数中不断的改变物体或者摄像机的位置，并渲染它们，就能够实现动画了。</p><h3 id="Stats"><a href="#Stats" class="headerlink" title="Stats"></a>Stats</h3><p>关于性能：测试一个程序，性能上是否有瓶颈，在3D世界里，经常使用帧数的概念，首先我们来定义一下帧数的意义。</p><p>帧数：图形处理器每秒钟能够刷新几次，通常用fps（Frames Per Second）来表示。如下是每秒钟59次刷新的应用：</p><p><img src="http://www.hewebgl.com/attached/image/20130515/20130515140758_436.png" alt></p><p>当物体在快速运动时,当人眼所看到的影像消失后，人眼仍能继续保留其影像1/24秒左右的图像，这种现象被称为视觉暂留现象。是人眼具有的一种性质。人眼观看物体时，成像于视网膜上，并由视神经输入人脑，感觉到物体的像。一帧一帧的图像进入人脑，人脑就会将这些图像给连接起来，形成动画。</p><p>毫无疑问，帧数越高，画面的感觉就会越好。所以大多数游戏都会有超过30的FPS。为了监视FPS，看看你的程序哪里占用了很多的CPU时间，就需要学习一下性能监视器。</p><p>在Three.js中，性能由一个性能监视器来管理，它的介绍在<a href="https://github.com/mrdoob/stats.js" target="_blank" rel="noopener">https://github.com/mrdoob/stats.js</a> 可以看到。性能监视器的截图如下所示:</p><p><img src="http://www.hewebgl.com/attached/image/20130515/20130515140815_493.png" alt></p><p>其中FPS表示：上一秒的帧数，这个值越大越好，一般都为60左右。点击上面的图，就会变成下面的另一个视图。</p><p><img src="http://www.hewebgl.com/attached/image/20130515/20130515140824_632.png" alt></p><p>MS表示渲染一帧需要的毫秒数，这个数字是越小越好。再次点击又可以回到FPS视图中。</p><h3 id="性能监视器Stats的使用"><a href="#性能监视器Stats的使用" class="headerlink" title="性能监视器Stats的使用"></a>性能监视器Stats的使用</h3><p>在Three.js中，性能监视器被封装在一个类中，这个类叫做Stats，下面是一段伪代码，表示Stats的使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stats = <span class="keyword">new</span> Stats();</span><br><span class="line">stats.setMode(<span class="number">1</span>); <span class="comment">// 0: fps, 1: ms</span></span><br><span class="line"><span class="comment">// 将stats的界面对应左上角</span></span><br><span class="line">stats.domElement.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">stats.domElement.style.left = <span class="string">'0px'</span>;</span><br><span class="line">stats.domElement.style.top = <span class="string">'0px'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild( stats.domElement );</span><br><span class="line">setInterval( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    stats.begin();</span><br><span class="line">    <span class="comment">// 你的每一帧的代码</span></span><br><span class="line">    stats.end();</span><br><span class="line">&#125;, <span class="number">1000</span> / <span class="number">60</span> );</span><br></pre></td></tr></table></figure><p>你现在可以自己写一段代码，来验证一下，你的程序的帧数了。</p><p>Stats到底做了什么事情呢？我们来分析一下。</p><h4 id="1、setMode函数"><a href="#1、setMode函数" class="headerlink" title="1、setMode函数"></a>1、setMode函数</h4><p>参数为0的时候，表示显示的是FPS界面，参数为1的时候，表示显示的是MS界面。</p><h4 id="2、stats的domElement"><a href="#2、stats的domElement" class="headerlink" title="2、stats的domElement"></a>2、stats的domElement</h4><p>stats的domElement表示绘制的目的地（DOM），波形图就绘制在这上面。</p><h4 id="3、stats的begin函数"><a href="#3、stats的begin函数" class="headerlink" title="3、stats的begin函数"></a>3、stats的begin函数</h4><p>begin，在你要测试的代码前面调用begin函数，在你代码执行完后调用end()函数，这样就能够统计出这段代码执行的平均帧数了。</p><p>封装后的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initStats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//监视器</span></span><br><span class="line">    stats = <span class="keyword">new</span> Stats();</span><br><span class="line">    stats.domElement.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">    stats.domElement.style.left = <span class="string">'0px'</span>;</span><br><span class="line">    stats.domElement.style.top = <span class="string">'0px'</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'canvas-frame'</span>).appendChild(stats.domElement);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在需要监视的代码块中使用方法 stats.update();即可</span><br></pre></td></tr></table></figure><h3 id="Tween-engine"><a href="#Tween-engine" class="headerlink" title="Tween engine"></a>Tween engine</h3><p>上面介绍了通过移动相机和移动物体来产生动画的效果。使用的方法是在渲染循环里去移动相机或者物体的位置。如果动画稍微复杂一些，这种方式实现起来就比较麻烦一些了。</p><p>为了使程序编写更容易一些，我们可以使用动画引擎来实现动画效果。和three.js紧密结合的动画引擎是Tween.js,你可以再<a href="https://github.com/sole下载。" target="_blank" rel="noopener">https://github.com/sole下载。</a></p><p>对于快速构件动画来说，Tween.js是一个容易上手的工具</p><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><p> 1 在head中引入 <-script src="../js/tween.min.js" data-ke-src="../js/tween.min.js">&lt;-/script&gt;</-script></p><p> 2 第二步，就是构件一个Tween对象，对Tween进行初始化，本例的代码是:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTween</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> TWEEN.Tween( mesh.position)</span><br><span class="line">            .to( &#123; <span class="attr">x</span>: <span class="number">-400</span> &#125;, <span class="number">3000</span> ).repeat( <span class="literal">Infinity</span> ).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TWEEN.Tween的构造函数接受的是要改变属性的对象，这里传入的是mesh的位置。Tween的任何一个函数返回的都是自身，所以可以用串联的方式直接调用各个函数。</p><p>to函数，接受两个参数，第一个参数是一个集合，里面存放的键值对，键x表示mesh.position的x属性，值-400表示，动画结束的时候需要移动到的位置。第二个参数，是完成动画需要的时间，这里是3000ms。</p><p>repeat( Infinity )表示重复无穷次，也可以接受一个整形数值，例如5次。</p><p>Start表示开始动画，默认情况下是匀速的将mesh.position.x移动到-400的位置。</p><p>3 需要在渲染函数中去不断的更新Tween，这样才能够让mesh.position.x移动位置:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    renderer.render(scene, camera);</span><br><span class="line">    requestAnimationFrame(animation);</span><br><span class="line">    stats.update();</span><br><span class="line">    TWEEN.update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的TWEEN.update()完成了让动画动起来到目标。如果不调用这个函数场景就不能动起来了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webGlDay01</title>
      <link href="/MeBlog/2019/06/27/webGLDay01/"/>
      <url>/MeBlog/2019/06/27/webGLDay01/</url>
      
        <content type="html"><![CDATA[<h2 id="WebGL-简介"><a href="#WebGL-简介" class="headerlink" title="WebGL 简介"></a>WebGL 简介</h2><p>webgl是一项可以在浏览器中流畅展示3D模型和场景的一种技术。<br>它使用JavaScript作为编程语言，调用浏览器支持的3D绘制函数，来实现3D模型和场景的展现。</p><h2 id="为什么浏览器可以实现3D绘制"><a href="#为什么浏览器可以实现3D绘制" class="headerlink" title="为什么浏览器可以实现3D绘制"></a>为什么浏览器可以实现3D绘制</h2><p>因为浏览器实现了opengl es的规范，这套规范可以直接使用指令操作显卡，使显卡渲染3D世界，直接反应到浏览器中。</p><p>操作流程： JavaScript ——&gt; opengl es ——&gt; 显卡</p><h2 id="webgl可以做什么"><a href="#webgl可以做什么" class="headerlink" title="webgl可以做什么"></a>webgl可以做什么</h2><p>只要涉及到3D都有webgl的用武之地。比如游戏、家居、城市地图</p><h2 id="webgl之three-js"><a href="#webgl之three-js" class="headerlink" title="webgl之three.js"></a>webgl之three.js</h2><h3 id="three-js是什么"><a href="#three-js是什么" class="headerlink" title="three.js是什么"></a>three.js是什么</h3><p>three.js是一个封装好的webgl库，使用它可以更便捷的使用webgl.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="/MeBlog/2019/06/27/maven/"/>
      <url>/MeBlog/2019/06/27/maven/</url>
      
        <content type="html"><![CDATA[<h2 id="maven介绍"><a href="#maven介绍" class="headerlink" title="maven介绍"></a>maven介绍</h2><h3 id="什么是maven"><a href="#什么是maven" class="headerlink" title="什么是maven"></a>什么是maven</h3><pre><code>Maven 的正确发音是[ˈmevən],而不是“马瘟”以及其他什么瘟。Maven 在美国是一个口语化的词语,代表专家、内行的意思。maven 是一个项目管理工具,它包含了一个项目对象模型（pom:project object model）一组标准集合,一个项目生命周期（project Lifecycle）,一个依赖管理系统（dependency management system）和用来运行定义在生命周期阶段中插件目标的逻辑</code></pre><h3 id="maven-能做什么"><a href="#maven-能做什么" class="headerlink" title="maven 能做什么"></a>maven 能做什么</h3><pre><code>1.引入jar包，可控制jar包冲突问题2.编译（java文件编译为字节码）3.运行测试用例4.打包</code></pre><h3 id="maven-的特点"><a href="#maven-的特点" class="headerlink" title="maven 的特点"></a>maven 的特点</h3><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><pre><code>根据pom中的坐标将jar包导入项目中，可以做到jar包的复用。如将一个junit导入项目使用maven则体现为<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h5 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h5><p>下面从字面依赖和传递两个方面了解依赖传递的概念</p><p>依赖：项目A中引入了项目B,这时我们就可以说A依赖于B</p><p>传递：项目B中依赖了项目C由于A依赖于B,所以根据依赖的关系A也就依赖了项目C</p><p>maven的依赖传递可以方便引入一些项目，但是存在一个问题就是如果一个项目同时依赖2个项目。而依赖的2个项目分别又依赖同一个项目的不同版本。这里由于版本的不同可能会引发一些兼容性问题。我们把这种情况称之为依赖传递冲突。</p><p>maven对这种冲突提供的解决方案如下：</p><p>依赖调节原则：</p><p>1、第一声明者优先原则：在 pom 文件定义依赖,先声明的依赖为准。<br>2、路径近者优先原则:例如:A项目依赖B B依赖C C又依赖D 如果我们在A中申明依赖D的不同版本，那么A项目就会依赖D的声明版本而不是传递的D版本。</p><p>只要我们遵循原则maven会帮我们自动处理依赖 ，但我们如果不想遵循原则就不能解决冲突了吗？答案肯定是可以，毕竟maven是一款优秀的自动化构建工具</p><p>不遵循原则如何解决冲突：</p><p>1.排除依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itcast.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.锁定版本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.可选依赖<br>当坐标被赋予<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>时此坐标不会被传递依赖。</p><p>example：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="一键构建"><a href="#一键构建" class="headerlink" title="一键构建"></a>一键构建</h4><pre><code>maven 规范化流程如下图</code></pre><p><img src="http://39.104.171.29/image/maven_stream.png" alt><br>    一键构建是指，如果用户需要实现上述流程中的清理，只需要使用maven自带的mvn clean命令即可完成项目的清空。<br>    如果是实现流程中的打包，则使用命令mvn package 即可，并且它还会执行打包前的所有流程项。</p><h3 id="maven-安装后目录解析"><a href="#maven-安装后目录解析" class="headerlink" title="maven 安装后目录解析"></a>maven 安装后目录解析</h3><p>bin:存放了 maven 的命令,比如我们前面用到的 mvn tomcat:run<br>boot:存放了一些 maven 本身的引导程序,如类加载器等<br>conf:存放了 maven 的一些配置文件,如 setting.xml 文件<br>lib:存放了 maven 本身运行所需的一些 jar 包<br>在使用maven前电脑需安装jdk或jre因为maven是用java编写的</p><h3 id="maven-命令"><a href="#maven-命令" class="headerlink" title="maven 命令"></a>maven 命令</h3><p>查看maven的帮助信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~$ mvn -help</span><br></pre></td></tr></table></figure></p><p>maven 查看版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~$ mvn -v</span><br><span class="line">Apache Maven 3.6.0</span><br><span class="line">Maven home: xxx</span><br><span class="line">Java version: 1.8.0_191, vendor: Oracle Corporation, runtime: xxx</span><br><span class="line">java-8-openjdk-amd64/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;4.18.0-18-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure></p><p>compile 编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/idea_dev/hello_maven$ mvn complie</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ----------------------&lt; com.itheima:hello_maven &gt;-----------------------</span><br><span class="line">[INFO] Building hello_maven Maven Webapp 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ war ]---------------------------------</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  0.145 s</span><br><span class="line">[INFO] Finished at: 2019-05-08T14:24:23+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Unknown lifecycle phase &quot;complie&quot;. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt; or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy. -&gt; [Help 1]</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/LifecyclePhaseNotFoundException</span><br></pre></td></tr></table></figure></p><p>mvn complie 打错 改为 compile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/idea_dev/hello_maven$ mvn compile</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ----------------------&lt; com.itheima:hello_maven &gt;-----------------------</span><br><span class="line">[INFO] Building hello_maven Maven Webapp 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ war ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello_maven ---</span><br><span class="line">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory /home/spiderbao/idea_dev/hello_maven/src/main/resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ hello_maven ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[INFO] Compiling 1 source file to /home/spiderbao/idea_dev/hello_maven/target/classes</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  1.307 s</span><br><span class="line">[INFO] Finished at: 2019-05-08T14:26:40+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>test 测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/idea_dev/hello_maven$ mvn test</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ----------------------&lt; com.itheima:hello_maven &gt;-----------------------</span><br><span class="line">[INFO] Building hello_maven Maven Webapp 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ war ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello_maven ---</span><br><span class="line">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory /home/spiderbao/idea_dev/hello_maven/src/main/resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ hello_maven ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ hello_maven ---</span><br><span class="line">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory /home/spiderbao/idea_dev/hello_maven/src/test/resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ hello_maven ---</span><br><span class="line">[INFO] No sources to compile</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ hello_maven ---</span><br><span class="line">[INFO] No tests to run.</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  1.072 s</span><br><span class="line">[INFO] Finished at: 2019-05-08T14:27:10+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>由于没有写测试用例所以No tests to run.<br>clean 清空<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/idea_dev/hello_maven$ mvn clean</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ----------------------&lt; com.itheima:hello_maven &gt;-----------------------</span><br><span class="line">[INFO] Building hello_maven Maven Webapp 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ war ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hello_maven ---</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  0.289 s</span><br><span class="line">[INFO] Finished at: 2019-05-08T14:23:21+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>package 打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/idea_dev/hello_maven$ mvn package</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ----------------------&lt; com.itheima:hello_maven &gt;-----------------------</span><br><span class="line">[INFO] Building hello_maven Maven Webapp 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ war ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello_maven ---</span><br><span class="line">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory /home/spiderbao/idea_dev/hello_maven/src/main/resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ hello_maven ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ hello_maven ---</span><br><span class="line">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory /home/spiderbao/idea_dev/hello_maven/src/test/resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ hello_maven ---</span><br><span class="line">[INFO] No sources to compile</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ hello_maven ---</span><br><span class="line">[INFO] No tests to run.</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-war-plugin:2.2:war (default-war) @ hello_maven ---</span><br><span class="line">[INFO] Packaging webapp</span><br><span class="line">[INFO] Assembling webapp [hello_maven] in [/home/spiderbao/idea_dev/hello_maven/target/hello_maven]</span><br><span class="line">[INFO] Processing war project</span><br><span class="line">[INFO] Copying webapp resources [/home/spiderbao/idea_dev/hello_maven/src/main/webapp]</span><br><span class="line">[INFO] Webapp assembled in [22 msecs]</span><br><span class="line">[INFO] Building war: /home/spiderbao/idea_dev/hello_maven/target/hello_maven.war</span><br><span class="line">[INFO] WEB-INF/web.xml already added, skipping</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  1.515 s</span><br><span class="line">[INFO] Finished at: 2019-05-08T14:28:25+08:00</span><br></pre></td></tr></table></figure></p><p>install 安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/idea_dev/hello_maven$ mvn install</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ----------------------&lt; com.itheima:hello_maven &gt;-----------------------</span><br><span class="line">[INFO] Building hello_maven Maven Webapp 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ war ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello_maven ---</span><br><span class="line">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory /home/spiderbao/idea_dev/hello_maven/src/main/resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ hello_maven ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ hello_maven ---</span><br><span class="line">[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory /home/spiderbao/idea_dev/hello_maven/src/test/resources</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ hello_maven ---</span><br><span class="line">[INFO] No sources to compile</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ hello_maven ---</span><br><span class="line">[INFO] No tests to run.</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-war-plugin:2.2:war (default-war) @ hello_maven ---</span><br><span class="line">[INFO] Packaging webapp</span><br><span class="line">[INFO] Assembling webapp [hello_maven] in [/home/spiderbao/idea_dev/hello_maven/target/hello_maven]</span><br><span class="line">[INFO] Processing war project</span><br><span class="line">[INFO] Copying webapp resources [/home/spiderbao/idea_dev/hello_maven/src/main/webapp]</span><br><span class="line">[INFO] Webapp assembled in [23 msecs]</span><br><span class="line">[INFO] Building war: /home/spiderbao/idea_dev/hello_maven/target/hello_maven.war</span><br><span class="line">[INFO] WEB-INF/web.xml already added, skipping</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-install-plugin:2.4:install (default-install) @ hello_maven ---</span><br><span class="line">[INFO] Installing /home/spiderbao/idea_dev/hello_maven/target/hello_maven.war to /home/spiderbao/.m2/repository/com/itheima/hello_maven/1.0-SNAPSHOT/hello_maven-1.0-SNAPSHOT.war</span><br><span class="line">[INFO] Installing /home/spiderbao/idea_dev/hello_maven/pom.xml to /home/spiderbao/.m2/repository/com/itheima/hello_maven/1.0-SNAPSHOT/hello_maven-1.0-SNAPSHOT.pom</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  1.604 s</span><br><span class="line">[INFO] Finished at: 2019-05-08T14:42:26+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><h3 id="maven-库"><a href="#maven-库" class="headerlink" title="maven 库"></a>maven 库</h3><p>maven库可以分为3类分别是：</p><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><pre><code>本地仓库 :用来存储从远程仓库或中央仓库下载的插件和 jar 包,项目使用一些插件或 jar 包,</code></pre><p>优先从本地仓库查找</p><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><pre><code>远程仓库:如果本地需要插件或者 jar 包,本地仓库没有,默认去远程仓库下载。</code></pre><p>远程仓库可以在互联网内也可以在局域网内。</p><h4 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h4><pre><code>中央仓库 :在 maven 软件中内置一个远程仓库地址 http://repo1.maven.org/maven2 ,它是中</code></pre><p>央仓库,服务于整个互联网,它是由 Maven 团队自己维护,里面存储了非常全的 jar 包,它包<br>含了世界上大部分流行的开源项目构件。</p><h3 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h3><p>setting 文件主要用来配置maven的一些仓库设置，如本地仓库，远程仓库等。</p><h4 id="全局setting-和用户-setting"><a href="#全局setting-和用户-setting" class="headerlink" title="全局setting 和用户 setting"></a>全局setting 和用户 setting</h4><p>在 maven 安装目录下的有 conf/setting.xml 文件,此 setting.xml 文件用于 maven 的所有 project<br>项目,它作为 maven 的全局配置。<br>如需要个性配置则需要在用户配置中设置,用户配置的 setting.xml 文件默认的位置在: ${user.dir}<br>/.m2/settings.xml 目录中,${user.dir} 指 windows 中的用户目录。或在项目中添加setting.xml<br>maven 会先找用户配置,如果找到则以用户配置文件为准,否则使用全局配置文件。</p><p><img src="http://39.104.171.29/image/maven_001.png" alt></p><h3 id="maven-工程认识"><a href="#maven-工程认识" class="headerlink" title="maven 工程认识"></a>maven 工程认识</h3><p>maven 工程的目录结构如下图</p><p><img src="http://39.104.171.29/image/maven_002.png" alt></p><p>作为一个 maven 工程,它的 src 目录和 pom.xml 是必备的。<br>进入 src 目录后,我们发现它里面的目录结构如下:</p><p><img src="http://39.104.171.29/image/maven_004.png" alt></p><p>src/main/java —— 存放项目的.java 文件<br>src/main/resources —— 存放项目资源文件,如 spring, hibernate 配置文件<br>src/test/java —— 存放所有单元测试.java 文件,如 JUnit 测试类<br>src/test/resources —— 测试资源文件<br>target —— 项目输出位置,编译后的 class 文件会输出到此目录<br>pom.xml——maven 项目核心配置文件<br>注意:如果是普通的 java 项目,那么就没有 webapp 目录。</p><h3 id="maven-指令的生命周期"><a href="#maven-指令的生命周期" class="headerlink" title="maven 指令的生命周期"></a>maven 指令的生命周期</h3><p>maven 对项目构建过程分为三套相互独立的生命周期,请注意这里说的是“三套”,而且“相互独立”,<br>这三套生命周期分别是:</p><p>Clean Lifecycle 在进行真正的构建之前进行一些清理工作。<br>Default Lifecycle 构建的核心部分,编译,测试,打包,部署等等。<br>Site Lifecycle 生成项目报告,站点,发布站点</p><h3 id="maven-概念模型"><a href="#maven-概念模型" class="headerlink" title="maven 概念模型"></a>maven 概念模型</h3><p>Maven 包含了一个项目对象模型 (Project Object Model),一组标准集合,一个项目生命周期(Project<br>Lifecycle),一个依赖管理系统(Dependency Management System),和用来运行定义在生命周期阶段<br>(phase)中插件(plugin)目标(goal)的逻辑。</p><p><img src="http://39.104.171.29/image/maven_005.png" alt></p><p>  项目对象模型 (Project Object Model)<br>一个 maven 工程都有一个 pom.xml 文件,通过 pom.xml 文件定义项目的坐标、项目依赖、项目信息、<br>插件目标等。</p><p>  依赖管理系统(Dependency Management System)<br>通过 maven 的依赖管理对项目所依赖的 jar 包进行统一管理。<br>比如:项目依赖 junit4.9,通过在 pom.xml 中定义 junit4.9 的依赖即使用 junit4.9,如下所示是 junit4.9<br>的依赖定义:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此项目运行使用 junit,所以此项目依赖 junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit 的项目名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit 的模块名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 依赖范围:单元测试时使用 junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   一个项目生命周期(Project Lifecycle)<br>使用 maven 完成项目的构建,项目构建包括:清理、编译、测试、部署等过程,maven 将这些<br>过程规范为一个生命周期,如下所示是生命周期的各各阶段:<br><img src="http://39.104.171.29/image/maven_006.png" alt><br>maven 通过执行一些简单命令即可实现上边生命周期的各各过程,比如执行 mvn compile 执行编译、<br>执行 mvn clean 执行清理。</p><p>   一组标准集合<br>maven 将整个项目管理过程定义一组标准,比如:通过 maven 构建工程有标准的目录结构,有<br>标准的生命周期阶段、依赖管理有标准的坐标定义等。</p><p>  插件(plugin)目标(goal)<br>maven 管理项目生命周期过程都是基于插件完成的</p><h3 id="maven的继承和聚合"><a href="#maven的继承和聚合" class="headerlink" title="maven的继承和聚合"></a>maven的继承和聚合</h3><p>maven的继承</p><p>继承后maven的子模块会拥有父模块的所有pom信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itcast.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>maven的聚合</p><p>我把maven的聚合看做，一个pom件就可以构建指定模块并组合成为一个项目</p><h2 id="maven-坐标的来源方式"><a href="#maven-坐标的来源方式" class="headerlink" title="maven 坐标的来源方式"></a>maven 坐标的来源方式</h2><h3 id="坐标搜索网站"><a href="#坐标搜索网站" class="headerlink" title="坐标搜索网站"></a>坐标搜索网站</h3><p><a href="http://search.maven.org/" target="_blank" rel="noopener">central</a>    or <a href="http://mvnrepository.com/" target="_blank" rel="noopener">mvnrepository</a></p><h2 id="maven-私服搭建及其使用"><a href="#maven-私服搭建及其使用" class="headerlink" title="maven 私服搭建及其使用"></a>maven 私服搭建及其使用</h2><h3 id="maven私服搭建"><a href="#maven私服搭建" class="headerlink" title="maven私服搭建"></a>maven私服搭建</h3><p>下载nexus安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　$　　cd /opt</span><br><span class="line"></span><br><span class="line">　　$　　wget http://download.sonatype.com/nexus/oss/nexus-2.10.0-02-bundle.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压并安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　$　　cd /opt/</span><br><span class="line"></span><br><span class="line">　　$　　tar -zxvf nexus-2.10.0-02-bundle.tar.gz</span><br><span class="line"></span><br><span class="line">　　$　　cd /opt/nexus-2.10.0-02/bin</span><br><span class="line"></span><br><span class="line">　　$　　vim nexus</span><br></pre></td></tr></table></figure></p><p>在 nexus文件中添加RUN_AS_USER用户如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN_AS_USER=root</span><br></pre></td></tr></table></figure></p><p>启动nexus<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　$　　./nexus start</span><br></pre></td></tr></table></figure></p><p>nexus 配置解析：</p><p>查看 nexus 的配置文件 conf/nexus.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Jetty section</span><br><span class="line">application-port=8081 # nexus 的访问端口配置</span><br><span class="line">application-host=0.0.0.0 # nexus 主机监听配置(不用修改)</span><br><span class="line">nexus-webapp=$&#123;bundleBasedir&#125;/nexus</span><br><span class="line">nexus-webapp-context-path=/nexus</span><br><span class="line"># nexus 工程目录</span><br><span class="line"># nexus 的 web 访问路径</span><br><span class="line"># Nexus section</span><br><span class="line">nexus-work=$&#123;bundleBasedir&#125;/../sonatype-work/nexus</span><br><span class="line"># nexus 仓库目录</span><br><span class="line">runtime=$&#123;bundleBasedir&#125;/nexus/WEB-INF # nexus 运行程序目录</span><br></pre></td></tr></table></figure><h3 id="nexus仓库类型"><a href="#nexus仓库类型" class="headerlink" title="nexus仓库类型"></a>nexus仓库类型</h3><p>nexus 的仓库有 4 种类型:</p><p>1.hosted,宿主仓库,部署自己的 jar 到这个类型的仓库,包括 releases 和 snapshot 两部分,Releases 公司内部发布版本仓库、 Snapshots 公司内部测试版本仓库</p><p>2.proxy,代理仓库,用于代理远程的公共仓库,如 maven 中央仓库,用户连接私服,私服自动去中央仓库下载 jar 包或者插件。</p><p>3.group,仓库组,用来合并多个 hosted/proxy 仓库,通常我们配置自己的 maven 连接仓库组。</p><p>4.virtual(虚拟):兼容 Maven1 版本的 jar 或者插件</p><p>nexus 仓库默认在 sonatype-work 目录中</p><h3 id="将项目发布到私服"><a href="#将项目发布到私服" class="headerlink" title="将项目发布到私服"></a>将项目发布到私服</h3><p>1.setting配置添加 server</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.项目pom添加仓库<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.使用maven命令发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><h3 id="maven-配置私服下载jar包"><a href="#maven-配置私服下载jar包" class="headerlink" title="maven 配置私服下载jar包"></a>maven 配置私服下载jar包</h3><p>没有配置nexus之前,如果本地仓库没有,去中央仓库下载,通常在企业中会在局域网<br>内部署一台私服服务器,有了私服本地项目首先去本地仓库找 jar,如果没有找到则连接私<br>服从私服下载 jar 包,如果私服没有 jar 包私服同时作为代理服务器从中央仓库下载 jar 包,<br>这样做的好处是一方面由私服对公司项目的依赖 jar 包统一管理,一方面提高下载速度,项<br>目连接私服下载 jar 包的速度要比项目连接中央仓库的速度快的多。</p><p>setting配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--仓库id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--仓库 id,repositories 可以配置多个仓库,保证 id 不重复--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--仓库地址,即 nexus 仓库组的地址--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="将第三方jar导入本地maven"><a href="#将第三方jar导入本地maven" class="headerlink" title="将第三方jar导入本地maven"></a>将第三方jar导入本地maven</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37</span><br><span class="line">-Dfile= fastjson-1.1.37.jar -Dpackaging=jar</span><br></pre></td></tr></table></figure><p>参数说明<br>DgroupId 和 DartifactId 构成了该 jar 包在 pom.xml 的坐标,项目就是依靠这两个属性定位。<br>自己起名字也行。<br>Dfile 表示需要上传的 jar 包的绝对路径。<br>Durl 私服上仓库的位置,打开 nexus——&gt;repositories 菜单,可以看到该路径。<br>DrepositoryId 服务器的表示 id,在 nexus 的 configuration 可以看到。<br>Dversion 表示版本信息</p><h3 id="将第三方jar导入私服"><a href="#将第三方jar导入私服" class="headerlink" title="将第三方jar导入私服"></a>将第三方jar导入私服</h3><p>1.在setting中配置第三方server<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37</span><br><span class="line">-Dpackaging=jar -Dfile=fastjson-1.1.37.jar</span><br><span class="line">-Durl=http://localhost:8081/nexus/content/repositories/thirdparty/</span><br><span class="line">-DrepositoryId=thirdparty</span><br></pre></td></tr></table></figure><p>参数说明<br>DgroupId 和 DartifactId 构成了该 jar 包在 pom.xml 的坐标,项目就是依靠这两个属性定位。<br>自己起名字也行。<br>Dfile 表示需要上传的 jar 包的绝对路径。<br>Durl 私服上仓库的位置,打开 nexus——&gt;repositories 菜单,可以看到该路径。<br>DrepositoryId 服务器的表示 id,在 nexus 的 configuration 可以看到。<br>Dversion 表示版本信息</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mongodb</title>
      <link href="/MeBlog/2019/06/10/mongodb/"/>
      <url>/MeBlog/2019/06/10/mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb入门"><a href="#mongodb入门" class="headerlink" title="mongodb入门"></a>mongodb入门</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>mongodb是一个基于分布式文件存储的数据库。由c++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>mongoab是一个介于关系型数据库和非关系型数据库之间的产品，是非关系型数据库当中功能丰富，最像关系型数据库的一个产品。它支持的数据格式有json,bson等。他最大的特点是它的查询语法类似于面向对象语言。并且它还支持对数据创建索引。</p><p>下面的图片是百度百科对mongodb的介绍<br><img src="http://39.104.171.29/image/mongodb-1.png" alt></p><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>在mongodb中是通过数据库、集合、文档的方式来管理数据的。下边是mongodb与关系型数据库的一些概念比较图。<br><img src="http://39.104.171.29/image/mongodb-2.png" alt><br>和关系型数据库一样，mongodb允许一个实例创建多个数据库，一个数据库创建多个集合，一个集合创建多个文档</p><h3 id="链接mongodb"><a href="#链接mongodb" class="headerlink" title="链接mongodb"></a>链接mongodb</h3><p>mongodb使用CS架构开发。client shell使用链接命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span><br></pre></td></tr></table></figure></p><p><img src="http://39.104.171.29/image/mongodb-3.png" alt></p><h3 id="数据库操作的相关命令"><a href="#数据库操作的相关命令" class="headerlink" title="数据库操作的相关命令"></a>数据库操作的相关命令</h3><h4 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h4><p>show dbs: 查询所有数据库信息<br><img src="http://39.104.171.29/image/mongodb-4.png" alt></p><p>db<br><img src="http://39.104.171.29/image/mongodb-5.png" alt></p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>use 库名<br>使用指定的库，没有则创建（注意：当使用一个新建的库，而且没有插入任何数据时。此时的库实际没有被创建。）<br><img src="http://39.104.171.29/image/mongodb-6.png" alt></p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>db.dropDatabase<br><img src="http://39.104.171.29/image/mongodb-7.png" alt></p><h3 id="集合相关操作命令"><a href="#集合相关操作命令" class="headerlink" title="集合相关操作命令"></a>集合相关操作命令</h3><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>db.createConllection(name,options)<br>name:表示集合的名称<br>options:表示创建参数</p><h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><p>db.<conllection>.drop()</conllection></p><p><collection> 表示选中的集合</collection></p><h3 id="文档先关操作"><a href="#文档先关操作" class="headerlink" title="文档先关操作"></a>文档先关操作</h3><h4 id="集合中插入文档"><a href="#集合中插入文档" class="headerlink" title="集合中插入文档"></a>集合中插入文档</h4><p>db.<collection>.insert(document)</collection></p><p><collection> 表示选中的集合<br>document:表示文档，可以是json类型的数据格式</collection></p><h4 id="集合中修改指定文档信息"><a href="#集合中修改指定文档信息" class="headerlink" title="集合中修改指定文档信息"></a>集合中修改指定文档信息</h4><p>db.<collection>.update(<query>,<update>,<options>)</options></update></query></collection></p><p><collection> 表示选中的集合</collection></p><p><query> 表示 查询条件,相当于sql语句的where</query></p><p><update> 表示 更新文档内容</update></p><p><options> 表示 选项</options></p><h4 id="set修改器"><a href="#set修改器" class="headerlink" title="$set修改器"></a>$set修改器</h4><p>db.test_collection.update({“age”:18},{$set:{“name”:”wan”,”age”:16}},{multi:true})</p><p>test_collection：集合名称</p><p>{“age”:18} ：查询结果</p><p>{$set:{“name”:”wan”,”age”:16}} 修改条件</p><p>{multi:true}：参数 multi 为true时表示修改全部，false时表示修改第一个匹配的文档。默认为false</p><h4 id="集合中移除指定文档"><a href="#集合中移除指定文档" class="headerlink" title="集合中移除指定文档"></a>集合中移除指定文档</h4><p>db.<collection>.remove(<query>)</query></collection></p><p><collection> 表示选中的集合</collection></p><p><query> 表示查询的结果<br>删除前最好先执行查询</query></p><h4 id="集合中搜索指定文档"><a href="#集合中搜索指定文档" class="headerlink" title="集合中搜索指定文档"></a>集合中搜索指定文档</h4><p>db.<collection>.find(query,projection)</collection></p><p><collection> 表示选中的集合<br>query :查询条件<br>projection:投影查询key</collection></p><p>投影查询<br>db.test_collection.find({“age”:18},{name:1,age:1,address:1,_id:0})<br>test_collection:制定的集合<br>{“age”:18} ：查询条件<br>{name:1,age:1,address:1,_id:0} ：投影参数，个人不明白只有_id可以设置为0，如果别的设置为0会报Projection cannot have a mix of inclusion and exclusion.异常</p><h3 id="用户相关操作命令"><a href="#用户相关操作命令" class="headerlink" title="用户相关操作命令"></a>用户相关操作命令</h3><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">    user:&quot;spiderBao&quot;,</span><br><span class="line">    pwd:&quot;xxx&quot;,</span><br><span class="line">    roles:[</span><br><span class="line">        &#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.updateUser(</span><br><span class="line">    &apos;spiderBao1&apos;,&#123;</span><br><span class="line">        roles:[</span><br><span class="line">        &#123;role:&quot;readWriteAnyDatabase&quot;,db:&quot;admin&quot;&#125;]</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h4 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show users</span><br></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropUser(&quot;spiderBao1&quot;)</span><br></pre></td></tr></table></figure><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.changeUserPassword(&quot;test1&quot;,&quot;123&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java—日志框架解析-转载</title>
      <link href="/MeBlog/2019/06/10/Java%E2%80%94%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E8%BD%AC%E8%BD%BD/"/>
      <url>/MeBlog/2019/06/10/Java%E2%80%94%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90-%E8%BD%AC%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>作为Java程序员，幸运的是，Java 拥有功能和性能都非常强大的日志库；不幸的是，这样的日志库有不止一个<br>相信每个人都曾经迷失在JUL(Java Util Log), JCL(Commons Logging), Log4j, SLF4J, Logback，<br>Log4j2等等的迷宫中。在我见过的绝大多数项目中，都没有能够良好的配置和使用日志库。这篇文章先讲述Java<br>常见日志库的历史和关系，后续会讲日志使用的最佳实践。让我们从头(Java Util Log)开始说起吧。</p><h3 id="Java-Util-Log"><a href="#Java-Util-Log" class="headerlink" title="Java Util Log"></a>Java Util Log</h3><p>简称JUL，是JDK 中自带的log功能。虽然是官方自带的log lib，JUL的使用确不广泛。主要原因:</p><p>1.JUL从JDK1.4 才开始加入(2002年)，当时各种第三方log lib已经被广泛使用了<br>2.JUL早期存在性能问题，到JDK1.5上才有了不错的进步，但现在和Logback/Log4j2相比还是有所不如<br>3.JUL的功能不如Logback/Log4j2等完善，比如Output Handler就没有Logback/Log4j2的丰富，有<br>时候需要自己来继承定制，又比如默认没有从ClassPath里加载配置文件的功能</p><h3 id="Log4j-1-x"><a href="#Log4j-1-x" class="headerlink" title="Log4j 1.x"></a>Log4j 1.x</h3><p>Log4j 是在 Logback 出现之前被广泛使用的 Log Lib, 由 Gülcü 于2001年发布，后来成为Apache<br>基金会的顶级项目。Log4j 在设计上非常优秀，对后续的 Java Log 框架有长久而深远的影响，也产生了<br>Log4c, Log4s, Log4perl 等到其他语言的移植。Log4j 的短板在于性能，在Logback 和 Log4j2<br>出来之后，Log4j的使用也减少了。</p><h3 id="Commons-Logging"><a href="#Commons-Logging" class="headerlink" title="Commons Logging"></a>Commons Logging</h3><p>简称JCL，是Apache下面的项目。JCL 是一个Log Facade，只提供 Log API，不提供实现，然后有 Adapter<br>来使用 Log4j 或者 JUL 作为Log Implementation。</p><p>就像之前所说，JDK现在带了自己的JUL，然后又有第三方的Log4j等日志库存在，不同的项目可能各自使用了<br>不同的日志库。如果你的项目依赖的其他lib各自使用了不同的日志库，你想控制日志行为，就需要针对每个日<br>志库都写一个配置文件，是不是很酸爽?</p><p>然后这个时候 JCL 就出现了。在程序中日志创建和记录都是用JCL中的接口，在真正运行时，会看当前ClassPath<br>中有什么实现，如果有Log4j 就是用 Log4j, 如果啥都没有就是用 JDK 的 JUL。</p><p>这样，在你的项目中，还有第三方的项目中，大家记录日志都使用 JCL 的接口，然后最终运行程序时，可以按照自<br>己的需求(或者喜好)来选择使用合适的Log Implementation。如果用Log4j, 就添加 Log4j 的jar包进去，然<br>后写一个 Log4j 的配置文件；如果喜欢用JUL，就只需要写个JUL的配置文件。如果有其他的新的日志库出现，也<br>只需要它提供一个Adapter，运行的时候把这个日志库的 jar 包加进去。</p><p><img src="http://39.104.171.29/image/jcl-log4j-jul.jpg" alt></p><p>到这个时候一切看起来都很简单，很美好。接口和实现做了良好的分离，在统一的JCL之下，不改变任何代码，就可以<br>通过配置就换用功能更强大，或者性能更好的日志库实现。</p><p>这种简单美好一直持续到SLF4J出现。</p><h3 id="SLF4J-Logback"><a href="#SLF4J-Logback" class="headerlink" title="SLF4J/Logback"></a>SLF4J/Logback</h3><p>SLF4J(The Simple Logging Facade for Java)和Logback也是Gülcü创立的项目，其创立主要是为了提供更<br>高性能的实现。其中，SLF4j 是类似于JCL 的Log Facade,Logback 是类似于Log4j 的 Log Implementation。</p><p>之前已经说过，Apache 有了个JCL，用来做各种Log lib统一的接口，如果 Gülcü 要搞一个更好的Log实现的话，<br>直接写一个实现就好了，为啥还要搞一个和SLF4J呢?</p><p>原因是Gülcü 认为 JCL 的 API 设计得不好，容易让使用者写出性能有问题的代码。</p><p>比如在用 JCL 输出一个 debug 级别的 log:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">"start process request, url:"</span> + url);</span><br></pre></td></tr></table></figure><p>这个有什么问题呢？一般生产环境 log 级别都会设到 info 或者以上，那这条 log 是不会被输出的。然而不管会不会输出，<br>这其中都会做一个字符串连接操作，然后生产一个新的字符串。如果这条语句在循环或者被调用很多次的函数中，就会多做很多<br>无用的字符串连接，影响性能。</p><p>所以 JCL 的最佳实践推荐这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"start process request, url:"</span> + url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而开发者常常忽略这个问题或是觉得麻烦而不愿意这么写。所以SLF4J提供了新的API，方便开发者使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">"start process request, url:&#123;&#125;"</span>, url);</span><br></pre></td></tr></table></figure><p>这样的话，在不输出 log 的时候避免了字符串拼接的开销；在输出的时候需要做一个字符串format，代价比手工拼接字符串大一些,<br>但是可以接受。</p><p>而 Logback 则是作为 Log4j 的继承者来开发的，提供了性能更好的实现，异步 logger，Filter等更多的特性。</p><p>现在事情变复杂了。我们有了两个流行的 Log Facade，以及三个流行的 Log Implementation。Gülcü是个追求完美的人，<br>他决定让这些Log之间都能够方便的互相替换，所以做了各种 Adapter 和 Bridge 来连接:</p><p><img src="http://39.104.171.29/image/jcl-log4j-jul-slf4j-logback-slf4j-nop.jpg" alt></p><p>可以看到甚至 Log4j 和 JUL 都可以桥接到SLF4J，再通过 SLF4J 适配到到 Logback!</p><p>在这里需要注意不能搞出循环的桥接，比如下面这些依赖就不能同时存在:</p><p>1.jcl-over-slf4j 和 slf4j-jcl<br>2.log4j-over-slf4j 和 slf4j-log4j12<br>3.jul-to-slf4j 和 slf4j-jdk14</p><p>总感觉事情在变得更麻烦呢！</p><h3 id="Log4j2"><a href="#Log4j2" class="headerlink" title="Log4j2"></a>Log4j2</h3><p>现在有了更好的 SLF4J 和 Logback——你会想事情到这里总该了解了吧，让他们慢慢取代JCL 和 Log4j 好了。</p><p>然而维护 Log4j 的人不这样想，他们不想坐视用户一点点被 SLF4J /Logback 蚕食，继而搞出了 Log4j2。</p><p>Log4j2 和 Log4j1.x 并不兼容，设计上很大程度上模仿了 SLF4J/Logback，性能上也获得了很大的提升。</p><p>Log4j2 也做了 Facade/Implementation 分离的设计，分成了 log4j-api 和 log4j-core。</p><p>现在好了，我们有了三个流行的Log 接口和四个流行的Log实现，如果画出桥接关系的图来回事什么样子呢?</p><p><img src="http://39.104.171.29/image/jcl-slf4j-log4j2-api.jpg" alt></p><p>是不是感觉有点晕呢？同样，在添加依赖的时候，要小心不要搞成循环依赖。对于如今的局面我的日志使用方案是</p><h2 id="个人推荐日志搭配方案"><a href="#个人推荐日志搭配方案" class="headerlink" title="个人推荐日志搭配方案"></a>个人推荐日志搭配方案</h2><h3 id="1-总是使用Log-Facade，而不是具体Log-Implementation"><a href="#1-总是使用Log-Facade，而不是具体Log-Implementation" class="headerlink" title="1. 总是使用Log Facade，而不是具体Log Implementation"></a>1. 总是使用Log Facade，而不是具体Log Implementation</h3><p>正如之前所说的，使用 Log Facade 可以方便的切换具体的日志实现。而且，如果依赖多个项目，使用了不同的Log Facade，<br>还可以方便的通过 Adapter 转接到同一个实现上。如果依赖项目使用了多个不同的日志实现，就麻烦的多了。</p><p>具体来说，现在推荐使用 Log4j-API 或者 SLF4j，不推荐继续使用 JCL。</p><h3 id="2-只添加一个-Log-Implementation依赖"><a href="#2-只添加一个-Log-Implementation依赖" class="headerlink" title="2. 只添加一个 Log Implementation依赖"></a>2. 只添加一个 Log Implementation依赖</h3><p>毫无疑问，项目中应该只使用一个具体的 Log Implementation，建议使用 Logback 或者Log4j2。如果有依赖的项目中，<br>使用的 Log Facade不支持直接使用当前的 Log Implementation，就添加合适的桥接器依赖。具体的桥接关系可以看<br>上一篇文章的图。</p><h3 id="3-具体的日志实现依赖应该设置为optional和使用runtime-scope"><a href="#3-具体的日志实现依赖应该设置为optional和使用runtime-scope" class="headerlink" title="3. 具体的日志实现依赖应该设置为optional和使用runtime scope"></a>3. 具体的日志实现依赖应该设置为optional和使用runtime scope</h3><p>在项目中，Log Implementation的依赖强烈建议设置为runtime scope，并且设置为optional。例如项目中使用了 SLF4J<br>作为 Log Facade，然后想使用 Log4j2 作为 Implementation，那么使用 maven 添加依赖的时候这样设置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设为optional，依赖不会传递，这样如果你是个lib项目，然后别的项目使用了你这个lib，不会被引入不想要的Log<br>Implementation 依赖；</p><p>Scope设置为runtime，是为了防止开发人员在项目中直接使用Log Implementation中的类，而不适用Log Facade中的类。</p><h3 id="4-如果有必要-排除依赖的第三方库中的Log-Impementation依赖"><a href="#4-如果有必要-排除依赖的第三方库中的Log-Impementation依赖" class="headerlink" title="4. 如果有必要, 排除依赖的第三方库中的Log Impementation依赖"></a>4. 如果有必要, 排除依赖的第三方库中的Log Impementation依赖</h3><p>这是很常见的一个问题，第三方库的开发者未必会把具体的日志实现或者桥接器的依赖设置为optional，然后你的项目继承了这些<br>依赖——具体的日志实现未必是你想使用的，比如他依赖了Log4j，你想使用Logback，这时就很尴尬。另外，如果不同的第三方依<br>赖使用了不同的桥接器和Log实现，也极容易形成环。</p><p>这种情况下，推荐的处理方法，是使用exclude来排除所有的这些Log实现和桥接器的依赖，只保留第三方库里面对Log Facade的依赖。</p><p>比如阿里的JStorm就没有很好的处理这个问题，依赖jstorm会引入对Logback和log4j-over-slf4j的依赖，如果你想在自己的项目<br>中使用Log4j或其他Log实现的话，就需要加上excludes:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.jstorm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstorm-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-避免为不会输出的log付出代价-减少对不输出日志的成本"><a href="#5-避免为不会输出的log付出代价-减少对不输出日志的成本" class="headerlink" title="5. 避免为不会输出的log付出代价(减少对不输出日志的成本)"></a>5. 避免为不会输出的log付出代价(减少对不输出日志的成本)</h3><p>Log库都可以灵活的设置输出界别，所以每一条程序中的log，都是有可能不会被输出。这时候要注意不要额外的付出代价。（字符拼接代价）</p><p>先看两个有问题的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">"start process request, url: "</span> + url);</span><br><span class="line">logger.debug(<span class="string">"receive request: &#123;&#125;"</span>, toJson(request));</span><br></pre></td></tr></table></figure><p>第一条是直接做了字符串拼接，所以即使日志级别高于debug也会做一个字符串连接操作；第二条虽然用了SLF4J/Log4j2中的懒<br>求值方式来避免不必要的字符串拼接开销，但是toJson()这个函数却是都会被调用并且开销更大。</p><p>推荐的写法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">"start process request, url:&#123;&#125;"</span>, url); <span class="comment">// SLF4J/LOG4J2</span></span><br><span class="line">logger.debug(<span class="string">"receive request: &#123;&#125;"</span>, () -&gt; toJson(request)); <span class="comment">// LOG4J2</span></span><br><span class="line">logger.debug(() -&gt; <span class="string">"receive request: "</span> + toJson(request)); <span class="comment">// LOG4J2</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123; <span class="comment">// SLF4J/LOG4J2</span></span><br><span class="line">    logger.debug(<span class="string">"receive request: "</span> + toJson(request)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-日志格式中最好不要使用行号，函数名等字段"><a href="#6-日志格式中最好不要使用行号，函数名等字段" class="headerlink" title="6. 日志格式中最好不要使用行号，函数名等字段"></a>6. 日志格式中最好不要使用行号，函数名等字段</h3><p>原因是，为了获取语句所在的函数名，或者行号，log库的实现都是获取当前的stacktrace，然后分析取出这些信息，而获取<br>stacktrace的代价是很昂贵的。如果有很多的日志输出，就会占用大量的CPU。在没有特殊需要的情况下，建议不要在日志中<br>输出这些这些字段。</p><h3 id="7-log中不要输出稀奇古怪的字符！"><a href="#7-log中不要输出稀奇古怪的字符！" class="headerlink" title="7. log中不要输出稀奇古怪的字符！"></a>7. log中不要输出稀奇古怪的字符！</h3><p>部分开发人员为了方便看到自己的log，会在log语句中加上醒目的前缀，比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">"========================start process request============="</span>);</span><br></pre></td></tr></table></figure><p>虽然对于自己来说是方便了，但是如果所有人都这样来做的话，那log输出就没法看了！正确的做法是使用grep（linux 中的shell命令） 来看只自己关心的日志。</p><p>转载处：<a href="https://zhuanlan.zhihu.com/p/24272450" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24272450</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AJAX</title>
      <link href="/MeBlog/2019/05/30/ajax/"/>
      <url>/MeBlog/2019/05/30/ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h2><p>AJAX 全称 Asynchronous JavaScript and XML</p><p>AJAX = 异步 JavaScript 和 XML。</p><p>AJAX 是一种用于创建快速动态网页的技术。</p><h2 id="AJAX-工作流程图"><a href="#AJAX-工作流程图" class="headerlink" title="AJAX 工作流程图"></a>AJAX 工作流程图</h2><p><img src="http://39.104.171.29/image/ajax.gif" alt></p><h2 id="ajax基于Internet"><a href="#ajax基于Internet" class="headerlink" title="ajax基于Internet"></a>ajax基于Internet</h2><p>AJAX是基于现有的Internet标准，并且联合使用它们：</p><p>  XMLHttpRequest 对象 (异步的与服务器交换数据)<br>  JavaScript/DOM (信息显示/交互)<br>  CSS (给数据定义样式)<br>  XML (作为转换数据的格式)<br>  lamp  AJAX应用程序与浏览器和平台无关的！</p><h2 id="ajax实例"><a href="#ajax实例" class="headerlink" title="ajax实例"></a>ajax实例</h2><h3 id="基础实例"><a href="#基础实例" class="headerlink" title="基础实例"></a>基础实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  function loadXMLDoc()&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      var xmlhttp;</span></span><br><span class="line"><span class="undefined">      if (window.XMLHttpRequest)&#123;</span></span><br><span class="line"><span class="undefined">        //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line"><span class="undefined">        xmlhttp=new XMLHttpRequest();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      else&#123;</span></span><br><span class="line"><span class="undefined">        // IE6, IE5 浏览器执行代码</span></span><br><span class="line"><span class="undefined">        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      xmlhttp.onreadystatechange=function()&#123;</span></span><br><span class="line"><span class="undefined">        if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)&#123;</span></span><br><span class="line"><span class="undefined">          document.getElementById("myDiv").innerHTML=xmlhttp.responseText;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      xmlhttp.open("GET","https://www.runoob.com/try/ajax/ajax_info.txt",true);</span></span><br><span class="line"><span class="undefined">      xmlhttp.send();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内容解析：</p><p>xmlHttpRequest 请求运行流程 </p><p>1.创建xmlHttpRequest对象</p><p>2.使用xmlHttpRequest对象开启一个请求方式</p><p>3.发送请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建xmlHttpRequest对象</span><br><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest(); <span class="comment">//创建xmlHttpRequest对象，IE7+, Firefox, Chrome, Opera, Safari 浏览器可执行代码</span></span><br><span class="line"></span><br><span class="line">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>); <span class="comment">//同样也是创建XMLHttpRequest对象，针对IE 6,5老版本的创建方式</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用xmlHttpRequest对象开启一个请求</span><br><span class="line"></span><br><span class="line"><span class="comment">//open(method,url,async) </span></span><br><span class="line"><span class="comment">//    规定请求的类型、URL 以及是否异步处理请求。(开启一个请求)</span></span><br><span class="line"><span class="comment">//    method：请求的类型；GET 或 POST</span></span><br><span class="line"><span class="comment">//    url：文件在服务器上的位置，服务器请求路径</span></span><br><span class="line"><span class="comment">//    async：true（异步）或 false（同步),ajax中此选项一般都是 true</span></span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"https://www.runoob.com/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//send(string)</span></span><br><span class="line"><span class="comment">//    将请求发送到服务器。</span></span><br><span class="line"><span class="comment">//    string：仅用于 POST 请求,用于添加post请求中的数据</span></span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></p><h3 id="GET-于-POST-的对比"><a href="#GET-于-POST-的对比" class="headerlink" title="GET 于 POST 的对比"></a>GET 于 POST 的对比</h3><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p><p>然而，在以下情况中，请使用 POST 请求：</p><p>1.无法使用缓存文件（更新服务器上的文件或数据库）<br>2.向服务器发送大量数据（POST 没有数据量限制）<br>3.发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p><h3 id="xmlHttpRequest-setRequestHeader-header-value"><a href="#xmlHttpRequest-setRequestHeader-header-value" class="headerlink" title="xmlHttpRequest.setRequestHeader(header,value)"></a>xmlHttpRequest.setRequestHeader(header,value)</h3><p>此方法用于，向请求添加 HTTP 头。</p><p>header: 规定头的名称<br>value: 规定头的值</p><p>例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");</span><br></pre></td></tr></table></figure></p><h3 id="responseText-and-responseXML"><a href="#responseText-and-responseXML" class="headerlink" title="responseText and responseXML"></a>responseText and responseXML</h3><p>responseText 用于获取服务器中的文本信息资源</p><p>responseXML 用于获取服务器中的XML格式资源</p><p>使用实例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById("myDiv").innerHTML=xmlhttp.responseText;</span><br></pre></td></tr></table></figure></p><h3 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h3><p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。</p><p>每当 readyState 改变时，就会触发 onreadystatechange 事件。</p><p>readyState 属性存有 XMLHttpRequest 的状态信息。</p><p>下面是 XMLHttpRequest 对象的三个重要的属性：</p><p>onreadystatechange ：存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</p><p>readyState ：</p><pre><code>存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪</code></pre><p>status ：200: OK  HTTP 响应状态码。404 :未找到页面 </p><p>使用实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    loadXMLDoc(<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">          <span class="comment">//要做的事情 todo</span></span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考网址：<a href="https://www.runoob.com/ajax/ajax-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/ajax/ajax-tutorial.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/MeBlog/2019/05/22/nginx/"/>
      <url>/MeBlog/2019/05/22/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx-的安装"><a href="#nginx-的安装" class="headerlink" title="nginx 的安装"></a>nginx 的安装</h2><h3 id="ubuntu-下安装"><a href="#ubuntu-下安装" class="headerlink" title="ubuntu 下安装"></a>ubuntu 下安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nginx</span><br></pre></td></tr></table></figure><h2 id="nginx-虚拟主机配置"><a href="#nginx-虚拟主机配置" class="headerlink" title="nginx 虚拟主机配置"></a>nginx 虚拟主机配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">在 http &#123;&#125;中添加</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        listen 80; //监听端口</span><br><span class="line">      server_name www.xuecheng.com; //服务名</span><br><span class="line">        ssi on; //是否开启ssi</span><br><span class="line">        ssi_silent_errors on;</span><br><span class="line">        location / &#123;</span><br><span class="line">                alias  /home/spiderbao/webStrom_dev/xc-ui-pc-static-portal/;//主机映射的路径</span><br><span class="line">                index  index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/MeBlog/2019/05/17/git/"/>
      <url>/MeBlog/2019/05/17/git/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么使用git"><a href="#为什么使用git" class="headerlink" title="为什么使用git"></a>为什么使用git</h2><p>这个问题的答案就在于，集中式版本控制和分布式版本控制的的区别。</p><p>那么怎样算得上集中式版本控制呢？</p><p>比如说SVN就是集中式版本控制系统，版本库是集中放在中央服务器的,而干活的时候,用的都是自己的电脑,所以首先要从中央服务器哪里得到最新的版本,然后干活,干完后,需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作,如果在局域网还可以,带宽够大,速度够快,如果在互联网下,如果网速慢的话,就郁闷了。</p><p><img src="http://39.104.171.29/image/svn-1.png" alt="svn-active-stream"></p><p>集中式版本控制存在如下缺陷： 依赖网络性强，由于只使用一个中央服务器，所以会有单点问题。</p><p>以上说了集中式版本控制，那么分布式版本控制工具又是怎么样的呢？</p><p>分布式版本控制的代表就是git</p><p>Git 是分布式版本控制系统,那么它就没有中央服务器,每个人的电脑就是一个完整的版本库,这样,工作的时候就不需要联网了,因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库,那多个人如何协作呢?比如说自己在电脑上改了文件A,其他人也在电脑上改了文件A,这时,你们两之间只需把各自的修改推送给对方,就可以互相看到对方的修改了。下图就是分布式版本控制工具管理方式:</p><p><img src="http://39.104.171.29/image/git-1.png" alt="git-active-stream"></p><p>分布式版本控制：解决了集中式版本控制的单点问题，和网络依赖性问题，适用于互联网多地区协同开发，但是在只是在局域网下开发，个人认为还是使用svn会更方便，git虽然性能优越但是使用上没有SVN简便。</p><h2 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h2><p>同生活中的许多伟大事件一样,Git 诞生于一个极富纷争大举创新的年代。Linux 内核<br>开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保<br>存归档的繁琐事务上(1991-2002 年间)。到 2002 年,整个项目组开始启用分布式版本<br>控制系统 BitKeeper 来管理和维护代码。<br>到 2005 年的时候,开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结<br>束,他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的<br>缔造者 Linus Torvalds )不得不吸取教训,只有开发一套属于自己的版本控制系统才不至于<br>重蹈覆辙。他们对新的系统订了若干目标:<br>• 速度<br>• 简单的设计<br>• 对非线性开发模式的强力支持(允许上千个并行开发的分支)<br>• 完全分布式<br>• 有能力高效管理类似 Linux 内核一样的超大规模项目(速度和数据量)</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>一般工作流程如下:<br>1.从远程仓库中克隆 Git 资源作为本地仓库。<br>2.从本地仓库中 checkout 代码然后进行代码修改<br>3.在提交前先将代码提交到暂存区。<br>4.提交修改。提交到本地仓库。本地仓库中保存修改的各个历史版本。<br>5.在修改完成后,需要和团队成员共享代码时,可以将代码 push 到远程仓库。<br>下图展示了 Git 的工作流程:</p><p><img src="http://39.104.171.29/image/git-2.png" alt="git-active-stream"></p><h3 id="git-的工作目录介绍"><a href="#git-的工作目录介绍" class="headerlink" title="git 的工作目录介绍"></a>git 的工作目录介绍</h3><p><img src="http://39.104.171.29/image/git-3.png" alt="git-active-stream"></p><p>其中 ./git 文件夹下就是git的本地仓库</p><h2 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init 要初始的文件夹路径</span><br></pre></td></tr></table></figure><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 要加入的文件</span><br></pre></td></tr></table></figure><h3 id="将暂存区文件添加到本地仓库，并将本地仓库推送到远程仓库中"><a href="#将暂存区文件添加到本地仓库，并将本地仓库推送到远程仓库中" class="headerlink" title="将暂存区文件添加到本地仓库，并将本地仓库推送到远程仓库中"></a>将暂存区文件添加到本地仓库，并将本地仓库推送到远程仓库中</h3><p>将缓存区域文件添加到本地仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure></p><p>将本地仓库推送到远程仓库中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/git_study$ git push ssh://git@39.xxx.171.29/home/git/git_study</span><br><span class="line">fatal: 当前分支 master 没有对应的上游分支。</span><br><span class="line">为推送当前分支并建立与远程上游的跟踪，使用</span><br><span class="line"></span><br><span class="line">    git push --set-upstream ssh://git@39.XXX.171.29/home/git/git_study master</span><br><span class="line"></span><br><span class="line">spiderbao@spiderbao-CW65S:~/git_study$ git push --set-upstream ssh://git@39.XXX.171.29/home/git/git_study master</span><br><span class="line">git@39.XXX.171.29&apos;s password: </span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@39.XXX.171.29&apos;s password: </span><br><span class="line">对象计数中: 6, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (3/3), 完成.</span><br><span class="line">写入对象中: 100% (6/6), 523 bytes | 523.00 KiB/s, 完成.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To ssh://39.XXX.171.29/home/git/git_study</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">分支 &apos;master&apos; 设置为跟踪来自 &apos;ssh://git@39.XXX.171.29/home/git/git_study&apos; 的远程分支 &apos;master&apos;。</span><br></pre></td></tr></table></figure></p><h3 id="查看修改历史"><a href="#查看修改历史" class="headerlink" title="查看修改历史"></a>查看修改历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/git_study$ git log</span><br><span class="line">commit 4cb2b4f87b03b6cf3301b000a3e14c44027e3f42 (HEAD -&gt; master)</span><br><span class="line">Author: spiderbao &lt;13593265401@163.com&gt;</span><br><span class="line">Date:   Fri May 17 14:28:44 2019 +0800</span><br><span class="line"></span><br><span class="line">    第二次修改</span><br><span class="line"></span><br><span class="line">commit 1910c01353a8f12304e2a923164f69e33925a03a</span><br><span class="line">Author: spiderbao &lt;13593265401@163.com&gt;</span><br><span class="line">Date:   Fri May 17 14:21:19 2019 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br></pre></td></tr></table></figure><h3 id="还原修改"><a href="#还原修改" class="headerlink" title="还原修改"></a>还原修改</h3><p>reset 还原，还原后历史版本不存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/git_study$ git reset --hard  1910c01353a8f12304e2a923164f69e33925a03a</span><br><span class="line">HEAD 现在位于 1910c01 first commit</span><br></pre></td></tr></table></figure></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/git_study$ git rm test </span><br><span class="line">rm &apos;test&apos;</span><br></pre></td></tr></table></figure><h3 id="忽略文件或文件夹"><a href="#忽略文件或文件夹" class="headerlink" title="忽略文件或文件夹"></a>忽略文件或文件夹</h3><p>在文件目录下创建gitignore 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br><span class="line">vim .gitignore</span><br></pre></td></tr></table></figure></p><p>忽略语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">空行或是以 # 开头的行即注释行将被忽略。</span><br><span class="line">可以在前面添加正斜杠 / 来避免递归,下面的例子中可以很明白的看出来与下一条的区别。</span><br><span class="line">可以在后面添加正斜杠 / 来忽略文件夹,例如 build/ 即忽略 build 文件夹。</span><br><span class="line">可以使用 ! 来否定忽略,即比如在前面用了 *.apk ,然后使用 !a.apk ,则这个 a.apk 不会</span><br><span class="line">被忽略。</span><br><span class="line">* 用来匹配零个或多个字符,如 *.[oa] 忽略所有以&quot;.o&quot;或&quot;.a&quot;结尾, *~ 忽略所有以 ~ 结尾</span><br><span class="line">的文件(这种文件通常被许多编辑器标记为临时文件); [] 用来匹配括号内的任一字符,</span><br><span class="line">如 [abc] ,也可以在括号内加连接符,如 [0-9] 匹配 0 至 9 的数; ? 用来匹配单个字符。</span><br><span class="line">看了这么多,还是应该来个栗子:</span><br><span class="line"># 忽略 .a 文件</span><br><span class="line">*.a</span><br><span class="line"># 但否定忽略 lib.a, 尽管已经在前面忽略了 .a 文件</span><br><span class="line">!lib.a</span><br><span class="line"># 仅在当前目录下忽略 TODO 文件, 但不包括子目录下的 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># 忽略 build/ 文件夹下的所有文件</span><br><span class="line">build/</span><br><span class="line"># 忽略 doc/notes.txt, 不包括 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># 忽略所有的 .pdf 文件 在 doc/ directory 下的</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h3 id="解决文件冲突"><a href="#解决文件冲突" class="headerlink" title="解决文件冲突"></a>解决文件冲突</h3><p>编辑有冲突后的文件，再次提交即可</p><h3 id="文件更新或拉取"><a href="#文件更新或拉取" class="headerlink" title="文件更新或拉取"></a>文件更新或拉取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/cloneToGit$ git clone ssh://git@39.xxx.xxx.29/home/git/git_study</span><br><span class="line">正克隆到 &apos;git_study&apos;...</span><br><span class="line">git@39.xxx.xxx.29&apos;s password: </span><br><span class="line">remote: Counting objects: 13, done.</span><br><span class="line">remote: Compressing objects: 100% (7/7), done.</span><br><span class="line">remote: Total 13 (delta 0), reused 0 (delta 0)</span><br><span class="line">接收对象中: 100% (13/13), 完成.</span><br><span class="line"></span><br><span class="line">spiderbao@spiderbao-CW65S:~/cloneToGit$ cd git_study/</span><br><span class="line">spiderbao@spiderbao-CW65S:~/cloneToGit/git_study$ git pull</span><br><span class="line">git@39.xxx.xxx.29&apos;s password: </span><br><span class="line">已经是最新的。</span><br></pre></td></tr></table></figure><h2 id="git分支管理"><a href="#git分支管理" class="headerlink" title="git分支管理"></a>git分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 新分支名称</span><br></pre></td></tr></table></figure><h3 id="选择分支"><a href="#选择分支" class="headerlink" title="选择分支"></a>选择分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名称</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/git_study$ git merge mybatis </span><br><span class="line">更新 8c65eb0..458de41</span><br><span class="line">Fast-forward</span><br><span class="line"> xiaoli | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 xiaoli</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/MeBlog/2019/05/17/Docker/"/>
      <url>/MeBlog/2019/05/17/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>学习目标：</p><ul><li><p>掌握Docker基础知识，能够理解Docker镜像与容器的概念</p></li><li><p>完成Docker安装与启动</p></li><li><p>掌握Docker镜像与容器相关命令</p></li><li><p>掌握Tomcat Nginx 等软件的常用应用的安装</p></li><li><p>掌握docker迁移与备份相关命令</p></li><li><p>能够运用Dockerfile编写创建容器的脚本</p></li><li><p>能够搭建与使用docker私有仓库</p><p>​</p></li></ul><h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-什么是虚拟化"><a href="#1-1-什么是虚拟化" class="headerlink" title="1.1 什么是虚拟化"></a>1.1 什么是虚拟化</h2><p>​    在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><p>​    在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p><p>​    虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><h2 id="1-2-什么是Docker"><a href="#1-2-什么是Docker" class="headerlink" title="1.2 什么是Docker"></a>1.2 什么是Docker</h2><p>​    Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker" target="_blank" rel="noopener">GitHub</a> 上进行维护。</p><p>​    <img src="http://39.104.171.29/image/1-3.png" alt></p><p>​    Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>​    Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>​    在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><p>​    用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。    </p><pre><code>随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</code></pre><p>（2）职责的逻辑分类</p><p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>​    Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p>​    下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p><p><img src="http://39.104.171.29/image/1-1.png" alt></p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h2 id="1-4-Docker-组件"><a href="#1-4-Docker-组件" class="headerlink" title="1.4 Docker 组件"></a>1.4 Docker 组件</h2><h3 id="1-4-1-Docker服务器与客户端"><a href="#1-4-1-Docker服务器与客户端" class="headerlink" title="1.4.1 Docker服务器与客户端"></a>1.4.1 Docker服务器与客户端</h3><p>​    Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><p><img src="http://39.104.171.29/image/1-2.png" alt></p><h3 id="1-4-2-Docker镜像与容器"><a href="#1-4-2-Docker镜像与容器" class="headerlink" title="1.4.2 Docker镜像与容器"></a>1.4.2 Docker镜像与容器</h3><p>​    镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><p>​    Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p><p>所以Docker容器就是：</p><p>​    一个镜像格式；</p><p>​    一些列标准操作；</p><p>​    一个执行环境。</p><p>​    Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p><pre><code>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</code></pre><h3 id="1-4-3-Registry（注册中心）"><a href="#1-4-3-Registry（注册中心）" class="headerlink" title="1.4.3 Registry（注册中心）"></a>1.4.3 Registry（注册中心）</h3><p>​    Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p><p>​    <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h1 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2 Docker安装与启动"></a>2 Docker安装与启动</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><p>​    Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>​    由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p><p>​    请直接挂载课程配套的Centos7.x镜像    </p><p>（1）yum 包更新到最新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>（3）设置yum源为阿里云</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>（4）安装docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>（5）安装后查看docker版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="2-2-设置ustc的镜像"><a href="#2-2-设置ustc的镜像" class="headerlink" title="2.2 设置ustc的镜像"></a>2.2 设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>在该文件中输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Docker的启动与停止"><a href="#2-3-Docker的启动与停止" class="headerlink" title="2.3 Docker的启动与停止"></a>2.3 Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>停止docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>查看docker状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>查看docker概要信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>查看docker帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure><h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><h2 id="3-1-镜像相关命令"><a href="#3-1-镜像相关命令" class="headerlink" title="3.1 镜像相关命令"></a>3.1 镜像相关命令</h2><h3 id="3-1-1-查看镜像"><a href="#3-1-1-查看镜像" class="headerlink" title="3.1.1 查看镜像"></a>3.1.1 查看镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p><h3 id="3-1-2-搜索镜像"><a href="#3-1-2-搜索镜像" class="headerlink" title="3.1.2 搜索镜像"></a>3.1.2 搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h3 id="3-1-3-拉取镜像"><a href="#3-1-3-拉取镜像" class="headerlink" title="3.1.3 拉取镜像"></a>3.1.3 拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure><p>例如，我要下载centos7镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure><h3 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h3><p>按镜像ID删除镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure><p>删除所有镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure><h2 id="3-2-容器相关命令"><a href="#3-2-容器相关命令" class="headerlink" title="3.2 容器相关命令"></a>3.2 容器相关命令</h2><h3 id="3-2-1-查看容器"><a href="#3-2-1-查看容器" class="headerlink" title="3.2.1 查看容器"></a>3.2.1 查看容器</h3><p>查看正在运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps –a</span><br></pre></td></tr></table></figure><p>查看最后一次运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps –l</span><br></pre></td></tr></table></figure><p>查看停止的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure><h3 id="3-2-2-创建与启动容器"><a href="#3-2-2-创建与启动容器" class="headerlink" title="3.2.2 创建与启动容器"></a>3.2.2 创建与启动容器</h3><p>创建容器常用的参数说明：</p><p>创建容器命令：docker run</p><p> -i：表示运行容器</p><p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p><p> –name :为创建的容器命名。</p><p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p> -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p><p>（1）交互式方式创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=容器名称 镜像名称:标签 /bin/bash</span><br></pre></td></tr></table></figure><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p><p>退出当前容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>（2）守护式方式创建容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure><p>登录守护式容器方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器名称 (或者容器ID)  /bin/bash</span><br></pre></td></tr></table></figure><h3 id="3-2-3-停止与启动容器"><a href="#3-2-3-停止与启动容器" class="headerlink" title="3.2.3 停止与启动容器"></a>3.2.3 停止与启动容器</h3><p>停止容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><h3 id="3-2-4-文件拷贝"><a href="#3-2-4-文件拷贝" class="headerlink" title="3.2.4 文件拷贝"></a>3.2.4 文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure><p>也可以将文件从容器内拷贝出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure><h3 id="3-2-5-目录挂载"><a href="#3-2-5-目录挂载" class="headerlink" title="3.2.5 目录挂载"></a>3.2.5 目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p><p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p><h3 id="3-2-6-查看容器IP地址"><a href="#3-2-6-查看容器IP地址" class="headerlink" title="3.2.6 查看容器IP地址"></a>3.2.6 查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称（容器ID）</span><br></pre></td></tr></table></figure><p>也可以直接执行下面的命令直接输出IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h3 id="3-2-7-删除容器"><a href="#3-2-7-删除容器" class="headerlink" title="3.2.7 删除容器"></a>3.2.7 删除容器</h3><p>删除指定的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h1 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4 应用部署"></a>4 应用部署</h1><h2 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h2><p>（1）拉取mysql镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos/mysql-57-centos7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql(镜像名称或ID)</span><br></pre></td></tr></table></figure><p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p><p>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP  ,指定端口为33306 </p><h2 id="4-2-tomcat部署"><a href="#4-2-tomcat部署" class="headerlink" title="4.2 tomcat部署"></a>4.2 tomcat部署</h2><p>（1）拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:7-jre7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><p>创建容器  -p表示地址映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=mytomcat -p 9000:8080 </span><br><span class="line">-v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7(镜像名称或ID)</span><br></pre></td></tr></table></figure><h2 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h2><p>（1）拉取镜像    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>（2）创建Nginx容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=mynginx -p 80:80 nginx</span><br></pre></td></tr></table></figure><h2 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h2><p>（1）拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h1 id="5-迁移与备份"><a href="#5-迁移与备份" class="headerlink" title="5 迁移与备份"></a>5 迁移与备份</h1><h2 id="5-1-容器保存为镜像"><a href="#5-1-容器保存为镜像" class="headerlink" title="5.1 容器保存为镜像"></a>5.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit mynginx mynginx_i</span><br></pre></td></tr></table></figure><h2 id="5-2-镜像备份"><a href="#5-2-镜像备份" class="headerlink" title="5.2 镜像备份"></a>5.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  save -o mynginx.tar mynginx_i</span><br></pre></td></tr></table></figure><h2 id="5-3-镜像恢复与迁移"><a href="#5-3-镜像恢复与迁移" class="headerlink" title="5.3 镜像恢复与迁移"></a>5.3 镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mynginx.tar</span><br></pre></td></tr></table></figure><p>-i 输入的文件</p><p>执行后再次查看镜像，可以看到镜像已经恢复</p><h1 id="6-Dockerfile"><a href="#6-Dockerfile" class="headerlink" title="6 Dockerfile"></a>6 Dockerfile</h1><h2 id="6-1-什么是Dockerfile"><a href="#6-1-什么是Dockerfile" class="headerlink" title="6.1 什么是Dockerfile"></a>6.1 什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p><h2 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的创建者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td>ADD source_dir/file dest_dir/file</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir/file dest_dir/file</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr></tbody></table><h2 id="6-3-使用脚本创建镜像"><a href="#6-3-使用脚本创建镜像" class="headerlink" title="6.3 使用脚本创建镜像"></a>6.3 使用脚本创建镜像</h2><p>步骤：</p><p>（1）创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir –p /usr/local/dockerjdk8</span><br></pre></td></tr></table></figure><p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p><p>（3）创建文件Dockerfile  <code>vi Dockerfile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#依赖镜像名称和ID</span><br><span class="line">FROM centos:7</span><br><span class="line">#指定镜像创建者信息</span><br><span class="line">MAINTAINER ITCAST</span><br><span class="line">#切换工作目录</span><br><span class="line">WORKDIR /usr</span><br><span class="line">RUN mkdir  /usr/local/java</span><br><span class="line">#ADD 是相对路径jar,把java添加到容器中</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/</span><br><span class="line"></span><br><span class="line">#配置java环境变量</span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>（4）执行命令构建镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=&apos;jdk1.8&apos; .</span><br></pre></td></tr></table></figure><p>注意后边的空格和点，不要省略</p><p>（5）查看镜像是否建立完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h1 id="7-Docker私有仓库"><a href="#7-Docker私有仓库" class="headerlink" title="7 Docker私有仓库"></a>7 Docker私有仓库</h1><h2 id="7-1-私有仓库搭建与配置"><a href="#7-1-私有仓库搭建与配置" class="headerlink" title="7.1 私有仓库搭建与配置"></a>7.1 私有仓库搭建与配置</h2><p>（1）拉取私有仓库镜像（此步省略）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><p>（2）启动私有仓库容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure><p>（3）打开浏览器 输入地址<a href="http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`" target="_blank" rel="noopener">http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空</p><p>（4）修改daemon.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"insecure-registries"</span>:[<span class="string">"192.168.184.141:5000"</span>]&#125;</span><br></pre></td></tr></table></figure><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="7-2-镜像上传至私有仓库"><a href="#7-2-镜像上传至私有仓库" class="headerlink" title="7.2 镜像上传至私有仓库"></a>7.2 镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag jdk1.8 192.168.184.141:5000/jdk1.8</span><br></pre></td></tr></table></figure><p>（2）再次启动私服容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）上传标记的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.184.141:5000/jdk1.8</span><br></pre></td></tr></table></figure><h1 id="8-Docker如何查看容器日志"><a href="#8-Docker如何查看容器日志" class="headerlink" title="8.Docker如何查看容器日志"></a>8.Docker如何查看容器日志</h1><h2 id="8-1-Docker-logs"><a href="#8-1-Docker-logs" class="headerlink" title="8.1 Docker logs"></a>8.1 Docker logs</h2><p>​    使用命令docker logs 容器名即可查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器名</span><br></pre></td></tr></table></figure><p>​    -f 查看实时日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f 容器名</span><br></pre></td></tr></table></figure><p>​    -t查看日志产生的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -t 容器名</span><br></pre></td></tr></table></figure><p>​    –since : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --since=&quot;2017-05-31&quot; --tail=10 容器名</span><br></pre></td></tr></table></figure><p>​    –tail=10 : 查看最后的10条日志。 </p><h1 id="9-Docker的生命周期"><a href="#9-Docker的生命周期" class="headerlink" title="9.Docker的生命周期"></a>9.Docker的生命周期</h1><p><img src="http://39.104.171.29/image/dockerLifeCycle.jpg" alt></p><h1 id="10-进入Docker"><a href="#10-进入Docker" class="headerlink" title="10.进入Docker"></a>10.进入Docker</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exce -ti 容器名称 /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 下的软件管理</title>
      <link href="/MeBlog/2019/05/15/ubuntu%20%E4%B8%8B%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/MeBlog/2019/05/15/ubuntu%20%E4%B8%8B%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概念部分"><a href="#概念部分" class="headerlink" title="概念部分"></a>概念部分</h2><h3 id="Ubuntu软件包管理概述"><a href="#Ubuntu软件包管理概述" class="headerlink" title="Ubuntu软件包管理概述"></a>Ubuntu软件包管理概述</h3><pre><code>Ubuntu Linux采用了Debian的软件包管理机制。由于软件包具有易用性、灵活性和扩展性的特点，再加上Internet的支持，使用户随时都能拥有最新的 Ubuntu系统，这也是Ubuntu受到推崇的一个重要原因。因而，Deb软件包管理也成为Ubuntu中最有活力的部分。本章介绍Ubuntu软件包 管理和dpkg软件包管理器。</code></pre><h3 id="Deb软件包概述"><a href="#Deb软件包概述" class="headerlink" title="Deb软件包概述"></a>Deb软件包概述</h3><pre><code>Deb软件包本质上是文件包，这点类似于tar文件将多个文件合并为一个归档文件。但是Deb的身价不在于整合文件，而在于使应用程序更易于传播。当年流行的两种软件包管理机制最初，基于Linux系统的开发者在完成应用程序开 发后，将很多二进制文件发给用户，用户使用之前需要将相关程序逐个安装。因此，Debian Linux首先提出“软件包”的管理机制——Deb软件包，将应用程序的二进制文件、配置文档、man/info帮助页面等文件合并打包在一个文件中，用 户使用软件包管理器直接操作软件包，完成获取、安装、卸载、查询等操作。随即，Redhat Linux基于这个理念推出了自己的软件包管理机制——Rpm软件包。当然，Redhat Linux采用了自己的打包格式生成Rpm包文件，由Rpm包管理器负责安装、维护、查询，甚至软件包版本管理。由于Redhat Linux系统的普及，Rpm软件包被广泛使用，甚至出现第三方开发的软件管理工具，专门管理Rpm格式的软件包。随着Linux操作系统规模的不断扩大，系统中软件 包之间复杂的依赖关系，导致Linux用户麻烦不断。为了解决这个问题，Debian Linux开发出了APT软件包管理器。它能够自动检查和修复软件包之间的依赖关系。并且，利用Internet网络带来的快捷的连通手段，APT工具可 以帮助用户主动获取软件包。因此，APT工具再次促进了Deb软件包更为广泛地使用，成为Debian Linux的一个无法替代的亮点。Ubuntu Linux系统的软件包管理机制延续了Debian的包管理方法。</code></pre><h3 id="软件包的类型"><a href="#软件包的类型" class="headerlink" title="软件包的类型"></a>软件包的类型</h3><pre><code>Debian包文件包含了二进制可执行文件、库文件、配置文件和man/info帮助页面等文档。通常Debian包文件的后缀为.deb，因此称为“Deb软件包”。Ubuntu有两种类型的软件包：二进制软件包（deb）和源码包（deb-src）。  ●    二进制软件包（Binary Packages）：包含可执行文件、库文件、配置文件、man/info页面、版权声明和其他文档。  ●    源码包（Source Packages）：包含软件源代码、版本修改说明、构建指令以及编译工具等。先由tar工具归档为.tar.gz文件，然后再打包成.dsc文件。用户不确定一个软件包具体类型时，可以使用file命令查看文件类型。例如下面命令用于证实一个软件包的文件类型是否是Deb软件包文件。wdl@UbuntuFisher:~$ file  g++_4.1.2-9ubuntu2_i386.debg++_4.1.2-9ubuntu2_i386: Debian binary package (format 2.0)在Ubuntu Linux中，需要说明一个概念——虚拟软件包。将系统中具有相同或相近功能的多个软件包作为一个软件包集合，称为虚拟软件包，并指定其中一个软件包作为 虚拟软件包的默认首选项。提出虚拟软件的意图就是为了防止软件安装过程中发生冲突。例如，exim、sendmail和postfix软件包都是用于邮件 传输代理，将“mail-transport-agent”指定为它们的虚拟软件包。当用户安装“mail-transport-agent”时，将选择 安装exim、sendmail和postfix其中的首选项。</code></pre><h3 id="软件包的命名"><a href="#软件包的命名" class="headerlink" title="软件包的命名"></a>软件包的命名</h3><pre><code>在Ubuntu Linux中，软件包的命名遵循以下约定：Filename_Version-Reversion_Architecture.deb其中，Filename表示软件包文件名，Version表示软件版本号，Reversion表示修订版本号，Architecture表示适用计算机架构。通常，修订版本号是由Ubuntu开发者或创建这个软件包的人指定。在软件包被修改过之后，将修改版本号加1。以g++_4.1.2-9ubuntu2_i386.deb软件包为例，g++是软件包名，4.1.2是软件版本号，9ubuntu2是修订版本号，i386是适用的计算机架构。</code></pre><h3 id="配置部分"><a href="#配置部分" class="headerlink" title="配置部分"></a>配置部分</h3><pre><code>Ubuntu 方便宜用，最值得让人称道的便是其安装软件的方式, 一条命令: sudo apt-get install xxx 就几乎能帮你搞定所有的软件安装难题。但是有时你可能有这样的需求，查看某个软件包是否安装、安装在哪..., 那我们就来介绍一下 Ubuntu 的软件包管理方式。一、Ubuntu 采用 Debian 的软件包管理器 dpkg 来管理软件包, 类似 RPM. 系统中所有 packages 的信息都在 /var/lib/dpkg/目录下, 其子目录 /var/lib/dpkg/info 用于保存各个软件包的配置文件列表: (1).conffiles 记录了软件包的配置文件列表 (2).list 保存软件包中的文件列表, 用户可以从 .list 的信息中找到软件包中文件的具体安装位置. (3).md5sums 记录了软件包的md5信息, 这个信息是用来进行包验证的. (4).prerm 脚本在 Debian 包解包之前运行, 主要作用是停止作用于即将升级的软件包的服务, 直到软件包安装或升级完成. (5).postinst 脚本是完成 Debian 包解开之后的配置工作, 通常用于执行所安装软件包相关命令和服务重新启动./var/lib/dpkg/available 文件的内容是软件包的描述信息, 该软件包括当前系统所使用的 Debian 安装源中的所有软件包,其中包括当前系统中已安装的和未安装的软件包./var/cache/apt/archives 目录是在用 apt-get install 安装软件时，软件包的临时存放路径/etc/apt/sources.list 存放的是软件源站点, 当你执行 sudo apt-get install xxx 时，Ubuntu 就去这些站点下载软件包到本地并执行安装</code></pre><h2 id="命令操作部分"><a href="#命令操作部分" class="headerlink" title="命令操作部分"></a>命令操作部分</h2><h3 id="apt和dpkg混合命令"><a href="#apt和dpkg混合命令" class="headerlink" title="apt和dpkg混合命令"></a>apt和dpkg混合命令</h3><p> (1)查看某软件包的安装内容<br>    dpkg -L xxx</p><p> (2)查找软件库中的软件包<br>    apt-cache search 正则表达式</p><p> (3)显示系统安装包的统计信息<br>    apt-cache stats</p><p> (4)显示系统全部可用软件包的名称<br>    apt-cache pkgnames</p><p> (5)显示某软件包的详细信息<br>    apt-cache show xxx</p><p> (6)查找某文件属于哪个包<br>    apt-file search xxx</p><p> (7)查看已经安装了哪些软件包<br>    dpkg -l</p><p> (8)查询某软件依赖哪些软件包<br>    apt-cache depends xxx</p><p> (9)查询某软件被哪些软件包依赖<br>    apt-cache rdepends xxx</p><p> (10)增加一个光盘源<br>    sudo apt-cdrom add<br>    注: 顾名思义, 就是安装更新软件包时让其优先从Ubuntu 光盘上找(如果你不能上网安装/更新, 但有 Ubuntu 的 DVD ISO, 这会对你非常有用)</p><p> (11)系统升级<br>    sudo apt-get update</p><p> (12)清除所有已删除软件包的残馀配置文件<br>    dpkg -l |grep ^rc|awk ‘{print $2}’ |sudo xargs dpkg -P</p><p> (13)编译时缺少h文件的自动处理<br>    sudo auto-apt run ./configure</p><p> (14)查看安装软件时下载软件包的临时存放目录<br>    ls /var/cache/apt/archives</p><p> (15)备份当前系统安装的所有软件包的列表<br>    dpkg –get-selections | grep -v deinstall &gt; ~/somefile</p><p> (16)从上面备份的安装包的列表文件恢复所有包<br>    dpkg –set-selections &lt; ~/somefile<br>    sudo dselect</p><p> (17)清理旧版本的软件缓存<br>    sudo apt-get autoclean</p><p> (18)清理所有软件缓存<br>    sudo apt-get clean</p><p> (19)删除系统不再使用的孤立软件<br>    sudo apt-get autoremove</p><p> (20)查看软件包在服务器上面的地址<br>    apt-get -qq –print-uris install ssh | cut -d\’ -f2</p><p> (21)查看安装软件的一些路径信息<br>     dpkg -L 软件包名</p><h3 id="deb包安装"><a href="#deb包安装" class="headerlink" title="deb包安装"></a>deb包安装</h3><pre><code>sudo dpkg -i  &apos;deb文件路径加文件名&apos;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot</title>
      <link href="/MeBlog/2019/05/14/springboot/"/>
      <url>/MeBlog/2019/05/14/springboot/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>springboot是spring的一个boot版本，它的出现是为了让你能更快的体验或使用spring。我经常把它看做spring的简单易用版。那他是从那几个方面去做到spring的简单易用的呢？</p><p>1.约定优于配置 —自动配置<br>2.依赖自带了起步依赖的坐标。—起步依赖</p><h3 id="springboot-quick-（dome）"><a href="#springboot-quick-（dome）" class="headerlink" title="springboot_quick （dome）"></a>springboot_quick （dome）</h3><p>1.pom构建：继承springbootparent ，起步依赖配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_quick<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.创建启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> MysoringBoot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span> springboot boot class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 19-5-12 下午1:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysoringBoot</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SpringApplication.run(MysoringBoot.class) 代表运行SpringBoot的启动类,参数为SpringBoot启动类的字节码对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(MysoringBoot.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.构建访问控制层controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> QuickStartController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span> quick dome contorller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 19-5-12 下午1:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springboot 访问成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>pom中添加热部署</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h3><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><h3 id="springboot配置文件"><a href="#springboot配置文件" class="headerlink" title="springboot配置文件"></a>springboot配置文件</h3><p>SpringBoot是基于约定的,所以很多配置都有默认值,但如果想使用自己的配置替换默认配置的话,就可以使用application.properties或者application.yml(application.yaml)进行配置。</p><p>SpringBoot默认会从Resources目录下加载application.properties或application.yml(application.yaml)</p><p>上面提及过,SpringBoot的配置文件,主要的目的就是对配置信息进行修改的,但在配置时的key从哪里去查询<br>呢?我们可以查阅SpringBoot的官方文档<br>文档URL:<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties</a></p><h3 id="配置文件与配置类的属性映射关系"><a href="#配置文件与配置类的属性映射关系" class="headerlink" title="配置文件与配置类的属性映射关系"></a>配置文件与配置类的属性映射关系</h3><h4 id="value"><a href="#value" class="headerlink" title="@value"></a>@value</h4><p>1.在application.yml 中添加如下属性<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">xiaoming</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p>2.在对应类中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;person.age&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure></p><h4 id="configurationProperties"><a href="#configurationProperties" class="headerlink" title="@configurationProperties"></a>@configurationProperties</h4><p>1.在application.yml 中添加如下属性<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">xiaoming</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p>2.在对应的实体类中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure></p><p>注意使用configurationProperties需要为指定的属性添加getting或setting ，本人使用lombok的@Data自动生成了getting，setting</p><h3 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h3><h4 id="mybatis-整合"><a href="#mybatis-整合" class="headerlink" title="mybatis 整合"></a>mybatis 整合</h4><p>1.pom 中添加坐标<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--由于spring官方没有对mybatis整合提供技术方案支持，所以这里需要使用mybatis提供的整合jar包，并指定版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.application.yml 中配置mybatis及数据库链接信息<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB configuration</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/mybatis_study?useUnicode=true&amp;charaterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">spider</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">*****</span></span><br><span class="line"><span class="comment">#mybatis configuration</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*Mapper.xml</span></span><br></pre></td></tr></table></figure></p><p>3.创建dao控制层和mapper映射文件</p><p>dao层文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itcast.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 19-5-12 下午3:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Mapper ,编写位置对应application.yml中mapper-locations的位置，内容为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itcast.dao.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.itcast.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>4.数据库对应pojo编写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 19-5-12 下午3:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Junit-整合"><a href="#Junit-整合" class="headerlink" title="Junit 整合"></a>Junit 整合</h4><p>1.pom中添加Junit起步依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.编写测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.daoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itcast.MysoringBoot;</span><br><span class="line"><span class="keyword">import</span> com.itcast.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itcast.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> UserMapperTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span> 用户映射测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 19-5-12 下午3:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = MysoringBoot.class)<span class="comment">//程序启动入口类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryListUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        Assert.assertNotNull(users);</span><br><span class="line">        List&lt;User&gt; array = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        array.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="string">"123"</span>,<span class="string">"张三"</span>));</span><br><span class="line">        array.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"lisi"</span>,<span class="string">"123"</span>,<span class="string">"李四"</span>));</span><br><span class="line">        System.out.print(users);</span><br><span class="line">        Assert.assertArrayEquals(users.toArray(),array.toArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="redis-整合"><a href="#redis-整合" class="headerlink" title="redis 整合"></a>redis 整合</h4><p>1.添加起步依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.application.yml 中配置redis所需属性<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">xx.104.xxx.29</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></p><p>3.编写测试类测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redisTest</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    String userListData = redisTemplate.boundValueOps(<span class="string">"user.findAll"</span>).get();</span><br><span class="line">    <span class="keyword">if</span>(userListData==<span class="keyword">null</span>)&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        String uD = <span class="keyword">new</span> ObjectMapper().writeValueAsString(users);</span><br><span class="line">        userListData = uD;</span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">"user.findAll"</span>).set(uD);</span><br><span class="line">        System.out.print(<span class="string">"从数据库中获取"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">"从redis缓存中获取"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(userListData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="springJPA-整合"><a href="#springJPA-整合" class="headerlink" title="springJPA 整合"></a>springJPA 整合</h4><p>1.添加spring Data JPA起步依赖及其所需的一些坐标<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.application.yml中配置数据库及jpa的相关属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mybatis_study?useUnicode=true&amp;charaterEncoding=utf-8&amp;useSSL=true</span><br><span class="line">spring.datasource.username=spider</span><br><span class="line">spring.datasource.password=*****</span><br><span class="line"></span><br><span class="line">spring.jpa.database=MySQL</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line">spring.jpa.generate-ddl=true</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy</span><br></pre></td></tr></table></figure></p><p>3.创建pojo并映射<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 19-5-12 下午4:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.编写dao层的对应操作接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> UserRepository</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descirption</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> WengLiangBao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 19-5-12 下午5:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Vsersion</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.编写测试类测试验证<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.dao.UserRepository;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = DemoApplication.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;User&gt; all = userRepository.findAll();</span><br><span class="line">System.out.print(all);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python_base64</title>
      <link href="/MeBlog/2019/05/05/pyhton_base64/"/>
      <url>/MeBlog/2019/05/05/pyhton_base64/</url>
      
        <content type="html"><![CDATA[<h2 id="目标1：了解base64基础知识，在python中会使用base64"><a href="#目标1：了解base64基础知识，在python中会使用base64" class="headerlink" title="目标1：了解base64基础知识，在python中会使用base64"></a>目标1：了解base64基础知识，在python中会使用base64</h2><h3 id="base64的编码原理（摘录）"><a href="#base64的编码原理（摘录）" class="headerlink" title="base64的编码原理（摘录）"></a>base64的编码原理（摘录）</h3><pre><code>Base64是一种用64个字符来表示任意二进制数据的方法。用记事本打开exe、jpg、pdf这些文件时，我们都会看到一大堆乱码，因为二进制文件包含很多无法显示和打印的字符，所以，如果要让记事本这样的文本处理软件能处理二进制数据，就需要一个二进制到字符串的转换方法。Base64是一种最常见的二进制编码方法。Base64的原理很简单，首先，准备一个包含64个字符的数组：[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, ... &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, ... &apos;0&apos;, &apos;1&apos;, ... &apos;+&apos;, &apos;/&apos;]然后，对二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit：</code></pre><p><img src="https://www.liaoxuefeng.com/files/attachments/949444125467040" alt><br>    这样我们得到4个数字作为索引，然后查表，获得相应的4个字符，就是编码后的字符串。</p><pre><code>所以，Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示。如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。</code></pre><h3 id="python中的base64"><a href="#python中的base64" class="headerlink" title="python中的base64"></a>python中的base64</h3><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64.b64encode(<span class="string">b'binary\x00string'</span>)</span><br></pre></td></tr></table></figure><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64.b64decode(<span class="string">b'YmluYXJ5AHN0cmluZw=='</span>)</span><br></pre></td></tr></table></figure><h4 id="safe"><a href="#safe" class="headerlink" title="safe"></a>safe</h4><pre><code>由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数，所以又有一种&quot;url safe&quot;的base64编码，其实就是把字符+和/分别变成-和_<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64.urlsafe_b64encode(<span class="string">b'i\xb7\x1d\xfb\xef\xff'</span>)</span><br></pre></td></tr></table></figure></code></pre><p>以上内容参考<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017684507717184" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017684507717184</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python_argparse</title>
      <link href="/MeBlog/2019/05/02/python_argparse/"/>
      <url>/MeBlog/2019/05/02/python_argparse/</url>
      
        <content type="html"><![CDATA[<h2 id="argparse由来"><a href="#argparse由来" class="headerlink" title="argparse由来"></a>argparse由来</h2><p>​    原文：</p><p>  The argparse module is a command line parsing library which provides more functionality than the existing command line parsing modules in the standard library, getopt [2] and optparse [3]. It includes support for positional arguments (not just options), subcommands, required options, options syntaxes like “/f” and “+rgb”, zero-or-more and one-or-more style arguments, and many other features the other two lack.</p><p>  The argparse module is also already a popular third-party replacement for these modules. It is used in projects like IPython (the Scipy Python shell) [4], is included in Debian testing and unstable [5], and since 2007 has had various requests for its inclusion in the standard library [6] [7] [8]. This popularity suggests it may be a valuable addition to the Python libraries.</p><p>  个人理解：</p><p>  argparse 是一个命令行分析库，它比标准库中的getopt optparse要强大。argparse属于目前流行的第三方命令分析库。</p><h2 id="命令解析模块必知的一些基础概念"><a href="#命令解析模块必知的一些基础概念" class="headerlink" title="命令解析模块必知的一些基础概念"></a>命令解析模块必知的一些基础概念</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><pre><code>如 ls /home/XXX  其中的 ‘/home/XXX’就称之为位置参数</code></pre><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><pre><code>如 ls -l 其中的 ‘-l’ 就称之为可选参数</code></pre><h3 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h3><pre><code>如 ls --help </code></pre><h2 id="入门dome1"><a href="#入门dome1" class="headerlink" title="入门dome1"></a>入门dome1</h2>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line">parse.parse_args()</span><br></pre></td></tr></table></figure><p>  用来创建一个基础的命令程序<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line">parse.add_argument(<span class="string">'echo'</span>,help=<span class="string">'回显你输入的字符串'</span>)</span><br><span class="line">args = parse.parse_args()</span><br><span class="line">print(args.echo)</span><br></pre></td></tr></table></figure></p><p>  当用户使用命令行python 文件名 –help 会查看到<br>  positional arguments:<br>  echo        回显你输入的字符串</p><p>  positional arguments:</p><pre><code>what is positional arguments?通常它代表命令中的坐标信息，并且它一个必选项参数。下面的dome演示如何构建及其调用</code></pre>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line">parse.add_argument(<span class="string">'echo'</span>,help=<span class="string">'回显你输入的字符串'</span>)</span><br><span class="line">parse.add_argument(<span class="string">'square'</span>,help=<span class="string">'计算输入数的平方'</span>,type=int)</span><br><span class="line"></span><br><span class="line">args = parse.parse_args()</span><br><span class="line">print(args.echo)</span><br><span class="line">print(args.square**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>  当用户使用命令行python 文件名 –help 会查看到<br>  positional arguments:<br>  echo        回显你输入的字符串<br>  square      计算输入数的平方</p><p>  optional arguments:<br>  -h, –help  show this help message and exit</p><p>  optional arguments</p><pre><code>what is optional arguments?它可以代表命令中的一些附件信息，如下面的2个dome一个是表示选择只有一个参数，一个表示选项可以有多个参数</code></pre><h3 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parse.add_argument(<span class="string">'--verbosity'</span>,help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parse.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py </span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py --version</span><br><span class="line">usage: argparse_study.py [-h] [--verbosity VERBOSITY]</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py </span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py -h</span><br><span class="line">usage: argparse_study.py [-h] [--verbosity VERBOSITY]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  --verbosity VERBOSITY</span><br><span class="line">                        increase output verbosity</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py -verbosity 1</span><br><span class="line">usage: argparse_study.py [-h] [--verbosity VERBOSITY]</span><br><span class="line">argparse_study.py: error: unrecognized arguments: -verbosity 1</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py --verbosity 1</span><br><span class="line">verbosity turned on</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$</span><br></pre></td></tr></table></figure><h3 id="单参数"><a href="#单参数" class="headerlink" title="单参数"></a>单参数</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parse.add_argument(<span class="string">'--verbosity'</span>,help=<span class="string">"increase output verbosity"</span>,action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parse.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py --verbosity</span><br><span class="line">verbosity turned on</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py --verbosity 1</span><br><span class="line">usage: argparse_study.py [-h] [--verbosity]</span><br><span class="line">argparse_study.py: error: unrecognized arguments: 1</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py -h</span><br><span class="line">usage: argparse_study.py [-h] [--verbosity]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help   show this help message and exit</span><br><span class="line">  --verbosity  increase output verbosity</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$</span><br></pre></td></tr></table></figure><h3 id="短选项"><a href="#短选项" class="headerlink" title="短选项"></a>短选项</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line">parse.add_argument(<span class="string">'-v'</span>,<span class="string">'--verbosity'</span>,help=<span class="string">'increase output verbosity'</span>,action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parse.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">  print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p>  命令行输入<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py -v 1</span><br><span class="line">verbosity turned on</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py -v </span><br><span class="line">verbosity turned on</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py --verbosity</span><br><span class="line">verbosity turned on</span><br></pre></td></tr></table></figure></p><h3 id="组合Positional和Optional参数"><a href="#组合Positional和Optional参数" class="headerlink" title="组合Positional和Optional参数"></a>组合Positional和Optional参数</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parse = argparse.ArgumentParser()</span><br><span class="line">parse.add_argument(<span class="string">'-v'</span>,<span class="string">'--verbosity'</span>,help=<span class="string">'显示输出详情'</span>,action=<span class="string">'count'</span>,default=<span class="number">1</span>)</span><br><span class="line">parse.add_argument(<span class="string">'square'</span>,help=<span class="string">'计算输入数的平方'</span>,type=int)</span><br><span class="line">args = parse.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity&gt;=<span class="number">1</span>:</span><br><span class="line">  print(<span class="string">'%s^2=%s'</span> %(args.square,answer))</span><br><span class="line"><span class="keyword">if</span> args.verbosity&gt;=<span class="number">2</span>:</span><br><span class="line">  print(<span class="string">'runing %s'</span>%__file__)</span><br><span class="line"><span class="keyword">if</span> args.verbosity&lt;<span class="number">1</span>:</span><br><span class="line">  print(answer)</span><br></pre></td></tr></table></figure><p>  命令行输入显示<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py -h </span><br><span class="line">usage: argparse_study.py [-h] [-v] square</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  square           计算输入数的平方</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help       show this help message and exit</span><br><span class="line">  -v, --verbosity  显示输出详情</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py -h</span><br><span class="line">usage: argparse_study.py [-h] [-v] square</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  square           计算输入数的平方</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help       show this help message and exit</span><br><span class="line">  -v, --verbosity  显示输出详情</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py 4</span><br><span class="line">4^2=16</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py 4 -v</span><br><span class="line">4^2=16</span><br><span class="line">runing argparse_study.py</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py 4 -vv</span><br><span class="line">4^2=16</span><br><span class="line">runing argparse_study.py</span><br></pre></td></tr></table></figure></p><h3 id="选参互斥异常"><a href="#选参互斥异常" class="headerlink" title="选参互斥异常"></a>选参互斥异常</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">parse = argparse.ArgumentParser(description=<span class="string">'calculate X to the power of Y'</span>)</span><br><span class="line">group = parse.add_mutually_exclusive_group();</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line"><span class="comment">#group 添加互斥项，相当于usage: argparse_study.py [-h] [-v | -q] x y 中的[-v | -q] 只能选取一个</span></span><br><span class="line">parse.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parse.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parse.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    print(answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    print(<span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer))</span><br></pre></td></tr></table></figure><h3 id="命令行输入显示"><a href="#命令行输入显示" class="headerlink" title="命令行输入显示"></a>命令行输入显示</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py -h</span><br><span class="line">usage: argparse_study.py [-h] [-v | -q] x y</span><br><span class="line"></span><br><span class="line">calculate X to the power of Y</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  x              the base</span><br><span class="line">  y              the exponent</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help     show this help message and exit</span><br><span class="line">  -v, --verbose</span><br><span class="line">  -q, --quiet</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py 4 2</span><br><span class="line">4^2 == 16</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py 4 2 -v</span><br><span class="line">4 to the power 2 equals 16</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py 4 2 -q</span><br><span class="line">16</span><br><span class="line">spiderbao@spiderbao-CW65S:~/python/study/code$ python3 argparse_study.py 4 2 -vq</span><br><span class="line">usage: argparse_study.py [-h] [-v | -q] x y</span><br><span class="line">argparse_study.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span><br></pre></td></tr></table></figure><p>  以上内容参考<a href="https://docs.python.org/3/howto/argparse.html?highlight=argparse" target="_blank" rel="noopener">https://docs.python.org/3/howto/argparse.html?highlight=argparse</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>系统安全案例及设计理念</title>
      <link href="/MeBlog/2019/04/29/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>/MeBlog/2019/04/29/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="RBAC模型"><a href="#RBAC模型" class="headerlink" title="RBAC模型"></a>RBAC模型</h2><h3 id="什么是RBAC"><a href="#什么是RBAC" class="headerlink" title="什么是RBAC"></a>什么是RBAC</h3><p>RBAC（全称：Role-Based Access Control）基于角色的权限访问控制，作为传统访问控制（自主访问，强制访<br>问）的有前景的代替受到广泛的关注。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些<br>角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责<br>任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合<br>并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观<br>情况。<br>访问控制是针对越权使用资源的防御措施，目的是为了限制访问主体（如用户等） 对访问客体（如数据库资源等）<br>的访问权限。企业环境中的访问控制策略大部分都采用基于角色的访问控制（RBAC）模型，是目前公认的解决大<br>型企业的统一资源访问控制的有效方法</p><h3 id="基于RBAC实现的设计思路"><a href="#基于RBAC实现的设计思路" class="headerlink" title="基于RBAC实现的设计思路"></a>基于RBAC实现的设计思路</h3><p>基于角色的访问控制基本原理是在用户和访问权限之间加入角色这一层，实现用户和权限的分离，用户只有通过激<br>活角色才能获得访问权限。通过角色对权限分组，大大简化了用户权限分配表，间接地实现了对用户的分组，提高<br>了权限的分配效率。且加入角色层后，访问控制机制更接近真实世界中的职业分配，便于权限管理。</p><h3 id="表结构模型图"><a href="#表结构模型图" class="headerlink" title="表结构模型图"></a>表结构模型图</h3><p><img src="http://39.104.171.29:80/image/RBAC_data_model.png" alt></p><h3 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h3><p>前端</p><p>​    动态加载用户的功能模块</p><p>后端</p><p>​    根据用户权限使用API</p><h3 id="基于RBAC-dome-案例分析并实现"><a href="#基于RBAC-dome-案例分析并实现" class="headerlink" title="基于RBAC dome 案例分析并实现"></a>基于RBAC dome 案例分析并实现</h3><h4 id="后台无状态安全校验实现"><a href="#后台无状态安全校验实现" class="headerlink" title="后台无状态安全校验实现"></a>后台无状态安全校验实现</h4><p>​    底层数据</p><p>​        问题：数据如何存储便于后期的使用与管理。</p><p>​        方案：使用RBAC管理模型，根据用户、角色、权限三种概念。来实现数据的访问、使用等相关权限的合理分配。</p><p>​    数据传输</p><p>​        问题：数据传输依托于互联网，如何保证其安全。</p><p>​        方案：认证+校验</p><p>​            认证 ：<a href="C:\Users\sloth\Desktop\md\web_认证机制.md" target="_blank" rel="noopener"></a>依托web认证机制中的方案可实现</p><p>​            校验 ：</p><p>​                实现逻辑 在请求到达controller 时拦截并校验。</p><p>​                实现方式有：filter intercept aop  他们三者的关系如下图</p><p>​                <img src="http://39.104.171.29:80/image/filter-intercept-aop.png" alt></p><p>​                本次案例使用的的过滤方式为，filter 过滤一些不存在token的请求，由intercept拦截校验接下来的数据信息。</p><h4 id="后台有状态安全校验实现"><a href="#后台有状态安全校验实现" class="headerlink" title="后台有状态安全校验实现"></a>后台有状态安全校验实现</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单词库</title>
      <link href="/MeBlog/2019/04/29/%E5%8D%95%E8%AF%8D%E5%BA%93/"/>
      <url>/MeBlog/2019/04/29/%E5%8D%95%E8%AF%8D%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>operating  <a href="http://www.youdao.com/w/eng/operating/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>kernel <a href="http://www.youdao.com/w/eng/kernel/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>enterprise <a href="http://www.youdao.com/w/eng/enterprise/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>movie 电影 <a href="http://www.youdao.com/w/eng/movie/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>advanced <a href="http://www.youdao.com/w/eng/advanced/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>assume <a href="http://www.youdao.com/w/eng/assume/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>echo <a href="http://www.youdao.com/w/eng/echo/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>touch <a href="http://www.youdao.com/w/eng/touch/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>perusal <a href="http://www.youdao.com/w/eng/perusal/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>block <a href="http://www.youdao.com/w/eng/block/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>between <a href="http://www.youdao.com/w/eng/between/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p><p>owner <a href="http://www.youdao.com/w/eng/owner/#keyfrom=dict2.index" target="_blank" rel="noopener">有道详情</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web认证机制</title>
      <link href="/MeBlog/2019/04/29/web_%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/"/>
      <url>/MeBlog/2019/04/29/web_%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP-Basic-Auth"><a href="#HTTP-Basic-Auth" class="headerlink" title="HTTP Basic Auth"></a>HTTP Basic Auth</h2><p>​    HTTP Basic Auth简单点说明就是每次请求API时都提供用户的username和password，简言之，Basic Auth是配合<br>RESTful API 使用的最简单的认证方式，只需提供用户名密码即可，但由于有把用户名密码暴露给第三方客户端的风险，在生产环境下被使用的越来越少。因此，在开发对外开放的RESTful API时，尽量避免采用HTTP Basic Auth</p><p>个人观点：简单易于实现，安全性低</p><h2 id="Cookie-Auth"><a href="#Cookie-Auth" class="headerlink" title="Cookie Auth"></a>Cookie Auth</h2><p>​    Cookie认证机制就是为一次请求认证在服务端创建一个Session对象，同时在客户端的浏览器端创建了一个Cookie<br>对象；通过客户端带上来Cookie对象来与服务器端的session对象匹配来实现状态管理的。默认的，当我们关闭浏览器的时候，cookie会被删除。但可以通过修改cookie 的expire time使cookie在一定时间内有效</p><p>个人观点：可以使应用认证有状态性，要想保证认证的有状态性使得服务器的session频繁创建，会对服务器的开销增加压力。安全性：一般</p><h2 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h2><p>​    OAuth（开放授权）是一个开放的授权标准，允许用户让第三方应用访问该用户在某一web服务上存储的私密的资<br>源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。 OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的第三方系统（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容这种基于OAuth的认证机制适用于个人消者类的互联网产品，如社交类APP等应用，但是不太适合拥有自有认证权限管理的企业应用。</p><p><img src="http://39.104.171.29:80/image/oauth_storm.jpg" alt></p><p>个人观点：安全性高。OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容这种基于OAuth的认证机制适用于个人消者类的互联网产品，如社交类APP等应用，但是不太适合拥有自有认证权限管理的企业应用。</p><h2 id="Token-Auth"><a href="#Token-Auth" class="headerlink" title="Token Auth"></a>Token Auth</h2><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li><li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li></ol><p><img src="http://39.104.171.29:80/image/token_auth_storm.jpg" alt></p><p>Token Auth的优点</p><p>​    支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.<br>    无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.<br>    更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.<br>    去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.<br>    更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。<br>    CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。<br>性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.<br>    不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.<br>    基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby,<br>Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot-MultipartAutoConfiguration</title>
      <link href="/MeBlog/2019/04/29/SpringBoot-MultipartAutoConfiguration/"/>
      <url>/MeBlog/2019/04/29/SpringBoot-MultipartAutoConfiguration/</url>
      
        <content type="html"><![CDATA[<h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>​    今天本人想实现一个文件上传的功能。</p><p>​    文件上传的难点在以什么样的传输格式上传文件。</p><p>​    一般 表单 提交 所 形成 的 请求 结果是 很 简单 的， 就是 以“&amp;” 符 分割 的 多个 name- value 对。 例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firstName= Charles&amp; lastName= Xavier&amp; email= professorx% 40xmen. org &amp;username= professorx&amp; password= letmein01</span><br></pre></td></tr></table></figure><p>尽管 这种 编码 形式 很 简单， 并且 对于 典型的 基于 文本 的 表单 提交 也 足够 满足要求， 但是 对于 传送 二进制 数据， 如上 传 图片等文件， 就 显得 力不从心 了。</p><p>​    那么对应二进制数据的上传依托Http请求要怎么去实现呢？</p><p>​    multipart 格式 的 数据 会 将 一个 表单 拆分 为多 个 部分（ part）， 每个 部分 对应 一个 输入 域。 在 一般 的 表单 输入 域 中， 它 所 对应 的 部分 中会 放置 文本 型 数据， 但是 如果 上传 文件 的 话， 它 所 对应 的 部分 可以 是 二进制， 下面 展现 了 multipart 的 请求 体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryqgkaBn8IHJCuNmiW Content- Disposition: form- data; name=&quot; firstName&quot; Charles </span><br><span class="line">------WebKitFormBoundaryqgkaBn8IHJCuNmiW Content- Disposition: form- data; name=&quot; lastName&quot; Xavier ------WebKitFormBoundaryqgkaBn8IHJCuNmiW Content- Disposition: form- data; name=&quot; email&quot; charles@ xmen. com </span><br><span class="line">------WebKitFormBoundaryqgkaBn8IHJCuNmiW Content- Disposition: form- data; name=&quot; username&quot; professorx </span><br><span class="line">------WebKitFormBoundaryqgkaBn8IHJCuNmiW Content- Disposition: form- data; name=&quot; password&quot; letmein01 </span><br><span class="line">------WebKitFormBoundaryqgkaBn8IHJCuNmiW Content- Disposition: form- data; name=&quot; profilePicture&quot;; filename=&quot; me. jpg&quot; Content- Type: image/ jpeg [[ Binary image data goes here ]] </span><br><span class="line">------WebKitFormBoundaryqgkaBn8IHJCuNmiW--</span><br></pre></td></tr></table></figure><p>在 这个 multipart 的 请求 中， 我们 可以 看到 profilePicture 部分 与其 他 部分 明显 不同。 除了 其他 内容 以外， 它 还有 自己的 Content- Type 头， 表明 它是 一个 JPEG 图片。 尽管 不一定 那么 明显， 但 profilePicture 部分 的 请求 体 是 二进制 数据， 而 不是 简单 的 文本。</p><p>尽管 multipart 请求 看起来 很复杂， 但通过 Spring MVC 处理 它们 却 很容易。 在 编写 控制器 方法 处理 文件 上传 之前， 我们 必须 要 配置 一个 multipart 解析 器， 通过 它来 告诉 DispatcherServlet 该 如何 读取 multipart 请求。</p><p>​    spring mvc 对multipart 解析器定义了 multipart Resolver 接口规范。 并提供了CommonsMultipartResolver： 使用 Jakarta Commons FileUpload 解析 multipart 请求的实现和StandardServletMultipartResolver： 依赖于 Servlet 3. 0 对 multipart 请求 的 支持（ 始于 Spring 3. 1）。</p><p><img src="http://39.104.171.29:80/image/CommonsMultipartResolver.png" alt></p><p><img src="http://39.104.171.29:80/image/StandardServletMultipartResolver.png" alt></p><p>使用springboot 如何操作multipart Resolver  接下来请看MultipartAutoConfiguration装配类都做了什么</p><h2 id="MultipartAutoConfiguration"><a href="#MultipartAutoConfiguration" class="headerlink" title="MultipartAutoConfiguration"></a>MultipartAutoConfiguration</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>modelAttribute注解</title>
      <link href="/MeBlog/2019/04/29/modelAttribute%E6%B3%A8%E8%A7%A3/"/>
      <url>/MeBlog/2019/04/29/modelAttribute%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="modelAttribute"><a href="#modelAttribute" class="headerlink" title="@modelAttribute"></a>@modelAttribute</h2><pre><code>moelAttribute 是springmvc提供的注解。1.运用在参数上，会将客户端传递过来的参数按名称注入到指定对象中，并且会将这个对象自动加入ModelMap中，便于View层使用；2.运用在方法上，会在每一个@RequestMapping标注的方法前执行，如果有返回值，则自动将该返回值加入到ModelMap中；</code></pre><h3 id="运用在方法上"><a href="#运用在方法上" class="headerlink" title="运用在方法上"></a>运用在方法上</h3><h4 id="实现案例，抽取request-和response、modelMap将其注入在baseController中。"><a href="#实现案例，抽取request-和response、modelMap将其注入在baseController中。" class="headerlink" title="实现案例，抽取request 和response、modelMap将其注入在baseController中。"></a>实现案例，抽取request 和response、modelMap将其注入在baseController中。</h4><p>beseController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initParams</span><span class="params">(HttpServletResponse response,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基础controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.healthengine.medpro.common.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBaseController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/modelAttributeTest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">modelAttributeTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        request.getAuthType();</span><br><span class="line">        response.getStatus();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：其中的response是多例线程不安全的，如果想要时其线程安全可以使用ThreadLocal</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 参数校验</title>
      <link href="/MeBlog/2019/04/29/springboot_param_validation/"/>
      <url>/MeBlog/2019/04/29/springboot_param_validation/</url>
      
        <content type="html"><![CDATA[<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​JSR-303 实现方案+JSR-349Bean 验证</p><p>JSR-303的实现使用hibernate的实现 @Valid注解</p><p>JSR-349Bean 验证的实现使用spring提供的@Validated注解</p><h3 id="校验案例"><a href="#校验案例" class="headerlink" title="校验案例"></a>校验案例</h3><p>本案例的环境为，springboot2.0.5.RELEASE</p><p>基础代码实现：</p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此坐标包含了@Valid 和@Validated</p></li><li><p>创建入口启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.healthengine.department;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.healthengine.medpro.common.utils.IdWorker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>()</span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.healthengine.department"</span>)</span><br><span class="line"><span class="meta">@EntityScan</span>(<span class="string">"com.healthengine.medpro.department"</span>)</span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.healthengine.department.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(DepartmentApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//雪花算法用来生成id</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdWorker <span class="title">idWorker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IdWorker(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：此入口启动类要放在Controller包的同级目录下，因为@SpringBootApplication注解会扫描同级目录及其子目录。此类只放在java目录下是不对的。要放在Java目录下的下级目录下</p><p><img src="http://39.104.171.29:80/image/springBoot-validatd1.png" alt>（正确目录格式）</p><p><img src="http://39.104.171.29:80/image/springBoot-validatd2.png" alt>(错误目录格式)</p></li></ol><ol start="3"><li><p>配置文件设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">medpro-department</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/medprotwo</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    open-in-view:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>创建controller</p></li></ol><p>案例使用到的java Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.healthengine.medpro.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.healthengine.medpro.department.Department;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"co_company"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">594829320797158219L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"用户名不能为空！"</span>,groups = &#123;AddDepartment.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String managerId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"版本号不能为空"</span>,groups = &#123;AddDepartment.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date renewalDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date expirationDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String companyArea;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String companyAddress;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String businessLicenseId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String legalRepresentative;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String companyPhone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mailbox;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String companySize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String industry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remarks;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String auditState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部门列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">//开启嵌套校验</span></span><br><span class="line">    <span class="meta">@NotEmpty</span>(groups = &#123;AddDepartment.class&#125;,message = <span class="string">"部门列表不能为空！"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Department&gt; departmentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.healthengine.medpro.department;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"co_department"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"id不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 企业id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String companyId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部门名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部门编码，同级部门不可重复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负责人id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String managerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负责人名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String manager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 介绍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String introduce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date create;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.healthengine.medpro.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AddDepartment</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基础校验（快速尝鲜）"><a href="#基础校验（快速尝鲜）" class="headerlink" title="基础校验（快速尝鲜）"></a>基础校验（快速尝鲜）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象参数校验</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/test1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">test1</span><span class="params">(@Validated @RequestBody Company company)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(ResultCode.SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单个参数校验"><a href="#单个参数校验" class="headerlink" title="单个参数校验"></a>单个参数校验</h4><ol><li><p>在类中加入@Validated</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>()</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/validation"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationTest</span> </span>&#123;</span><br></pre></td></tr></table></figure></li><li><p>方法上对参数使用校验注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">test2</span><span class="params">(@NotNull(message = <span class="string">"年齡不能為空"</span>)</span> Integer age)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(ResultCode.SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3></li><li><p>创建分组标识接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AddDepartment</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在要校验的字段上使用校验注解并添加groups属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotBlank</span>(message = <span class="string">"用户名不能为空！"</span>,groups = &#123;AddDepartment.class&#125;)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>在方法上使用校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/test3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">test3</span><span class="params">(@Validated(AddDepartment.class)</span> @RequestBody Company company)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(ResultCode.SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套属性校验"><a href="#嵌套属性校验" class="headerlink" title="嵌套属性校验"></a>嵌套属性校验</h3></li><li><p>在要需要嵌套校验的对象上添加@valid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部门列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Valid</span> <span class="comment">//开启嵌套校验</span></span><br><span class="line"><span class="meta">@NotEmpty</span>(groups = &#123;AddDepartment.class&#125;,message = <span class="string">"部门列表不能为空！"</span>)</span><br><span class="line"><span class="keyword">private</span> List&lt;Department&gt; departmentList;</span><br></pre></td></tr></table></figure></li><li><p>在方法上使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/test4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">test4</span><span class="params">(@Valid @Validated(AddDepartment.class)</span> @RequestBody Company company)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(ResultCode.SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非嵌套属性校验"><a href="#非嵌套属性校验" class="headerlink" title="非嵌套属性校验"></a>非嵌套属性校验</h3></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/test4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">test4</span><span class="params">(@Validated(AddDepartment.class)</span> @RequestBody Company company)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(ResultCode.SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义校验规则"><a href="#自定义校验规则" class="headerlink" title="自定义校验规则"></a>自定义校验规则</h4><h3 id="校验异常类全局处理"><a href="#校验异常类全局处理" class="headerlink" title="校验异常类全局处理"></a>校验异常类全局处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.healthengine.department.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.healthengine.medpro.common.entity.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConversionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个参数异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ConstraintViolationException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">constraintViolationException</span><span class="params">(ConstraintViolationException ce)</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(ConstraintViolation violation:ce.getConstraintViolations())&#123;</span><br><span class="line">            sb.append(<span class="string">"异常信息： "</span>+violation.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">500</span>,sb.toString(),<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实体类异常抛出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">validationBodyException</span><span class="params">(MethodArgumentNotValidException exception)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        BindingResult result = exception.getBindingResult();</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;ObjectError&gt; errors = result.getAllErrors();</span><br><span class="line"></span><br><span class="line">            errors.forEach(p -&gt;&#123;</span><br><span class="line"></span><br><span class="line">                FieldError fieldError = (FieldError) p;</span><br><span class="line">                sb.append(<span class="string">"异常字段："</span>+fieldError.getField()+<span class="string">" 异常信息："</span>+fieldError.getDefaultMessage()).append(System.lineSeparator());</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">500</span>,sb.toString(),<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数类型转换错误</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception 错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(HttpMessageConversionException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">parameterTypeException</span><span class="params">(HttpMessageConversionException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">500</span>,exception.getCause().getLocalizedMessage(),<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例后发现的缺陷"><a href="#案例后发现的缺陷" class="headerlink" title="案例后发现的缺陷"></a>案例后发现的缺陷</h3><ol><li><p>使用hibernate参数校验注解后发现，使用Spring jpa 存入数据时也会产生校验。</p><p>目前解决方案，使用注解时为其分组。这样可以解决存入数据库时的校验，当存入数据库前，想做校验需要自己手动编写逻辑。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-软件管理篇</title>
      <link href="/MeBlog/2019/04/29/Linux-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E7%AF%87/"/>
      <url>/MeBlog/2019/04/29/Linux-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="软件包管理简介"><a href="#软件包管理简介" class="headerlink" title="软件包管理简介"></a>软件包管理简介</h2><p><img src="http://39.104.171.29/image/1554165969408.png" alt="1554165969408"></p><p><img src="http://39.104.171.29/image/1554166782008.png" alt="1554166782008"></p><p><img src="http://39.104.171.29/image/1554167202716.png" alt="1554167202716"></p><p><img src="http://39.104.171.29/image/1554167710627.png" alt="1554167710627"></p><p><img src="http://39.104.171.29/image/1554167773662.png" alt="1554167773662"></p><p>总结：Linux 软件安装包分为</p><p>​    源码包安装</p><p>​        优点：可控性高，可以自己查看或修改程序的源代码。安装后软件的执行效率高，比厂商提供的二进制包高5%</p><p>​        缺点：需要自己手动编译源码后才可安装，操作难度高。</p><p>​    二进制包安装</p><p>​        优点：安装速度块，由于使用的是厂商编译过的二进制包，所有省去了自己对源码的手动编译。直接安装即可。</p><p>​        缺点：不可以直接查看程序的源代码。安装后软件的执行效率比自己手动编译的的软件包慢5%。并且安装软件存在依赖性问题</p><p>​    脚本包安装</p><p>​        优点：脚本包安装类似与Windows下的软件安装界面。它是源码包安装和二进制包安装的中和方式。运行脚本后，脚本会帮助你去编译软件的源代码并安装。</p><p>​        缺点：单独编写软件脚本</p><h2 id="RPM-包管理（二进制包）"><a href="#RPM-包管理（二进制包）" class="headerlink" title="RPM 包管理（二进制包）"></a>RPM 包管理（二进制包）</h2><h3 id="rpm的命名规则"><a href="#rpm的命名规则" class="headerlink" title="rpm的命名规则"></a>rpm的命名规则</h3><p><img src="http://39.104.171.29/image/1554169009132.png" alt="1554169009132"></p><p>包名或包全名例子</p><p>​    httpd-2.2.15-15.el6.centos.1.i686.rpm</p><p>​    包名 : httpd</p><p>​    包全名 : httpd-2.2.15-15.el6.centos.1.i686.rpm</p><h3 id="rpm的依赖性"><a href="#rpm的依赖性" class="headerlink" title="rpm的依赖性"></a>rpm的依赖性</h3><p><img src="http://39.104.171.29/image/1554170327297.png" alt="1554170327297"></p><p>总结：</p><p>​    rpm包的命名规则：</p><p>​    软件包名-软件版本-软件的发布次数.适合的Linux平台.适合的硬件平台.rpm包扩展名</p><p>​    rpm依赖性：</p><p>​        树形依赖 ：如安装软件包a时发现需要安装软件包b,而安装软件包b又需要软件包c.</p><p>解决上述的树形依赖问题的方法：先安装软件包c然后依次安装软件包b,软件包a</p><p>​        环形依赖：如安装软件包a时发现需要安装软件包b,而安装软件包b需要安装软件包c,但是安装软件包c却需要软件包a,这样就形成了环形的依赖结构。</p><p>环形依赖解决方案：同时安装包a,b,c即可解决此问题。</p><p>​        模块依赖：模块依赖和软件包依赖不同之处在于，模块所依赖的包，有可能不在系统安装包内。</p><p>解决方案：进入 <a href="http://www.rpmfind.net" target="_blank" rel="noopener">www.rpmfind.net</a> 搜索需要的模块包</p><h3 id="包全名和包名的使用介绍"><a href="#包全名和包名的使用介绍" class="headerlink" title="包全名和包名的使用介绍"></a>包全名和包名的使用介绍</h3><p><img src="http://39.104.171.29/image/1554172185949.png" alt="1554172185949"></p><h3 id="rpm安装升级卸载"><a href="#rpm安装升级卸载" class="headerlink" title="rpm安装升级卸载"></a>rpm安装升级卸载</h3><p><img src="http://39.104.171.29/image/1554172274777.png" alt="1554172274777"></p><p><img src="http://39.104.171.29/image/1554172740075.png" alt="1554172740075"></p><p><img src="http://39.104.171.29/image/1554172783240.png" alt="1554172783240"></p><p>总结：</p><ol><li><p>什么时候使用包全名或包名</p><ol><li>包全名，在软件没有安装并需要使用的情况下。如软件的安装或更新</li><li>包名，在软件已经被安装的情况下。如软件的卸载</li></ol></li><li><p>rpm实现包安装</p><p>在进入安装包目录的情况下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh 需要安装的包全名（need install package name）</span><br></pre></td></tr></table></figure></li><li><p>rpm实现包升级</p><p>在进入安装包目录的情况下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh 需要更新的包全名（need update package name）</span><br></pre></td></tr></table></figure></li><li><p>rpm实现包卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e 需要卸载的包名 （need deleter package name）</span><br></pre></td></tr></table></figure></li></ol><h3 id="rpm查询"><a href="#rpm查询" class="headerlink" title="rpm查询"></a>rpm查询</h3><h4 id="查询是否安装"><a href="#查询是否安装" class="headerlink" title="查询是否安装"></a>查询是否安装</h4><p><img src="http://39.104.171.29/image/1554173640238.png" alt="1554173640238"></p><h4 id="安装包的详细信息查询"><a href="#安装包的详细信息查询" class="headerlink" title="安装包的详细信息查询"></a>安装包的详细信息查询</h4><p><img src="http://39.104.171.29/image/1554174085399.png" alt="1554174085399"></p><h4 id="RPM的安装位置查询"><a href="#RPM的安装位置查询" class="headerlink" title="RPM的安装位置查询"></a>RPM的安装位置查询</h4><p><img src="http://39.104.171.29/image/1554174169009.png" alt="1554174169009"></p><h4 id="根据文件名查询rpm包"><a href="#根据文件名查询rpm包" class="headerlink" title="根据文件名查询rpm包"></a>根据文件名查询rpm包</h4><p><img src="http://39.104.171.29/image/1554174656232.png" alt="1554174656232"></p><h4 id="查询安装包的依赖性"><a href="#查询安装包的依赖性" class="headerlink" title="查询安装包的依赖性"></a>查询安装包的依赖性</h4><p><img src="http://39.104.171.29/image/1554174809684.png" alt="1554174809684"></p><p>总结：</p><p>rpm查询</p><ol><li><p>查询是否安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -q 包名 （package name）</span><br></pre></td></tr></table></figure><p>系统已经安装的所有安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>安装包的详细信息查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qi 包名 （package name）</span><br></pre></td></tr></table></figure></li><li><p>RPM的安装位置查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql 包名 （package name）</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>获取给定文件名属于哪个RPM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qf 文件名 （file name）</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>查询RPM的依赖性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qR 包名（package name）</span><br></pre></td></tr></table></figure></li></ol><h3 id="rpm包校验"><a href="#rpm包校验" class="headerlink" title="rpm包校验"></a>rpm包校验</h3><p><img src="http://39.104.171.29/image/1554175762509.png" alt="1554175762509"></p><p><img src="http://39.104.171.29/image/1554175960568.png" alt="1554175960568"></p><p><img src="http://39.104.171.29/image/1554176086475.png" alt="1554176086475"></p><h3 id="rpm包提取"><a href="#rpm包提取" class="headerlink" title="rpm包提取"></a>rpm包提取</h3><p><img src="http://39.104.171.29/image/1554176212571.png" alt="1554176212571"></p><p><img src="http://39.104.171.29/image/1554176347181.png" alt="1554176347181"></p><p>总结：</p><p>rpm 包校验</p><p>rpm 包提取</p><p>/usr/bin/ls  文件提取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm2cpio /mnt/cdrom/Packages/coreutils-8.22-23.el7.x86_64.rpm | cpio -idv ./usr/bin/ls</span><br></pre></td></tr></table></figure><h3 id="yum在线管理-IP地址配置"><a href="#yum在线管理-IP地址配置" class="headerlink" title="yum在线管理-IP地址配置"></a>yum在线管理-IP地址配置</h3><p>使用 red heat 的setup命令</p><p>本人使用的是contos7，发现使用setup后没有网络配置项，在网上查他们说需要使用yum去安装setup的一些功能项。（未做测试）</p><p>那我是怎么配置使自己的系统可以访问外网的呢？我直接修改改network 的配置文件（/etc/sysconfig/network-scripts/ifcfg-ens33）文件，将ONBOOT 设为 true，然后就可以上网了。</p><h3 id="网络yum源"><a href="#网络yum源" class="headerlink" title="网络yum源"></a>网络yum源</h3><p>本人安装的contos已经默认安装并配置了yum源，下面是有关yum源的一些配置属性的解释</p><p><img src="http://39.104.171.29/image/1554189939317.png" alt="1554189939317"></p><p>使用镜像（mirror）</p><ol><li>下载镜像repo配置文件 <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a> </li><li>将原repo文件备份为 repo.backup</li><li>将下载好的Centos-7.repo 移动到/etc/yum.repos.d/下并改名为CentOS-Base.repo</li></ol><p>总结：</p><p>​    1.系统上网配置，使用setup 下的网络配置，配置ip 子网掩码 网关 CSDN 保存即可，设置后记得修改network 的网络配置文件，将ONBOOT 设为true， 之后service network restart 重启即可，然后使用ping命令测试系统是否联网</p><p>​    2.yum 配置使用contos默认即可</p><p>​    3.yum mirror设置，上述配置即可</p><h3 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p><img src="http://39.104.171.29/image/1554192514578.png" alt="1554192514578"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><img src="http://39.104.171.29/image/1554194593714.png" alt="1554194593714"></p><p>​    注意 当更新时，没有指定包名，yum会更新整个系统中所有软件甚至内核也会被升级。</p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p><img src="http://39.104.171.29/image/1554194899289.png" alt="1554194899289"></p><h4 id="yum软件组使用"><a href="#yum软件组使用" class="headerlink" title="yum软件组使用"></a>yum软件组使用</h4><p><img src="http://39.104.171.29/image/1554195154103.png" alt="1554195154103"></p><p>总结：</p><p>​    系统安装原则：最小化安装，用需要用什么软件，就安装什么软件。最好不要卸载软件。更新软件时要注意指定软件名，不然就会更新整个系统（包括内核）。安装时-y 命令要在安装熟练时使用，一般慎用</p><h3 id="yum光盘源搭建"><a href="#yum光盘源搭建" class="headerlink" title="yum光盘源搭建"></a>yum光盘源搭建</h3><p><img src="http://39.104.171.29/image/1554195811036.png" alt="1554195811036"><img src="http://39.104.171.29/image/1554196150392.png" alt="1554196150392"></p><h2 id="源码包安装管理"><a href="#源码包安装管理" class="headerlink" title="源码包安装管理"></a>源码包安装管理</h2><h3 id="源码包和rpm包的区别"><a href="#源码包和rpm包的区别" class="headerlink" title="源码包和rpm包的区别"></a>源码包和rpm包的区别</h3><p>​  安装之前的区别：概念上的区别</p><p>​  安装之后的区别：安装位置不同</p><p><img src="http://39.104.171.29/image/1554360805482.png" alt="1554360805482"></p><p><img src="http://39.104.171.29/image/1554360845078.png" alt="1554360845078"></p><p>​  由于源码包和rpm 安装包的安装位置不同导致了，应用的启动方式选择面不同</p><p>​  rpm 包安装的软件可以 使用 service 去执行命令，也可以使用 绝对路径 + 命令的方法操作</p><p>​  源码包 只能通过 绝对路径 + 命令的方法操作</p><p>​  service 操作软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service tomcat start</span><br></pre></td></tr></table></figure><p>​  绝对路径+命令方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/tomcat start</span><br></pre></td></tr></table></figure><h3 id="源码包安装过程"><a href="#源码包安装过程" class="headerlink" title="源码包安装过程"></a>源码包安装过程</h3><p><img src="http://39.104.171.29/image/1554360911277.png" alt="1554360911277"></p><p><img src="http://39.104.171.29/image/1554361918473.png" alt="1554361918473"></p><h4 id="源码包安装流程"><a href="#源码包安装流程" class="headerlink" title="源码包安装流程"></a>源码包安装流程</h4><ol><li>下载源码包文件</li><li>解压源码包文件到 /usr/local/ 源码文件名 下</li><li>进入解压目录阅读 INSTALL 文档，查看如何安装。</li><li>使用make  命令编译源码</li><li>使用make install 命令安装</li></ol><p>INSTALL安装说明文档</p><p>README使用说明</p><p>make 编译</p><p>make install 编译安装</p><p>make clean 清空编译</p><p><img src="http://39.104.171.29/image/1554362742757.png" alt="1554362742757"></p><p>###脚本安装包</p><p><img src="http://39.104.171.29/image/1554368570910.png" alt="1554368570910"></p><p><img src="http://39.104.171.29/image/1554368673263.png" alt="1554368673263"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-用户用户组篇</title>
      <link href="/MeBlog/2019/04/29/Linux-%E7%94%A8%E6%88%B7%E7%94%A8%E6%88%B7%E7%BB%84%E7%AF%87/"/>
      <url>/MeBlog/2019/04/29/Linux-%E7%94%A8%E6%88%B7%E7%94%A8%E6%88%B7%E7%BB%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h1><p>如何去做用户管理</p><p>越是对服务器安全性要求高的服务器，越需要建立合理的用户权限等级制度和服务器操作规范。</p><p>在Linux中主要是通过用户配置文件来查看和修改用户信息。</p><h2 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h2><h3 id="用户信息文件-etc-passwd"><a href="#用户信息文件-etc-passwd" class="headerlink" title="用户信息文件/etc/passwd"></a>用户信息文件/etc/passwd</h3><p>这个 文件 中 保存 的 就是 系统 中 所有 的 用户 和 用户 的 主要 信息。</p><p>文档解读：</p><p>​    文件中一行代表一个用户，每行分为7个字段，下面解释下这7个字段分别附有什么含有</p><p>​    1.用户名称</p><p>​    2.密码标识 ，具体密码信息需要进入/etc/shadow查看，并且密码采用SHA512散列加密算法.</p><p>​    3.uid 用户的id标识 0表示超级用户，而且前499已经被系统占用</p><p>​    4.gid 表示用户组id标识 这里指的是用户的初始组</p><p>​    5.用户说明信息</p><p>​    6.用户的home 目录</p><p>​    7.用户登陆后所能执行的shell脚本</p><h3 id="影子文件-etc-shadow"><a href="#影子文件-etc-shadow" class="headerlink" title="影子文件/etc/shadow"></a>影子文件/etc/shadow</h3><p>​    文件中存储了关于用户的密码的一些信息</p><p>​    同样每行表示每个用户的密码信息，每行分为6个字段</p><p>​    1.用户名称</p><p>​    2.密码 经过加密后的，被锁定的密码前会加入！！</p><p>​    3.密码最后一次修改日期</p><p>​    4.密码的两次修改时间间隔（和3做比较）</p><p>​    5.密码的有效期（和3做比较）</p><p>​    6.密码修改到期前的警告天数（和5做比较）</p><h3 id="组织信息文件-etc-group和组密码文件-etc-gshadow"><a href="#组织信息文件-etc-group和组密码文件-etc-gshadow" class="headerlink" title="组织信息文件/etc/group和组密码文件/etc/gshadow"></a>组织信息文件/etc/group和组密码文件/etc/gshadow</h3><p>​    /etc/group 存储了信息用户组的信息</p><p>​    /etc/gshadow 存储了用户组管理员以及密码的一些信息</p><p>​    具体详情 可查阅 man 5 gshadow</p><h2 id="用户管理相关的文件"><a href="#用户管理相关的文件" class="headerlink" title="用户管理相关的文件"></a>用户管理相关的文件</h2><p>​    1.用户的家目录</p><p>​        /home/用户名称 或/root/</p><p>​    2.用户邮箱目录</p><p>​        /var/spool/mail/用户名称</p><p>​    3.用户模板目录</p><p>​        /etc/skel</p><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><p>​    添加用户 useradd [选项] 用户名</p><p>​    指定修改用户密码 passwd  [选项]  用户名</p><p>​    修改用户信息 usermod [选项]  用户名</p><p>​    删除用户 userdel [选项] 用户名</p><p>​    切换用户 su [选项] 用户名</p><p>​        “-” 切换后使用切换用户的环境</p><p>​        “-c” 仅执行一次命令</p><h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><p>​    添加用户组 groupadd [选项] 组名</p><p>​    修改用户组 groupmod [选项] 组名</p><p>​    删除用户组 groupdel [选项] 组名</p><p>​    把用户加入组中 gpasswd 选项 组名</p><p>​        “-a” 用户名 把用户加入组</p><p>​        “-d”用户名 把用户从组中删除</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jwt</title>
      <link href="/MeBlog/2019/04/29/jwt/"/>
      <url>/MeBlog/2019/04/29/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是jwt"><a href="#什么是jwt" class="headerlink" title="什么是jwt"></a>什么是jwt</h2><p>​    JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的<br>信息。在Java世界中通过JJWT实现JWT创建和验证。</p><h2 id="jjwt快速尝鲜"><a href="#jjwt快速尝鲜" class="headerlink" title="jjwt快速尝鲜"></a>jjwt快速尝鲜</h2><ol><li><p>引入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面使用的坐标是基于apache2.0 下的jwt实现</p></li><li><p>使用并测试</p><p>生成token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JwtBuilder jwt = Jwts.builder()</span><br><span class="line">                .setId(<span class="string">"123"</span>)</span><br><span class="line">                .setSubject(<span class="string">"老王"</span>)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())<span class="comment">//发布时间</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis()+<span class="number">6000</span>))<span class="comment">//到期时间</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS384,<span class="string">"XXXXX"</span>);<span class="comment">//设置密钥</span></span><br><span class="line">String compact = jwt.compact();<span class="comment">//签约生成token</span></span><br><span class="line">System.out.println(compact);</span><br></pre></td></tr></table></figure><p>解析token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Claims cla = Jwts.parser()</span><br><span class="line">    .setSigningKey(<span class="string">"XXXXX"</span>)<span class="comment">//设置密钥</span></span><br><span class="line">    .parseClaimsJws(key)<span class="comment">//设置token</span></span><br><span class="line">    .getBody();</span><br></pre></td></tr></table></figure><p>当token认证失败时会抛出ExpiredJwtException异常</p><p>自定义claims</p><p>生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为了方便测试，我们将过期时间设置为1分钟</span></span><br><span class="line"><span class="keyword">long</span> now = System.currentTimeMillis();<span class="comment">//当前时间</span></span><br><span class="line"><span class="keyword">long</span> exp = now + <span class="number">1000</span>*<span class="number">60</span>;<span class="comment">//过期时间为1分钟</span></span><br><span class="line">JwtBuilder builder= Jwts.builder().setId(<span class="string">"888"</span>)</span><br><span class="line">.setSubject(<span class="string">"小白"</span>)</span><br><span class="line">.setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">.signWith(SignatureAlgorithm.HS256,<span class="string">"itcast"</span>)</span><br><span class="line">.setExpiration(<span class="keyword">new</span> Date(exp))</span><br><span class="line">.claim(<span class="string">"roles"</span>,<span class="string">"admin"</span>) <span class="comment">//自定义claims存储数据</span></span><br><span class="line">.claim(<span class="string">"logo"</span>,<span class="string">"logo.png"</span>);</span><br><span class="line">System.out.println( builder.compact() );</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String</span><br><span class="line">compactJws=<span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1MjM0MT</span></span><br><span class="line"><span class="string">czMjMsImV4cCI6MTUyMzQxNzM4Mywicm9sZXMiOiJhZG1pbiIsImxvZ28iOiJsb2dvLnBuZyJ9.b11p4g4rE94r</span></span><br><span class="line"><span class="string">qFhcfzdJTPCORikqP_1zJ1MP8KihYTQ"</span>;</span><br><span class="line">Claims claims =</span><br><span class="line">Jwts.parser().setSigningKey(<span class="string">"itcast"</span>).parseClaimsJws(compactJws).getBody();</span><br><span class="line">System.out.println(<span class="string">"id:"</span>+claims.getId());</span><br><span class="line">System.out.println(<span class="string">"subject:"</span>+claims.getSubject());</span><br><span class="line">System.out.println(<span class="string">"roles:"</span>+claims.get(<span class="string">"roles"</span>));</span><br><span class="line">System.out.println(<span class="string">"logo:"</span>+claims.get(<span class="string">"logo"</span>));</span><br><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">System.out.println(<span class="string">"签发时间:"</span>+sdf.format(claims.getIssuedAt()));</span><br><span class="line">System.out.println(<span class="string">"过期时间:"</span>+sdf.format(claims.getExpiration()));</span><br><span class="line">System.out.println(<span class="string">"当前时间:"</span>+sdf.format(<span class="keyword">new</span> Date()) );</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jodconverter</title>
      <link href="/MeBlog/2019/04/29/jodconverter/"/>
      <url>/MeBlog/2019/04/29/jodconverter/</url>
      
        <content type="html"><![CDATA[<h2 id="jodconverter"><a href="#jodconverter" class="headerlink" title="jodconverter"></a>jodconverter</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>​    概念：</p><p>​        jodconverter的全称是 java Document Converter ,它可以在不同的办公室格式之间转换文档。它利用了<a href="https://www.openoffice.org/" target="_blank" rel="noopener">Apache OpenOffice</a>或<a href="https://www.libreoffice.org/" target="_blank" rel="noopener">LibreOffice</a>， </p><p>​    <strong>JODConverter</strong>自动执行OpenOffice / LibreOffice支持的所有转换。支持的转化包括： </p><table><thead><tr><th>文件类型</th><th>输入格式</th><th>输出格式</th></tr></thead><tbody><tr><td>文本</td><td>DOC，DOCX，ODT，OTT，RTF，TEXT</td><td>DOC，DOCX，HTML，ODT，OTT，PDF，PNG，RTF，TXT</td></tr><tr><td>电子表格</td><td>CSV，ODS，OTS，TSV，XLS，XLSX</td><td>CSV，HTML，ODS，OTS，PDF，PNG，TSV，XLS，XLSX</td></tr><tr><td>介绍</td><td>ODP，OTP，PPT，PPTX</td><td>HTML，ODP，OTP，PDF，PNG，PPT，PPTX，SWF</td></tr><tr><td>画画</td><td>ODG，OTG</td><td>ODG，OTG，PDF，PNG，SWF</td></tr><tr><td>其他</td><td>HTML</td><td>DOC，DOCX，HTML，ODT，OTT，PDF，PNG，RTF，TXT</td></tr></tbody></table><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>要使用<strong>JODConverter，</strong>您需要：</p><ul><li>Java运行时环境1.7或更高版本。</li><li><a href="https://www.openoffice.org/" target="_blank" rel="noopener">Apache OpenOffice</a>或<a href="https://www.libreoffice.org/" target="_blank" rel="noopener">LibreOffice</a> ; 通常建议使用最新的稳定版本。</li><li>任何可用于Java和Apache OpenOffice / LibreOffice的操作系统（Windows，Linux，Mac OS X，Solaris，FreeBSD等）。请参阅您计划用于操作系统要求的OOo分发的系统要求。<ul><li>Apache OpenOffice <a href="https://www.openoffice.org/dev_docs/source/sys_reqs.html" target="_blank" rel="noopener">系统要求</a>。</li><li>LibreOffice <a href="https://www.libreoffice.org/get-help/system-requirements" target="_blank" rel="noopener">系统要求</a>。</li></ul></li><li>要用作Web应用程序/ Web服务，您还需要一个servlet容器，例如<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">Apache Tomcat</a>。</li></ul><h3 id="组件（配置）"><a href="#组件（配置）" class="headerlink" title="组件（配置）"></a>组件（配置）</h3><h4 id="officeHome"><a href="#officeHome" class="headerlink" title="officeHome"></a>officeHome</h4><p>此属性设置将用于执行文档转换的办公室安装的office主目录。 </p><h4 id="processManager"><a href="#processManager" class="headerlink" title="processManager"></a>processManager</h4><p>当JODConverter需要处理已启动的办公流程时，将使用流程管理器。当JODConverter启动办公室进程时，它必须检索已启动进程的PID，以便以后能够在需要时终止它。</p><p> <em>默认值</em>：默认情况下，JODConverter将根据运行JODConverter的操作系统尝试查找最佳进程管理器。但是，如果在类路径中找到，则可以使用任何实现ProcessManager接口的进程管理器。</p><p>只有在启用了processManager后才可以使用jodconverter进行文件转换</p><p>其余属性请查看此链接<a href="https://github.com/sbraconnier/jodconverter/wiki/Configuration" target="_blank" rel="noopener">https://github.com/sbraconnier/jodconverter/wiki/Configuration</a> </p><h3 id="官方Java中使用dome"><a href="#官方Java中使用dome" class="headerlink" title="官方Java中使用dome"></a>官方Java中使用dome</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">File inputFile = <span class="keyword">new</span> File(<span class="string">"document.doc"</span>);</span><br><span class="line">File outputFile = <span class="keyword">new</span> File(<span class="string">"document.pdf"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an office manager using the default configuration.</span></span><br><span class="line"><span class="comment">// The default port is 2002. Note that when an office manager</span></span><br><span class="line"><span class="comment">// is installed, it will be the one used by default when</span></span><br><span class="line"><span class="comment">// a converter is created.</span></span><br><span class="line"><span class="keyword">final</span> LocalOfficeManager officeManager = LocalOfficeManager.install(); </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start an office process and connect to the started instance (on port 2002).</span></span><br><span class="line">    officeManager.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert</span></span><br><span class="line">    JodConverter</span><br><span class="line">             .convert(inputFile)</span><br><span class="line">             .to(outputFile)</span><br><span class="line">             .execute();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// Stop the office process</span></span><br><span class="line">    OfficeUtils.stopQuietly(officeManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本人整合springboot使用"><a href="#本人整合springboot使用" class="headerlink" title="本人整合springboot使用"></a>本人整合springboot使用</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Gradle Wrapper</title>
      <link href="/MeBlog/2019/04/29/gradle-wrapper/"/>
      <url>/MeBlog/2019/04/29/gradle-wrapper/</url>
      
        <content type="html"><![CDATA[<h1 id="关于Gradle-Wrapper"><a href="#关于Gradle-Wrapper" class="headerlink" title="关于Gradle Wrapper"></a>关于Gradle Wrapper</h1><p>推荐的方式执行任何Gradle构建的帮助下Gradle包装器(总之只是“包装器”)。包装是一个脚本,该脚本调用它宣布版本,必要时预先下载它。因此,开发人员可以用Gradle项目迅速而不必遵循手动安装过程节省贵公司的时间和金钱 </p><p><img src="https://docs.gradle.org/current/userguide/img/wrapper-workflow.png" alt></p><p>你将获得以下好处：</p><p>同一版本</p><p>减低了版本统一的维护成本，只需在wrapper 文件下声明处修改版本就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task wrapper(type: Wrapper) &#123;</span><br><span class="line">    gradleVersion = &apos;1.11&apos; //修改此处版本</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用wrapper-的3中情况"><a href="#使用wrapper-的3中情况" class="headerlink" title="使用wrapper 的3中情况"></a>使用wrapper 的3中情况</h2><h3 id="创建一个新的项目并加入wrapper"><a href="#创建一个新的项目并加入wrapper" class="headerlink" title="创建一个新的项目并加入wrapper"></a>创建一个新的项目并加入wrapper</h3><ol><li><p>在自己指定的工作空间目录下运行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle wrapper</span><br></pre></td></tr></table></figure></li><li><p>创建指令</p><p>–gradle-version ：用于指定gradle 的版本</p><p>–distribution-type ：用于指定gradle的类型 bin 或 all</p><p>–gradle-distribution-url : 用于指导gradle的下载路径</p><p>–gradle-distribution-sha256-sum ：用于指定编码格式</p><p>案例：创建gradle 版本为5.1.1的all类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle wrapper --gradle-version 5.1.1 --distribution-type all</span><br></pre></td></tr></table></figure></li><li><p>创建后的目录结构图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">└── gradlew.bat</span><br></pre></td></tr></table></figure><p>gradle-wrapper.jar  wrapper的源文件</p><p>gradle-wrapper.properties  wrapper的版本等配置属性</p><p>gradlew  shell脚本工具</p><p>gradlew.bat windows 批处理工具</p></li></ol><h3 id="运行已经加入wrapper的项目"><a href="#运行已经加入wrapper的项目" class="headerlink" title="运行已经加入wrapper的项目"></a>运行已经加入wrapper的项目</h3><ol><li><p>在项目目录下运行下列代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew.bat build</span><br></pre></td></tr></table></figure></li></ol><h3 id="在已有wrapper的gradle项目中更新gradle的版本为最新。"><a href="#在已有wrapper的gradle项目中更新gradle的版本为最新。" class="headerlink" title="在已有wrapper的gradle项目中更新gradle的版本为最新。"></a>在已有wrapper的gradle项目中更新gradle的版本为最新。</h3><p>使用前面的命令可进行更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle wrapper --gradle-version 5.1.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-初识</title>
      <link href="/MeBlog/2019/04/29/Linux-%E5%88%9D%E8%AF%86/"/>
      <url>/MeBlog/2019/04/29/Linux-%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><h3 id="Linux-学习方法"><a href="#Linux-学习方法" class="headerlink" title="Linux 学习方法"></a>Linux 学习方法</h3><ol><li>坚持使用命令行</li><li>遇到问题，不要马上问别人。先自行寻找答案<ol><li>解决问题的的智慧： 帮助、文档、示例、查找</li></ol></li><li>忘掉Windows思维方式</li><li>计划、坚持、专注、练习</li></ol><h3 id="Linux系统分区"><a href="#Linux系统分区" class="headerlink" title="Linux系统分区"></a>Linux系统分区</h3><p>1.什么是磁盘分区：</p><p>​    磁盘分区是使用分区编辑器（partition editor）在磁盘上划分几个逻辑部分，碟片一但划分成数个分区（partition）不同类的目录与文件可以存储进不同的分区。</p><p>example：</p><p>划分柜子，将一个大柜子划分为3个小柜子。这样可以方便使用者。</p><p>分区类型：</p><p>主分区：最多只能有4个（一块硬盘的前提条件下）</p><p>扩展分区：</p><p>​    最多只能有1个（一块硬盘的前提条件下）</p><p>​    主分区加扩展分区最多有4个（一块硬盘的前提条件下）</p><p>​    不能写入数据，只能包含逻辑分区（一块硬盘的前提条件下）</p><p><img src="C:\Users\sloth\AppData\Local\Temp\1553220848741.png" alt="1553220848741"></p><p>逻辑分区</p><p>2.格式化</p><p>​    什么是格式化：</p><p>​    格式化 （高级格式化）又称逻辑格式化。它是指根据用户选的的文件系统（FAT16、FAT32、NTFS、EXT3、EXT2、EXT4等）在磁盘的特定区域写入特定数据，在分区中划出一片用于存放文件的分配表、目录表等用于文件管理的磁盘空间。</p><p>Linux默认的文件系统：EXT4</p><p>关键词：</p><p>​    block</p><p>​    inode 号</p><p>3.硬件设备文件名</p><p><img src="C:\Users\sloth\AppData\Local\Temp\1553216867850.png" alt="1553216867850"></p><p>4.分区设备文件名</p><p><img src="C:\Users\sloth\AppData\Local\Temp\1553217099195.png" alt="1553217099195"></p><p>/dev/hda1 代表什么？ /dev 代表了这是系统的设备文件的根目录，hda1中hda表示用户使用的是IDE硬盘，1表示第几个分区（数字标识）</p><p>IDE硬盘接口：</p><p><img src="C:\Users\sloth\AppData\Local\Temp\1553217517403.png" alt="1553217517403"></p><p>理论每秒传输133MB</p><p>SCSI硬盘接口：</p><p><img src="C:\Users\sloth\AppData\Local\Temp\1553217620457.png" alt="1553217620457"></p><p>理论每秒传输200MB</p><p>SATA硬盘接口：</p><p><img src="C:\Users\sloth\AppData\Local\Temp\1553217899946.png" alt="1553217899946"></p><p>sata3代理论每秒传输500MB  </p><p>5.挂载</p><p>​    必须分区</p><p>​        /(根分区)</p><p>​        swap（交换分区、内存2倍）</p><p>​    推荐分区</p><p>​        /boot（启动分区，200MB）</p><p>文件系统结构</p><p><img src="C:\Users\sloth\AppData\Local\Temp\1553221402638.png" alt="1553221402638"></p><p>系统分区流程</p><p>​    分区 》格式化 》为分区指定设备文件名 》 挂载</p><h3 id="密码原则："><a href="#密码原则：" class="headerlink" title="密码原则："></a>密码原则：</h3><p>​    复杂性</p><p>​        八位字符以上、大小写字母、数字、符号</p><p>​        不是单词</p><p>​        不是用户的相关信息</p><p>​    易记性</p><p>​    时效性</p><h3 id="安装日志"><a href="#安装日志" class="headerlink" title="安装日志"></a>安装日志</h3><p>​    /root/install.log 存储了安装在系统中的软件包及其版本信息</p><p>​    /root/install.log.syslog 存储了安装过程中留下来的事件信息</p><p>​    /root/anaconda-ks.cfg 以Kickstrat配置文件的格式记录安装过程中设置的选项信息</p><h3 id="linux-关于IP操作的一些命令"><a href="#linux-关于IP操作的一些命令" class="headerlink" title="linux 关于IP操作的一些命令"></a>linux 关于IP操作的一些命令</h3><p>ifconfig ：查看系统网卡信息</p><p>ifconfig eth0 [ip 地址]  :临时配置网卡，系统重启后失效</p><h3 id="Linux-注意事项"><a href="#Linux-注意事项" class="headerlink" title="Linux 注意事项"></a>Linux 注意事项</h3><p>​    严格区分大小写</p><p>​     Linux中所有的内容都是以文件形式保存，包括硬件</p><p>​        硬盘文件是/dev/sd[a-p]</p><p>​        光盘文件是/dev/sr0等</p><p>​    Linux不靠扩展名区分文件类型 </p><p>​    Linux所有存储设备都必须挂载之后用户才能使用,包括硬盘、U盘和光盘</p><p>​    windows下的程序不能直接在Linux中安装和运行 </p><h3 id="服务器管理和维护建议"><a href="#服务器管理和维护建议" class="headerlink" title="服务器管理和维护建议"></a>服务器管理和维护建议</h3><p>服务器最好重启操作，不要关机操作</p><p>重启时应该关闭服务器</p><p>不要在服务器访问高峰运行高负载命令</p><p>远程配置防火墙时不要把自己踢出服务器</p><p>指定合理的密码规范并定期更新</p><p>合理分配权限</p><p>定期备份重要数据和日志</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>configuartionProperties注解</title>
      <link href="/MeBlog/2019/04/29/ConfigurationProperties%E6%B3%A8%E8%A7%A3/"/>
      <url>/MeBlog/2019/04/29/ConfigurationProperties%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="configuartionProperties"><a href="#configuartionProperties" class="headerlink" title="@configuartionProperties"></a>@configuartionProperties</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​    用于将properties 文件中的属性或yml属性文件中的属性 放入pojo中</p><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="configuartionProperties-Component"><a href="#configuartionProperties-Component" class="headerlink" title="@configuartionProperties + @Component"></a>@configuartionProperties + @Component</h4><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"me.user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.healthengine.medpro.fileSystem.FileSystemApplication;</span><br><span class="line"><span class="keyword">import</span> com.healthengine.medpro.fileSystem.controller.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = FileSystemApplication.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configuration</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">me:</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">baowengliang</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name=&apos;baowengliang&apos;, password=&apos;123456&apos;&#125;</span><br></pre></td></tr></table></figure><h4 id="Bean-ConfigurationProperties"><a href="#Bean-ConfigurationProperties" class="headerlink" title="@Bean + @ConfigurationProperties"></a>@Bean + @ConfigurationProperties</h4><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(FileSystemApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"me.user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.healthengine.medpro.fileSystem.FileSystemApplication;</span><br><span class="line"><span class="keyword">import</span> com.healthengine.medpro.fileSystem.controller.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = FileSystemApplication.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configuration</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">me:</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">baowengliang</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>测试结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name=&apos;baowengliang&apos;, password=&apos;123456&apos;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="EnableConfigurationProperties-ConfigurationProperties"><a href="#EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties + @ConfigurationProperties"></a>@EnableConfigurationProperties + @ConfigurationProperties</h4><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"me.user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>()</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(User.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(FileSystemApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">me:</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">baowengliang</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.healthengine.medpro.fileSystem.FileSystemApplication;</span><br><span class="line"><span class="keyword">import</span> com.healthengine.medpro.fileSystem.controller.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = FileSystemApplication.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configuration</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name=&apos;baowengliang&apos;, password=&apos;123456&apos;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
